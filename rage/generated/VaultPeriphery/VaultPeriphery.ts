// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class DepositPeriphery extends ethereum.Event {
  get params(): DepositPeriphery__Params {
    return new DepositPeriphery__Params(this);
  }
}

export class DepositPeriphery__Params {
  _event: DepositPeriphery;

  constructor(event: DepositPeriphery) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get asset(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EthOracleUpdated extends ethereum.Event {
  get params(): EthOracleUpdated__Params {
    return new EthOracleUpdated__Params(this);
  }
}

export class EthOracleUpdated__Params {
  _event: EthOracleUpdated;

  constructor(event: EthOracleUpdated) {
    this._event = event;
  }

  get oldEthOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newEthOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SlippageToleranceUpdated extends ethereum.Event {
  get params(): SlippageToleranceUpdated__Params {
    return new SlippageToleranceUpdated__Params(this);
  }
}

export class SlippageToleranceUpdated__Params {
  _event: SlippageToleranceUpdated;

  constructor(event: SlippageToleranceUpdated) {
    this._event = event;
  }

  get oldTolerance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTolerance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SwapRouterUpdated extends ethereum.Event {
  get params(): SwapRouterUpdated__Params {
    return new SwapRouterUpdated__Params(this);
  }
}

export class SwapRouterUpdated__Params {
  _event: SwapRouterUpdated;

  constructor(event: SwapRouterUpdated) {
    this._event = event;
  }

  get oldSwapRouter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSwapRouter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VaultPeriphery extends ethereum.SmartContract {
  static bind(address: Address): VaultPeriphery {
    return new VaultPeriphery('VaultPeriphery', address);
  }

  MAX_BPS(): BigInt {
    let result = super.call('MAX_BPS', 'MAX_BPS():(uint256)', []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('MAX_BPS', 'MAX_BPS():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOLERANCE(): BigInt {
    let result = super.call('MAX_TOLERANCE', 'MAX_TOLERANCE():(uint256)', []);

    return result[0].toBigInt();
  }

  try_MAX_TOLERANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'MAX_TOLERANCE',
      'MAX_TOLERANCE():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositUsdc(amount: BigInt): BigInt {
    let result = super.call('depositUsdc', 'depositUsdc(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBigInt();
  }

  try_depositUsdc(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'depositUsdc',
      'depositUsdc(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWeth(amount: BigInt): BigInt {
    let result = super.call('depositWeth', 'depositWeth(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBigInt();
  }

  try_depositWeth(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'depositWeth',
      'depositWeth(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpOracle(): Address {
    let result = super.call('lpOracle', 'lpOracle():(address)', []);

    return result[0].toAddress();
  }

  try_lpOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall('lpOracle', 'lpOracle():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lpToken(): Address {
    let result = super.call('lpToken', 'lpToken():(address)', []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall('lpToken', 'lpToken():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stableSwap(): Address {
    let result = super.call('stableSwap', 'stableSwap():(address)', []);

    return result[0].toAddress();
  }

  try_stableSwap(): ethereum.CallResult<Address> {
    let result = super.tryCall('stableSwap', 'stableSwap():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapRouter(): Address {
    let result = super.call('swapRouter', 'swapRouter():(address)', []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall('swapRouter', 'swapRouter():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdc(): Address {
    let result = super.call('usdc', 'usdc():(address)', []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall('usdc', 'usdc():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdt(): Address {
    let result = super.call('usdt', 'usdt():(address)', []);

    return result[0].toAddress();
  }

  try_usdt(): ethereum.CallResult<Address> {
    let result = super.tryCall('usdt', 'usdt():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call('vault', 'vault():(address)', []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall('vault', 'vault():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call('weth', 'weth():(address)', []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall('weth', 'weth():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DepositEthCall extends ethereum.Call {
  get inputs(): DepositEthCall__Inputs {
    return new DepositEthCall__Inputs(this);
  }

  get outputs(): DepositEthCall__Outputs {
    return new DepositEthCall__Outputs(this);
  }
}

export class DepositEthCall__Inputs {
  _call: DepositEthCall;

  constructor(call: DepositEthCall) {
    this._call = call;
  }
}

export class DepositEthCall__Outputs {
  _call: DepositEthCall;

  constructor(call: DepositEthCall) {
    this._call = call;
  }

  get sharesMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositUsdcCall extends ethereum.Call {
  get inputs(): DepositUsdcCall__Inputs {
    return new DepositUsdcCall__Inputs(this);
  }

  get outputs(): DepositUsdcCall__Outputs {
    return new DepositUsdcCall__Outputs(this);
  }
}

export class DepositUsdcCall__Inputs {
  _call: DepositUsdcCall;

  constructor(call: DepositUsdcCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositUsdcCall__Outputs {
  _call: DepositUsdcCall;

  constructor(call: DepositUsdcCall) {
    this._call = call;
  }

  get sharesMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWethCall extends ethereum.Call {
  get inputs(): DepositWethCall__Inputs {
    return new DepositWethCall__Inputs(this);
  }

  get outputs(): DepositWethCall__Outputs {
    return new DepositWethCall__Outputs(this);
  }
}

export class DepositWethCall__Inputs {
  _call: DepositWethCall;

  constructor(call: DepositWethCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositWethCall__Outputs {
  _call: DepositWethCall;

  constructor(call: DepositWethCall) {
    this._call = call;
  }

  get sharesMinted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lpToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _vault(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _lpOracle(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _stableSwap(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _ethOracle(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateEthOracleCall extends ethereum.Call {
  get inputs(): UpdateEthOracleCall__Inputs {
    return new UpdateEthOracleCall__Inputs(this);
  }

  get outputs(): UpdateEthOracleCall__Outputs {
    return new UpdateEthOracleCall__Outputs(this);
  }
}

export class UpdateEthOracleCall__Inputs {
  _call: UpdateEthOracleCall;

  constructor(call: UpdateEthOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateEthOracleCall__Outputs {
  _call: UpdateEthOracleCall;

  constructor(call: UpdateEthOracleCall) {
    this._call = call;
  }
}

export class UpdateSwapRouterCall extends ethereum.Call {
  get inputs(): UpdateSwapRouterCall__Inputs {
    return new UpdateSwapRouterCall__Inputs(this);
  }

  get outputs(): UpdateSwapRouterCall__Outputs {
    return new UpdateSwapRouterCall__Outputs(this);
  }
}

export class UpdateSwapRouterCall__Inputs {
  _call: UpdateSwapRouterCall;

  constructor(call: UpdateSwapRouterCall) {
    this._call = call;
  }

  get newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSwapRouterCall__Outputs {
  _call: UpdateSwapRouterCall;

  constructor(call: UpdateSwapRouterCall) {
    this._call = call;
  }
}

export class UpdateToleranceCall extends ethereum.Call {
  get inputs(): UpdateToleranceCall__Inputs {
    return new UpdateToleranceCall__Inputs(this);
  }

  get outputs(): UpdateToleranceCall__Outputs {
    return new UpdateToleranceCall__Outputs(this);
  }
}

export class UpdateToleranceCall__Inputs {
  _call: UpdateToleranceCall;

  constructor(call: UpdateToleranceCall) {
    this._call = call;
  }

  get newTolerance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateToleranceCall__Outputs {
  _call: UpdateToleranceCall;

  constructor(call: UpdateToleranceCall) {
    this._call = call;
  }
}
