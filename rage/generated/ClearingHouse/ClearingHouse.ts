// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GovernanceTransferred extends ethereum.Event {
  get params(): GovernanceTransferred__Params {
    return new GovernanceTransferred__Params(this);
  }
}

export class GovernanceTransferred__Params {
  _event: GovernanceTransferred;

  constructor(event: GovernanceTransferred) {
    this._event = event;
  }

  get previousGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernance(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCollateralSupported extends ethereum.Event {
  get params(): NewCollateralSupported__Params {
    return new NewCollateralSupported__Params(this);
  }
}

export class NewCollateralSupported__Params {
  _event: NewCollateralSupported;

  constructor(event: NewCollateralSupported) {
    this._event = event;
  }

  get rTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewVTokenSupported extends ethereum.Event {
  get params(): NewVTokenSupported__Params {
    return new NewVTokenSupported__Params(this);
  }
}

export class NewVTokenSupported__Params {
  _event: NewVTokenSupported;

  constructor(event: NewVTokenSupported) {
    this._event = event;
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RageTradePoolSettingsUpdated extends ethereum.Event {
  get params(): RageTradePoolSettingsUpdated__Params {
    return new RageTradePoolSettingsUpdated__Params(this);
  }
}

export class RageTradePoolSettingsUpdated__Params {
  _event: RageTradePoolSettingsUpdated;

  constructor(event: RageTradePoolSettingsUpdated) {
    this._event = event;
  }

  get vToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settings(): RageTradePoolSettingsUpdatedSettingsStruct {
    return this._event.parameters[1].value.toTuple() as RageTradePoolSettingsUpdatedSettingsStruct;
  }
}

export class RageTradePoolSettingsUpdatedSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class TeamMultisigTransferred extends ethereum.Event {
  get params(): TeamMultisigTransferred__Params {
    return new TeamMultisigTransferred__Params(this);
  }
}

export class TeamMultisigTransferred__Params {
  _event: TeamMultisigTransferred;

  constructor(event: TeamMultisigTransferred) {
    this._event = event;
  }

  get previousTeamMultisig(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTeamMultisig(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get ownerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accountNo(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositMargin extends ethereum.Event {
  get params(): DepositMargin__Params {
    return new DepositMargin__Params(this);
  }
}

export class DepositMargin__Params {
  _event: DepositMargin;

  constructor(event: DepositMargin) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundingPayment extends ethereum.Event {
  get params(): FundingPayment__Params {
    return new FundingPayment__Params(this);
  }
}

export class FundingPayment__Params {
  _event: FundingPayment;

  constructor(event: FundingPayment) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidateRanges extends ethereum.Event {
  get params(): LiquidateRanges__Params {
    return new LiquidateRanges__Params(this);
  }
}

export class LiquidateRanges__Params {
  _event: LiquidateRanges;

  constructor(event: LiquidateRanges) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keeperAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get keeperFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get insuranceFundFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidateTokenPosition extends ethereum.Event {
  get params(): LiquidateTokenPosition__Params {
    return new LiquidateTokenPosition__Params(this);
  }
}

export class LiquidateTokenPosition__Params {
  _event: LiquidateTokenPosition;

  constructor(event: LiquidateTokenPosition) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidatorAccountNo(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidationBps(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidationPriceX128(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidatorPriceX128(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get insuranceFundFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LiquidityChange extends ethereum.Event {
  get params(): LiquidityChange__Params {
    return new LiquidityChange__Params(this);
  }
}

export class LiquidityChange__Params {
  _event: LiquidityChange;

  constructor(event: LiquidityChange) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidityDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get limitOrderType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get baseAmountOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LiquidityFee extends ethereum.Event {
  get params(): LiquidityFee__Params {
    return new LiquidityFee__Params(this);
  }
}

export class LiquidityFee__Params {
  _event: LiquidityFee;

  constructor(event: LiquidityFee) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityTokenPositionChange extends ethereum.Event {
  get params(): LiquidityTokenPositionChange__Params {
    return new LiquidityTokenPositionChange__Params(this);
  }
}

export class LiquidityTokenPositionChange__Params {
  _event: LiquidityTokenPositionChange;

  constructor(event: LiquidityTokenPositionChange) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ProtocolFeeWithdrawm extends ethereum.Event {
  get params(): ProtocolFeeWithdrawm__Params {
    return new ProtocolFeeWithdrawm__Params(this);
  }
}

export class ProtocolFeeWithdrawm__Params {
  _event: ProtocolFeeWithdrawm;

  constructor(event: ProtocolFeeWithdrawm) {
    this._event = event;
  }

  get wrapperAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenPositionChange extends ethereum.Event {
  get params(): TokenPositionChange__Params {
    return new TokenPositionChange__Params(this);
  }
}

export class TokenPositionChange__Params {
  _event: TokenPositionChange;

  constructor(event: TokenPositionChange) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get baseAmountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateProfit extends ethereum.Event {
  get params(): UpdateProfit__Params {
    return new UpdateProfit__Params(this);
  }
}

export class UpdateProfit__Params {
  _event: UpdateProfit;

  constructor(event: UpdateProfit) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawMargin extends ethereum.Event {
  get params(): WithdrawMargin__Params {
    return new WithdrawMargin__Params(this);
  }
}

export class WithdrawMargin__Params {
  _event: WithdrawMargin;

  constructor(event: WithdrawMargin) {
    this._event = event;
  }

  get accountNo(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClearingHouse__cTokensResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get oracleAddress(): Address {
    return this[1].toAddress();
  }

  get oracleTimeHorizon(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }
}

export class ClearingHouse__getAccountMarketValueAndRequiredMarginResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__getAccountViewResultTokenDepositsStruct extends ethereum.Tuple {
  get cTokenAddress(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class ClearingHouse__getAccountViewResultTokenPositionsStruct extends ethereum.Tuple {
  get vTokenAddress(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get netTraderPosition(): BigInt {
    return this[2].toBigInt();
  }

  get sumAX128Ckpt(): BigInt {
    return this[3].toBigInt();
  }

  get liquidityPositions(): Array<
    ClearingHouse__getAccountViewResultTokenPositionsLiquidityPositionsStruct
  > {
    return this[4].toTupleArray<
      ClearingHouse__getAccountViewResultTokenPositionsLiquidityPositionsStruct
    >();
  }
}

export class ClearingHouse__getAccountViewResultTokenPositionsLiquidityPositionsStruct extends ethereum.Tuple {
  get limitOrderType(): i32 {
    return this[0].toI32();
  }

  get tickLower(): i32 {
    return this[1].toI32();
  }

  get tickUpper(): i32 {
    return this[2].toI32();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get vTokenAmountIn(): BigInt {
    return this[4].toBigInt();
  }

  get sumALastX128(): BigInt {
    return this[5].toBigInt();
  }

  get sumBInsideLastX128(): BigInt {
    return this[6].toBigInt();
  }

  get sumFpInsideLastX128(): BigInt {
    return this[7].toBigInt();
  }

  get sumFeeInsideLastX128(): BigInt {
    return this[8].toBigInt();
  }
}

export class ClearingHouse__getAccountViewResult {
  value0: Address;
  value1: BigInt;
  value2: Array<ClearingHouse__getAccountViewResultTokenDepositsStruct>;
  value3: Array<ClearingHouse__getAccountViewResultTokenPositionsStruct>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Array<ClearingHouse__getAccountViewResultTokenDepositsStruct>,
    value3: Array<ClearingHouse__getAccountViewResultTokenPositionsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    map.set("value3", ethereum.Value.fromTupleArray(this.value3));
    return map;
  }
}

export class ClearingHouse__getTwapSqrtPricesForSetDurationResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vBaseIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vBaseIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct extends ethereum.Tuple {
  get operationType(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class ClearingHouse__poolsResultValue0Struct extends ethereum.Tuple {
  get vPool(): Address {
    return this[0].toAddress();
  }

  get vPoolWrapper(): Address {
    return this[1].toAddress();
  }

  get settings(): ClearingHouse__poolsResultValue0SettingsStruct {
    return this[2].toTuple() as ClearingHouse__poolsResultValue0SettingsStruct;
  }
}

export class ClearingHouse__poolsResultValue0SettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class ClearingHouse__protocolInfoResultLiquidationParamsStruct extends ethereum.Tuple {
  get liquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationPriceDeltaBps(): i32 {
    return this[1].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[2].toI32();
  }
}

export class ClearingHouse__protocolInfoResult {
  value0: Address;
  value1: ClearingHouse__protocolInfoResultLiquidationParamsStruct;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: ClearingHouse__protocolInfoResultLiquidationParamsStruct,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class ClearingHouse__swapTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__swapTokenInputSwapParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get sqrtPriceLimit(): BigInt {
    return this[1].toBigInt();
  }

  get isNotional(): boolean {
    return this[2].toBoolean();
  }

  get isPartialAllowed(): boolean {
    return this[3].toBoolean();
  }
}

export class ClearingHouse__updateRangeOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get sqrtPriceCurrent(): BigInt {
    return this[3].toBigInt();
  }

  get slippageToleranceBps(): i32 {
    return this[4].toI32();
  }

  get closeTokenPosition(): boolean {
    return this[5].toBoolean();
  }

  get limitOrderType(): i32 {
    return this[6].toI32();
  }
}

export class ClearingHouse extends ethereum.SmartContract {
  static bind(address: Address): ClearingHouse {
    return new ClearingHouse("ClearingHouse", address);
  }

  cTokens(cTokenId: BigInt): ClearingHouse__cTokensResultValue0Struct {
    let result = super.call(
      "cTokens",
      "cTokens(uint32):((address,address,uint32,bool))",
      [ethereum.Value.fromUnsignedBigInt(cTokenId)]
    );

    return result[0].toTuple() as ClearingHouse__cTokensResultValue0Struct;
  }

  try_cTokens(
    cTokenId: BigInt
  ): ethereum.CallResult<ClearingHouse__cTokensResultValue0Struct> {
    let result = super.tryCall(
      "cTokens",
      "cTokens(uint32):((address,address,uint32,bool))",
      [ethereum.Value.fromUnsignedBigInt(cTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__cTokensResultValue0Struct
    );
  }

  createAccount(): BigInt {
    let result = super.call("createAccount", "createAccount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createAccount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAccount",
      "createAccount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAccountAndAddMargin(
    vTokenTruncatedAddress: BigInt,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "createAccountAndAddMargin",
      "createAccountAndAddMargin(uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAccountAndAddMargin(
    vTokenTruncatedAddress: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAccountAndAddMargin",
      "createAccountAndAddMargin(uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extsload(slot: Bytes): Bytes {
    let result = super.call("extsload", "extsload(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(slot)
    ]);

    return result[0].toBytes();
  }

  try_extsload(slot: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("extsload", "extsload(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(slot)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  extsload1(slots: Array<Bytes>): Array<Bytes> {
    let result = super.call("extsload", "extsload(bytes32[]):(bytes32[])", [
      ethereum.Value.fromFixedBytesArray(slots)
    ]);

    return result[0].toBytesArray();
  }

  try_extsload1(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("extsload", "extsload(bytes32[]):(bytes32[])", [
      ethereum.Value.fromFixedBytesArray(slots)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAccountMarketValueAndRequiredMargin(
    accountNo: BigInt,
    isInitialMargin: boolean
  ): ClearingHouse__getAccountMarketValueAndRequiredMarginResult {
    let result = super.call(
      "getAccountMarketValueAndRequiredMargin",
      "getAccountMarketValueAndRequiredMargin(uint256,bool):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromBoolean(isInitialMargin)
      ]
    );

    return new ClearingHouse__getAccountMarketValueAndRequiredMarginResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAccountMarketValueAndRequiredMargin(
    accountNo: BigInt,
    isInitialMargin: boolean
  ): ethereum.CallResult<
    ClearingHouse__getAccountMarketValueAndRequiredMarginResult
  > {
    let result = super.tryCall(
      "getAccountMarketValueAndRequiredMargin",
      "getAccountMarketValueAndRequiredMargin(uint256,bool):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromBoolean(isInitialMargin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getAccountMarketValueAndRequiredMarginResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAccountNetProfit(accountNo: BigInt): BigInt {
    let result = super.call(
      "getAccountNetProfit",
      "getAccountNetProfit(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(accountNo)]
    );

    return result[0].toBigInt();
  }

  try_getAccountNetProfit(accountNo: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccountNetProfit",
      "getAccountNetProfit(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(accountNo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountView(accountNo: BigInt): ClearingHouse__getAccountViewResult {
    let result = super.call(
      "getAccountView",
      "getAccountView(uint256):(address,int256,(address,uint256)[],(address,int256,int256,int256,(uint8,int24,int24,uint128,int256,int256,int256,int256,uint256)[])[])",
      [ethereum.Value.fromUnsignedBigInt(accountNo)]
    );

    return new ClearingHouse__getAccountViewResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toTupleArray<
        ClearingHouse__getAccountViewResultTokenDepositsStruct
      >(),
      result[3].toTupleArray<
        ClearingHouse__getAccountViewResultTokenPositionsStruct
      >()
    );
  }

  try_getAccountView(
    accountNo: BigInt
  ): ethereum.CallResult<ClearingHouse__getAccountViewResult> {
    let result = super.tryCall(
      "getAccountView",
      "getAccountView(uint256):(address,int256,(address,uint256)[],(address,int256,int256,int256,(uint8,int24,int24,uint128,int256,int256,int256,int256,uint256)[])[])",
      [ethereum.Value.fromUnsignedBigInt(accountNo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getAccountViewResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toTupleArray<
          ClearingHouse__getAccountViewResultTokenDepositsStruct
        >(),
        value[3].toTupleArray<
          ClearingHouse__getAccountViewResultTokenPositionsStruct
        >()
      )
    );
  }

  getTwapSqrtPricesForSetDuration(
    vToken: Address
  ): ClearingHouse__getTwapSqrtPricesForSetDurationResult {
    let result = super.call(
      "getTwapSqrtPricesForSetDuration",
      "getTwapSqrtPricesForSetDuration(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(vToken)]
    );

    return new ClearingHouse__getTwapSqrtPricesForSetDurationResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTwapSqrtPricesForSetDuration(
    vToken: Address
  ): ethereum.CallResult<ClearingHouse__getTwapSqrtPricesForSetDurationResult> {
    let result = super.tryCall(
      "getTwapSqrtPricesForSetDuration",
      "getTwapSqrtPricesForSetDuration(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(vToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getTwapSqrtPricesForSetDurationResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  insuranceFund(): Address {
    let result = super.call("insuranceFund", "insuranceFund():(address)", []);

    return result[0].toAddress();
  }

  try_insuranceFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "insuranceFund",
      "insuranceFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isVTokenAddressAvailable(truncated: BigInt): boolean {
    let result = super.call(
      "isVTokenAddressAvailable",
      "isVTokenAddressAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(truncated)]
    );

    return result[0].toBoolean();
  }

  try_isVTokenAddressAvailable(
    truncated: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVTokenAddressAvailable",
      "isVTokenAddressAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(truncated)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateLiquidityPositionsWithGasClaim(
    accountNo: BigInt,
    gasComputationUnitsClaim: BigInt
  ): BigInt {
    let result = super.call(
      "liquidateLiquidityPositionsWithGasClaim",
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateLiquidityPositionsWithGasClaim(
    accountNo: BigInt,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateLiquidityPositionsWithGasClaim",
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateTokenPosition(
    liquidatorAccountNo: BigInt,
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidationBps: i32
  ): ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct {
    let result = super.call(
      "liquidateTokenPosition",
      "liquidateTokenPosition(uint256,uint256,uint32,uint16):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountNo),
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps))
      ]
    );

    return result[0].toTuple() as ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct;
  }

  try_liquidateTokenPosition(
    liquidatorAccountNo: BigInt,
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidationBps: i32
  ): ethereum.CallResult<
    ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct
  > {
    let result = super.tryCall(
      "liquidateTokenPosition",
      "liquidateTokenPosition(uint256,uint256,uint32,uint16):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountNo),
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct
    );
  }

  liquidateTokenPositionWithGasClaim(
    liquidatorAccountNo: BigInt,
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidationBps: i32,
    gasComputationUnitsClaim: BigInt
  ): ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct {
    let result = super.call(
      "liquidateTokenPositionWithGasClaim",
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountNo),
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps)),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toTuple() as ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct;
  }

  try_liquidateTokenPositionWithGasClaim(
    liquidatorAccountNo: BigInt,
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidationBps: i32,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<
    ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct
  > {
    let result = super.tryCall(
      "liquidateTokenPositionWithGasClaim",
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountNo),
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps)),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct
    );
  }

  multicallWithSingleMarginCheck(
    accountNo: BigInt,
    operations: Array<
      ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct
    >
  ): Array<Bytes> {
    let result = super.call(
      "multicallWithSingleMarginCheck",
      "multicallWithSingleMarginCheck(uint256,(uint8,bytes)[]):(bytes[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromTupleArray(operations)
      ]
    );

    return result[0].toBytesArray();
  }

  try_multicallWithSingleMarginCheck(
    accountNo: BigInt,
    operations: Array<
      ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct
    >
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "multicallWithSingleMarginCheck",
      "multicallWithSingleMarginCheck(uint256,(uint8,bytes)[]):(bytes[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromTupleArray(operations)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nativeOracle(): Address {
    let result = super.call("nativeOracle", "nativeOracle():(address)", []);

    return result[0].toAddress();
  }

  try_nativeOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("nativeOracle", "nativeOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numAccounts(): BigInt {
    let result = super.call("numAccounts", "numAccounts():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numAccounts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numAccounts", "numAccounts():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pools(vToken: Address): ClearingHouse__poolsResultValue0Struct {
    let result = super.call(
      "pools",
      "pools(address):((address,address,(uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromAddress(vToken)]
    );

    return result[0].toTuple() as ClearingHouse__poolsResultValue0Struct;
  }

  try_pools(
    vToken: Address
  ): ethereum.CallResult<ClearingHouse__poolsResultValue0Struct> {
    let result = super.tryCall(
      "pools",
      "pools(address):((address,address,(uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromAddress(vToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__poolsResultValue0Struct
    );
  }

  protocolInfo(): ClearingHouse__protocolInfoResult {
    let result = super.call(
      "protocolInfo",
      "protocolInfo():(address,(uint16,uint16,uint16),uint256,uint256,uint256)",
      []
    );

    return new ClearingHouse__protocolInfoResult(
      result[0].toAddress(),
      result[1].toTuple() as ClearingHouse__protocolInfoResultLiquidationParamsStruct,
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_protocolInfo(): ethereum.CallResult<ClearingHouse__protocolInfoResult> {
    let result = super.tryCall(
      "protocolInfo",
      "protocolInfo():(address,(uint16,uint16,uint16),uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__protocolInfoResult(
        value[0].toAddress(),
        value[1].toTuple() as ClearingHouse__protocolInfoResultLiquidationParamsStruct,
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  rageTradeFactoryAddress(): Address {
    let result = super.call(
      "rageTradeFactoryAddress",
      "rageTradeFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rageTradeFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rageTradeFactoryAddress",
      "rageTradeFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeLimitOrderWithGasClaim(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    tickLower: i32,
    tickUpper: i32,
    gasComputationUnitsClaim: BigInt
  ): BigInt {
    let result = super.call(
      "removeLimitOrderWithGasClaim",
      "removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeLimitOrderWithGasClaim(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    tickLower: i32,
    tickUpper: i32,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLimitOrderWithGasClaim",
      "removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportedDeposits(tokenAddress: Address): boolean {
    let result = super.call(
      "supportedDeposits",
      "supportedDeposits(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_supportedDeposits(tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedDeposits",
      "supportedDeposits(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportedVTokens(vToken: Address): boolean {
    let result = super.call(
      "supportedVTokens",
      "supportedVTokens(address):(bool)",
      [ethereum.Value.fromAddress(vToken)]
    );

    return result[0].toBoolean();
  }

  try_supportedVTokens(vToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedVTokens",
      "supportedVTokens(address):(bool)",
      [ethereum.Value.fromAddress(vToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapToken(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    swapParams: ClearingHouse__swapTokenInputSwapParamsStruct
  ): ClearingHouse__swapTokenResult {
    let result = super.call(
      "swapToken",
      "swapToken(uint256,uint32,(int256,uint160,bool,bool)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromTuple(swapParams)
      ]
    );

    return new ClearingHouse__swapTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapToken(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    swapParams: ClearingHouse__swapTokenInputSwapParamsStruct
  ): ethereum.CallResult<ClearingHouse__swapTokenResult> {
    let result = super.tryCall(
      "swapToken",
      "swapToken(uint256,uint32,(int256,uint160,bool,bool)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromTuple(swapParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__swapTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  teamMultisig(): Address {
    let result = super.call("teamMultisig", "teamMultisig():(address)", []);

    return result[0].toAddress();
  }

  try_teamMultisig(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamMultisig", "teamMultisig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateRangeOrder(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidityChangeParams: ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct
  ): ClearingHouse__updateRangeOrderResult {
    let result = super.call(
      "updateRangeOrder",
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromTuple(liquidityChangeParams)
      ]
    );

    return new ClearingHouse__updateRangeOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_updateRangeOrder(
    accountNo: BigInt,
    vTokenTruncatedAddress: BigInt,
    liquidityChangeParams: ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct
  ): ethereum.CallResult<ClearingHouse__updateRangeOrderResult> {
    let result = super.tryCall(
      "updateRangeOrder",
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountNo),
        ethereum.Value.fromUnsignedBigInt(vTokenTruncatedAddress),
        ethereum.Value.fromTuple(liquidityChangeParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__updateRangeOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  vTokens(vTokenAddressTruncated: BigInt): Address {
    let result = super.call("vTokens", "vTokens(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(vTokenAddressTruncated)
    ]);

    return result[0].toAddress();
  }

  try_vTokens(vTokenAddressTruncated: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vTokens", "vTokens(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(vTokenAddressTruncated)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class __ClearingHouse_initCall extends ethereum.Call {
  get inputs(): __ClearingHouse_initCall__Inputs {
    return new __ClearingHouse_initCall__Inputs(this);
  }

  get outputs(): __ClearingHouse_initCall__Outputs {
    return new __ClearingHouse_initCall__Outputs(this);
  }
}

export class __ClearingHouse_initCall__Inputs {
  _call: __ClearingHouse_initCall;

  constructor(call: __ClearingHouse_initCall) {
    this._call = call;
  }

  get _rageTradeFactoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultCollateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultCollateralTokenOracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _insuranceFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _vBase(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _nativeOracle(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class __ClearingHouse_initCall__Outputs {
  _call: __ClearingHouse_initCall;

  constructor(call: __ClearingHouse_initCall) {
    this._call = call;
  }
}

export class AddCollateralSupportCall extends ethereum.Call {
  get inputs(): AddCollateralSupportCall__Inputs {
    return new AddCollateralSupportCall__Inputs(this);
  }

  get outputs(): AddCollateralSupportCall__Outputs {
    return new AddCollateralSupportCall__Outputs(this);
  }
}

export class AddCollateralSupportCall__Inputs {
  _call: AddCollateralSupportCall;

  constructor(call: AddCollateralSupportCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get twapDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddCollateralSupportCall__Outputs {
  _call: AddCollateralSupportCall;

  constructor(call: AddCollateralSupportCall) {
    this._call = call;
  }
}

export class AddMarginCall extends ethereum.Call {
  get inputs(): AddMarginCall__Inputs {
    return new AddMarginCall__Inputs(this);
  }

  get outputs(): AddMarginCall__Outputs {
    return new AddMarginCall__Outputs(this);
  }
}

export class AddMarginCall__Inputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddMarginCall__Outputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get newAccountId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAccountAndAddMarginCall extends ethereum.Call {
  get inputs(): CreateAccountAndAddMarginCall__Inputs {
    return new CreateAccountAndAddMarginCall__Inputs(this);
  }

  get outputs(): CreateAccountAndAddMarginCall__Outputs {
    return new CreateAccountAndAddMarginCall__Outputs(this);
  }
}

export class CreateAccountAndAddMarginCall__Inputs {
  _call: CreateAccountAndAddMarginCall;

  constructor(call: CreateAccountAndAddMarginCall) {
    this._call = call;
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateAccountAndAddMarginCall__Outputs {
  _call: CreateAccountAndAddMarginCall;

  constructor(call: CreateAccountAndAddMarginCall) {
    this._call = call;
  }

  get newAccountId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsCall extends ethereum.Call {
  get inputs(): LiquidateLiquidityPositionsCall__Inputs {
    return new LiquidateLiquidityPositionsCall__Inputs(this);
  }

  get outputs(): LiquidateLiquidityPositionsCall__Outputs {
    return new LiquidateLiquidityPositionsCall__Outputs(this);
  }
}

export class LiquidateLiquidityPositionsCall__Inputs {
  _call: LiquidateLiquidityPositionsCall;

  constructor(call: LiquidateLiquidityPositionsCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsCall__Outputs {
  _call: LiquidateLiquidityPositionsCall;

  constructor(call: LiquidateLiquidityPositionsCall) {
    this._call = call;
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall extends ethereum.Call {
  get inputs(): LiquidateLiquidityPositionsWithGasClaimCall__Inputs {
    return new LiquidateLiquidityPositionsWithGasClaimCall__Inputs(this);
  }

  get outputs(): LiquidateLiquidityPositionsWithGasClaimCall__Outputs {
    return new LiquidateLiquidityPositionsWithGasClaimCall__Outputs(this);
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall__Inputs {
  _call: LiquidateLiquidityPositionsWithGasClaimCall;

  constructor(call: LiquidateLiquidityPositionsWithGasClaimCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall__Outputs {
  _call: LiquidateLiquidityPositionsWithGasClaimCall;

  constructor(call: LiquidateLiquidityPositionsWithGasClaimCall) {
    this._call = call;
  }

  get keeperFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateTokenPositionCall extends ethereum.Call {
  get inputs(): LiquidateTokenPositionCall__Inputs {
    return new LiquidateTokenPositionCall__Inputs(this);
  }

  get outputs(): LiquidateTokenPositionCall__Outputs {
    return new LiquidateTokenPositionCall__Outputs(this);
  }
}

export class LiquidateTokenPositionCall__Inputs {
  _call: LiquidateTokenPositionCall;

  constructor(call: LiquidateTokenPositionCall) {
    this._call = call;
  }

  get liquidatorAccountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accountNo(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidationBps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class LiquidateTokenPositionCall__Outputs {
  _call: LiquidateTokenPositionCall;

  constructor(call: LiquidateTokenPositionCall) {
    this._call = call;
  }

  get liquidatorBalanceAdjustments(): LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct {
    return this._call.outputValues[0].value.toTuple() as LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct;
  }
}

export class LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vBaseIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidateTokenPositionWithGasClaimCall extends ethereum.Call {
  get inputs(): LiquidateTokenPositionWithGasClaimCall__Inputs {
    return new LiquidateTokenPositionWithGasClaimCall__Inputs(this);
  }

  get outputs(): LiquidateTokenPositionWithGasClaimCall__Outputs {
    return new LiquidateTokenPositionWithGasClaimCall__Outputs(this);
  }
}

export class LiquidateTokenPositionWithGasClaimCall__Inputs {
  _call: LiquidateTokenPositionWithGasClaimCall;

  constructor(call: LiquidateTokenPositionWithGasClaimCall) {
    this._call = call;
  }

  get liquidatorAccountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accountNo(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidationBps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class LiquidateTokenPositionWithGasClaimCall__Outputs {
  _call: LiquidateTokenPositionWithGasClaimCall;

  constructor(call: LiquidateTokenPositionWithGasClaimCall) {
    this._call = call;
  }

  get liquidatorBalanceAdjustments(): LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct {
    return this._call.outputValues[0].value.toTuple() as LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct;
  }
}

export class LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vBaseIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MulticallWithSingleMarginCheckCall extends ethereum.Call {
  get inputs(): MulticallWithSingleMarginCheckCall__Inputs {
    return new MulticallWithSingleMarginCheckCall__Inputs(this);
  }

  get outputs(): MulticallWithSingleMarginCheckCall__Outputs {
    return new MulticallWithSingleMarginCheckCall__Outputs(this);
  }
}

export class MulticallWithSingleMarginCheckCall__Inputs {
  _call: MulticallWithSingleMarginCheckCall;

  constructor(call: MulticallWithSingleMarginCheckCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get operations(): Array<MulticallWithSingleMarginCheckCallOperationsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      MulticallWithSingleMarginCheckCallOperationsStruct
    >();
  }
}

export class MulticallWithSingleMarginCheckCall__Outputs {
  _call: MulticallWithSingleMarginCheckCall;

  constructor(call: MulticallWithSingleMarginCheckCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MulticallWithSingleMarginCheckCallOperationsStruct extends ethereum.Tuple {
  get operationType(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class RegisterPoolCall extends ethereum.Call {
  get inputs(): RegisterPoolCall__Inputs {
    return new RegisterPoolCall__Inputs(this);
  }

  get outputs(): RegisterPoolCall__Outputs {
    return new RegisterPoolCall__Outputs(this);
  }
}

export class RegisterPoolCall__Inputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }

  get full(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rageTradePool(): RegisterPoolCallRageTradePoolStruct {
    return this._call.inputValues[1].value.toTuple() as RegisterPoolCallRageTradePoolStruct;
  }
}

export class RegisterPoolCall__Outputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }
}

export class RegisterPoolCallRageTradePoolStruct extends ethereum.Tuple {
  get vPool(): Address {
    return this[0].toAddress();
  }

  get vPoolWrapper(): Address {
    return this[1].toAddress();
  }

  get settings(): RegisterPoolCallRageTradePoolSettingsStruct {
    return this[2].toTuple() as RegisterPoolCallRageTradePoolSettingsStruct;
  }
}

export class RegisterPoolCallRageTradePoolSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class RemoveLimitOrderCall extends ethereum.Call {
  get inputs(): RemoveLimitOrderCall__Inputs {
    return new RemoveLimitOrderCall__Inputs(this);
  }

  get outputs(): RemoveLimitOrderCall__Outputs {
    return new RemoveLimitOrderCall__Outputs(this);
  }
}

export class RemoveLimitOrderCall__Inputs {
  _call: RemoveLimitOrderCall;

  constructor(call: RemoveLimitOrderCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class RemoveLimitOrderCall__Outputs {
  _call: RemoveLimitOrderCall;

  constructor(call: RemoveLimitOrderCall) {
    this._call = call;
  }
}

export class RemoveLimitOrderWithGasClaimCall extends ethereum.Call {
  get inputs(): RemoveLimitOrderWithGasClaimCall__Inputs {
    return new RemoveLimitOrderWithGasClaimCall__Inputs(this);
  }

  get outputs(): RemoveLimitOrderWithGasClaimCall__Outputs {
    return new RemoveLimitOrderWithGasClaimCall__Outputs(this);
  }
}

export class RemoveLimitOrderWithGasClaimCall__Inputs {
  _call: RemoveLimitOrderWithGasClaimCall;

  constructor(call: RemoveLimitOrderWithGasClaimCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RemoveLimitOrderWithGasClaimCall__Outputs {
  _call: RemoveLimitOrderWithGasClaimCall;

  constructor(call: RemoveLimitOrderWithGasClaimCall) {
    this._call = call;
  }

  get keeperFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMarginCall extends ethereum.Call {
  get inputs(): RemoveMarginCall__Inputs {
    return new RemoveMarginCall__Inputs(this);
  }

  get outputs(): RemoveMarginCall__Outputs {
    return new RemoveMarginCall__Outputs(this);
  }
}

export class RemoveMarginCall__Inputs {
  _call: RemoveMarginCall;

  constructor(call: RemoveMarginCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveMarginCall__Outputs {
  _call: RemoveMarginCall;

  constructor(call: RemoveMarginCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetPlatformParametersCall extends ethereum.Call {
  get inputs(): SetPlatformParametersCall__Inputs {
    return new SetPlatformParametersCall__Inputs(this);
  }

  get outputs(): SetPlatformParametersCall__Outputs {
    return new SetPlatformParametersCall__Outputs(this);
  }
}

export class SetPlatformParametersCall__Inputs {
  _call: SetPlatformParametersCall;

  constructor(call: SetPlatformParametersCall) {
    this._call = call;
  }

  get _liquidationParams(): SetPlatformParametersCall_liquidationParamsStruct {
    return this._call.inputValues[0].value.toTuple() as SetPlatformParametersCall_liquidationParamsStruct;
  }

  get _removeLimitOrderFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minimumOrderNotional(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minRequiredMargin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetPlatformParametersCall__Outputs {
  _call: SetPlatformParametersCall;

  constructor(call: SetPlatformParametersCall) {
    this._call = call;
  }
}

export class SetPlatformParametersCall_liquidationParamsStruct extends ethereum.Tuple {
  get liquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationPriceDeltaBps(): i32 {
    return this[1].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[2].toI32();
  }
}

export class SwapTokenCall extends ethereum.Call {
  get inputs(): SwapTokenCall__Inputs {
    return new SwapTokenCall__Inputs(this);
  }

  get outputs(): SwapTokenCall__Outputs {
    return new SwapTokenCall__Outputs(this);
  }
}

export class SwapTokenCall__Inputs {
  _call: SwapTokenCall;

  constructor(call: SwapTokenCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get swapParams(): SwapTokenCallSwapParamsStruct {
    return this._call.inputValues[2].value.toTuple() as SwapTokenCallSwapParamsStruct;
  }
}

export class SwapTokenCall__Outputs {
  _call: SwapTokenCall;

  constructor(call: SwapTokenCall) {
    this._call = call;
  }

  get vTokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vBaseAmountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapTokenCallSwapParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get sqrtPriceLimit(): BigInt {
    return this[1].toBigInt();
  }

  get isNotional(): boolean {
    return this[2].toBoolean();
  }

  get isPartialAllowed(): boolean {
    return this[3].toBoolean();
  }
}

export class TransferGovernanceCall extends ethereum.Call {
  get inputs(): TransferGovernanceCall__Inputs {
    return new TransferGovernanceCall__Inputs(this);
  }

  get outputs(): TransferGovernanceCall__Outputs {
    return new TransferGovernanceCall__Outputs(this);
  }
}

export class TransferGovernanceCall__Inputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }

  get newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernanceCall__Outputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }
}

export class TransferTeamMultisigCall extends ethereum.Call {
  get inputs(): TransferTeamMultisigCall__Inputs {
    return new TransferTeamMultisigCall__Inputs(this);
  }

  get outputs(): TransferTeamMultisigCall__Outputs {
    return new TransferTeamMultisigCall__Outputs(this);
  }
}

export class TransferTeamMultisigCall__Inputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }

  get newTeamMultisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTeamMultisigCall__Outputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }
}

export class UpdateProfitCall extends ethereum.Call {
  get inputs(): UpdateProfitCall__Inputs {
    return new UpdateProfitCall__Inputs(this);
  }

  get outputs(): UpdateProfitCall__Outputs {
    return new UpdateProfitCall__Outputs(this);
  }
}

export class UpdateProfitCall__Inputs {
  _call: UpdateProfitCall;

  constructor(call: UpdateProfitCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateProfitCall__Outputs {
  _call: UpdateProfitCall;

  constructor(call: UpdateProfitCall) {
    this._call = call;
  }
}

export class UpdateRageTradePoolSettingsCall extends ethereum.Call {
  get inputs(): UpdateRageTradePoolSettingsCall__Inputs {
    return new UpdateRageTradePoolSettingsCall__Inputs(this);
  }

  get outputs(): UpdateRageTradePoolSettingsCall__Outputs {
    return new UpdateRageTradePoolSettingsCall__Outputs(this);
  }
}

export class UpdateRageTradePoolSettingsCall__Inputs {
  _call: UpdateRageTradePoolSettingsCall;

  constructor(call: UpdateRageTradePoolSettingsCall) {
    this._call = call;
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newSettings(): UpdateRageTradePoolSettingsCallNewSettingsStruct {
    return this._call.inputValues[1].value.toTuple() as UpdateRageTradePoolSettingsCallNewSettingsStruct;
  }
}

export class UpdateRageTradePoolSettingsCall__Outputs {
  _call: UpdateRageTradePoolSettingsCall;

  constructor(call: UpdateRageTradePoolSettingsCall) {
    this._call = call;
  }
}

export class UpdateRageTradePoolSettingsCallNewSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class UpdateRangeOrderCall extends ethereum.Call {
  get inputs(): UpdateRangeOrderCall__Inputs {
    return new UpdateRangeOrderCall__Inputs(this);
  }

  get outputs(): UpdateRangeOrderCall__Outputs {
    return new UpdateRangeOrderCall__Outputs(this);
  }
}

export class UpdateRangeOrderCall__Inputs {
  _call: UpdateRangeOrderCall;

  constructor(call: UpdateRangeOrderCall) {
    this._call = call;
  }

  get accountNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get vTokenTruncatedAddress(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityChangeParams(): UpdateRangeOrderCallLiquidityChangeParamsStruct {
    return this._call.inputValues[2].value.toTuple() as UpdateRangeOrderCallLiquidityChangeParamsStruct;
  }
}

export class UpdateRangeOrderCall__Outputs {
  _call: UpdateRangeOrderCall;

  constructor(call: UpdateRangeOrderCall) {
    this._call = call;
  }

  get vTokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vBaseAmountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateRangeOrderCallLiquidityChangeParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get sqrtPriceCurrent(): BigInt {
    return this[3].toBigInt();
  }

  get slippageToleranceBps(): i32 {
    return this[4].toI32();
  }

  get closeTokenPosition(): boolean {
    return this[5].toBoolean();
  }

  get limitOrderType(): i32 {
    return this[6].toI32();
  }
}

export class UpdateSupportedDepositsCall extends ethereum.Call {
  get inputs(): UpdateSupportedDepositsCall__Inputs {
    return new UpdateSupportedDepositsCall__Inputs(this);
  }

  get outputs(): UpdateSupportedDepositsCall__Outputs {
    return new UpdateSupportedDepositsCall__Outputs(this);
  }
}

export class UpdateSupportedDepositsCall__Inputs {
  _call: UpdateSupportedDepositsCall;

  constructor(call: UpdateSupportedDepositsCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateSupportedDepositsCall__Outputs {
  _call: UpdateSupportedDepositsCall;

  constructor(call: UpdateSupportedDepositsCall) {
    this._call = call;
  }
}

export class UpdateSupportedVTokensCall extends ethereum.Call {
  get inputs(): UpdateSupportedVTokensCall__Inputs {
    return new UpdateSupportedVTokensCall__Inputs(this);
  }

  get outputs(): UpdateSupportedVTokensCall__Outputs {
    return new UpdateSupportedVTokensCall__Outputs(this);
  }
}

export class UpdateSupportedVTokensCall__Inputs {
  _call: UpdateSupportedVTokensCall;

  constructor(call: UpdateSupportedVTokensCall) {
    this._call = call;
  }

  get vToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateSupportedVTokensCall__Outputs {
  _call: UpdateSupportedVTokensCall;

  constructor(call: UpdateSupportedVTokensCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeeCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeeCall__Inputs {
    return new WithdrawProtocolFeeCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeeCall__Outputs {
    return new WithdrawProtocolFeeCall__Outputs(this);
  }
}

export class WithdrawProtocolFeeCall__Inputs {
  _call: WithdrawProtocolFeeCall;

  constructor(call: WithdrawProtocolFeeCall) {
    this._call = call;
  }

  get wrapperAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class WithdrawProtocolFeeCall__Outputs {
  _call: WithdrawProtocolFeeCall;

  constructor(call: WithdrawProtocolFeeCall) {
    this._call = call;
  }
}
