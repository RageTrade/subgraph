// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get ownerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accountId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CollateralSettingsUpdated extends ethereum.Event {
  get params(): CollateralSettingsUpdated__Params {
    return new CollateralSettingsUpdated__Params(this);
  }
}

export class CollateralSettingsUpdated__Params {
  _event: CollateralSettingsUpdated;

  constructor(event: CollateralSettingsUpdated) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get cTokenInfo(): CollateralSettingsUpdatedCTokenInfoStruct {
    return this._event.parameters[1].value.toTuple() as CollateralSettingsUpdatedCTokenInfoStruct;
  }
}

export class CollateralSettingsUpdatedCTokenInfoStruct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get twapDuration(): BigInt {
    return this[1].toBigInt();
  }

  get isAllowedForDeposit(): boolean {
    return this[2].toBoolean();
  }
}

export class GovernanceTransferred extends ethereum.Event {
  get params(): GovernanceTransferred__Params {
    return new GovernanceTransferred__Params(this);
  }
}

export class GovernanceTransferred__Params {
  _event: GovernanceTransferred;

  constructor(event: GovernanceTransferred) {
    this._event = event;
  }

  get previousGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernance(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarginAdded extends ethereum.Event {
  get params(): MarginAdded__Params {
    return new MarginAdded__Params(this);
  }
}

export class MarginAdded__Params {
  _event: MarginAdded;

  constructor(event: MarginAdded) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarginRemoved extends ethereum.Event {
  get params(): MarginRemoved__Params {
    return new MarginRemoved__Params(this);
  }
}

export class MarginRemoved__Params {
  _event: MarginRemoved;

  constructor(event: MarginRemoved) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PausedUpdated extends ethereum.Event {
  get params(): PausedUpdated__Params {
    return new PausedUpdated__Params(this);
  }
}

export class PausedUpdated__Params {
  _event: PausedUpdated;

  constructor(event: PausedUpdated) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class PoolSettingsUpdated extends ethereum.Event {
  get params(): PoolSettingsUpdated__Params {
    return new PoolSettingsUpdated__Params(this);
  }
}

export class PoolSettingsUpdated__Params {
  _event: PoolSettingsUpdated;

  constructor(event: PoolSettingsUpdated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settings(): PoolSettingsUpdatedSettingsStruct {
    return this._event.parameters[1].value.toTuple() as PoolSettingsUpdatedSettingsStruct;
  }
}

export class PoolSettingsUpdatedSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class ProtocolSettingsUpdated extends ethereum.Event {
  get params(): ProtocolSettingsUpdated__Params {
    return new ProtocolSettingsUpdated__Params(this);
  }
}

export class ProtocolSettingsUpdated__Params {
  _event: ProtocolSettingsUpdated;

  constructor(event: ProtocolSettingsUpdated) {
    this._event = event;
  }

  get liquidationParams(): ProtocolSettingsUpdatedLiquidationParamsStruct {
    return this._event.parameters[0].value.toTuple() as ProtocolSettingsUpdatedLiquidationParamsStruct;
  }

  get removeLimitOrderFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minimumOrderNotional(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minRequiredMargin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProtocolSettingsUpdatedLiquidationParamsStruct extends ethereum.Tuple {
  get liquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationPriceDeltaBps(): i32 {
    return this[1].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[2].toI32();
  }

  get maxRangeLiquidationFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class TeamMultisigTransferred extends ethereum.Event {
  get params(): TeamMultisigTransferred__Params {
    return new TeamMultisigTransferred__Params(this);
  }
}

export class TeamMultisigTransferred__Params {
  _event: TeamMultisigTransferred;

  constructor(event: TeamMultisigTransferred) {
    this._event = event;
  }

  get previousTeamMultisig(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTeamMultisig(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundingPaymentRealized extends ethereum.Event {
  get params(): FundingPaymentRealized__Params {
    return new FundingPaymentRealized__Params(this);
  }
}

export class FundingPaymentRealized__Params {
  _event: FundingPaymentRealized;

  constructor(event: FundingPaymentRealized) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityChanged extends ethereum.Event {
  get params(): LiquidityChanged__Params {
    return new LiquidityChanged__Params(this);
  }
}

export class LiquidityChanged__Params {
  _event: LiquidityChanged;

  constructor(event: LiquidityChanged) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidityDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get limitOrderType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get vTokenAmountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get vQuoteAmountOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LiquidityPositionEarningsRealized extends ethereum.Event {
  get params(): LiquidityPositionEarningsRealized__Params {
    return new LiquidityPositionEarningsRealized__Params(this);
  }
}

export class LiquidityPositionEarningsRealized__Params {
  _event: LiquidityPositionEarningsRealized;

  constructor(event: LiquidityPositionEarningsRealized) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityPositionsLiquidated extends ethereum.Event {
  get params(): LiquidityPositionsLiquidated__Params {
    return new LiquidityPositionsLiquidated__Params(this);
  }
}

export class LiquidityPositionsLiquidated__Params {
  _event: LiquidityPositionsLiquidated;

  constructor(event: LiquidityPositionsLiquidated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get keeperAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get keeperFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get insuranceFundFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ProfitUpdated extends ethereum.Event {
  get params(): ProfitUpdated__Params {
    return new ProfitUpdated__Params(this);
  }
}

export class ProfitUpdated__Params {
  _event: ProfitUpdated;

  constructor(event: ProfitUpdated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeesWithdrawn extends ethereum.Event {
  get params(): ProtocolFeesWithdrawn__Params {
    return new ProtocolFeesWithdrawn__Params(this);
  }
}

export class ProtocolFeesWithdrawn__Params {
  _event: ProtocolFeesWithdrawn;

  constructor(event: ProtocolFeesWithdrawn) {
    this._event = event;
  }

  get wrapperAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenPositionChanged extends ethereum.Event {
  get params(): TokenPositionChanged__Params {
    return new TokenPositionChanged__Params(this);
  }
}

export class TokenPositionChanged__Params {
  _event: TokenPositionChanged;

  constructor(event: TokenPositionChanged) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vTokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vQuoteAmountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenPositionChangedDueToLiquidityChanged extends ethereum.Event {
  get params(): TokenPositionChangedDueToLiquidityChanged__Params {
    return new TokenPositionChangedDueToLiquidityChanged__Params(this);
  }
}

export class TokenPositionChangedDueToLiquidityChanged__Params {
  _event: TokenPositionChangedDueToLiquidityChanged;

  constructor(event: TokenPositionChangedDueToLiquidityChanged) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get vTokenAmountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenPositionLiquidated extends ethereum.Event {
  get params(): TokenPositionLiquidated__Params {
    return new TokenPositionLiquidated__Params(this);
  }
}

export class TokenPositionLiquidated__Params {
  _event: TokenPositionLiquidated;

  constructor(event: TokenPositionLiquidated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidatorAccountId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidationBps(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidationPriceX128(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidatorPriceX128(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fixFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get insuranceFundFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class ClearingHouse__getAccountInfoResultCollateralDepositsStruct extends ethereum.Tuple {
  get collateral(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }
}

export class ClearingHouse__getAccountInfoResultTokenPositionsStruct extends ethereum.Tuple {
  get vToken(): Address {
    return this[0].toAddress();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get netTraderPosition(): BigInt {
    return this[2].toBigInt();
  }

  get sumAX128Chkpt(): BigInt {
    return this[3].toBigInt();
  }

  get liquidityPositions(): Array<
    ClearingHouse__getAccountInfoResultTokenPositionsLiquidityPositionsStruct
  > {
    return this[4].toTupleArray<
      ClearingHouse__getAccountInfoResultTokenPositionsLiquidityPositionsStruct
    >();
  }
}

export class ClearingHouse__getAccountInfoResultTokenPositionsLiquidityPositionsStruct extends ethereum.Tuple {
  get limitOrderType(): i32 {
    return this[0].toI32();
  }

  get tickLower(): i32 {
    return this[1].toI32();
  }

  get tickUpper(): i32 {
    return this[2].toI32();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get vTokenAmountIn(): BigInt {
    return this[4].toBigInt();
  }

  get sumALastX128(): BigInt {
    return this[5].toBigInt();
  }

  get sumBInsideLastX128(): BigInt {
    return this[6].toBigInt();
  }

  get sumFpInsideLastX128(): BigInt {
    return this[7].toBigInt();
  }

  get sumFeeInsideLastX128(): BigInt {
    return this[8].toBigInt();
  }
}

export class ClearingHouse__getAccountInfoResult {
  value0: Address;
  value1: BigInt;
  value2: Array<ClearingHouse__getAccountInfoResultCollateralDepositsStruct>;
  value3: Array<ClearingHouse__getAccountInfoResultTokenPositionsStruct>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Array<ClearingHouse__getAccountInfoResultCollateralDepositsStruct>,
    value3: Array<ClearingHouse__getAccountInfoResultTokenPositionsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    map.set("value3", ethereum.Value.fromTupleArray(this.value3));
    return map;
  }
}

export class ClearingHouse__getAccountMarketValueAndRequiredMarginResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__getCollateralInfoResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get settings(): ClearingHouse__getCollateralInfoResultValue0SettingsStruct {
    return this[1].toTuple() as ClearingHouse__getCollateralInfoResultValue0SettingsStruct;
  }
}

export class ClearingHouse__getCollateralInfoResultValue0SettingsStruct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get twapDuration(): BigInt {
    return this[1].toBigInt();
  }

  get isAllowedForDeposit(): boolean {
    return this[2].toBoolean();
  }
}

export class ClearingHouse__getPoolInfoResultValue0Struct extends ethereum.Tuple {
  get vToken(): Address {
    return this[0].toAddress();
  }

  get vPool(): Address {
    return this[1].toAddress();
  }

  get vPoolWrapper(): Address {
    return this[2].toAddress();
  }

  get settings(): ClearingHouse__getPoolInfoResultValue0SettingsStruct {
    return this[3].toTuple() as ClearingHouse__getPoolInfoResultValue0SettingsStruct;
  }
}

export class ClearingHouse__getPoolInfoResultValue0SettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class ClearingHouse__getTwapPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vQuoteIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vQuoteIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct extends ethereum.Tuple {
  get operationType(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class ClearingHouse__protocolInfoResultLiquidationParamsStruct extends ethereum.Tuple {
  get liquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationPriceDeltaBps(): i32 {
    return this[1].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[2].toI32();
  }

  get maxRangeLiquidationFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClearingHouse__protocolInfoResult {
  value0: Address;
  value1: ClearingHouse__protocolInfoResultLiquidationParamsStruct;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: ClearingHouse__protocolInfoResultLiquidationParamsStruct,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class ClearingHouse__swapTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__swapTokenInputSwapParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get sqrtPriceLimit(): BigInt {
    return this[1].toBigInt();
  }

  get isNotional(): boolean {
    return this[2].toBoolean();
  }

  get isPartialAllowed(): boolean {
    return this[3].toBoolean();
  }
}

export class ClearingHouse__updateRangeOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get sqrtPriceCurrent(): BigInt {
    return this[3].toBigInt();
  }

  get slippageToleranceBps(): i32 {
    return this[4].toI32();
  }

  get closeTokenPosition(): boolean {
    return this[5].toBoolean();
  }

  get limitOrderType(): i32 {
    return this[6].toI32();
  }
}

export class ClearingHouse extends ethereum.SmartContract {
  static bind(address: Address): ClearingHouse {
    return new ClearingHouse("ClearingHouse", address);
  }

  createAccount(): BigInt {
    let result = super.call("createAccount", "createAccount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createAccount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAccount",
      "createAccount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAccountAndAddMargin(poolId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "createAccountAndAddMargin",
      "createAccountAndAddMargin(uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAccountAndAddMargin(
    poolId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAccountAndAddMargin",
      "createAccountAndAddMargin(uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extsload(slot: Bytes): Bytes {
    let result = super.call("extsload", "extsload(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(slot)
    ]);

    return result[0].toBytes();
  }

  try_extsload(slot: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("extsload", "extsload(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(slot)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  extsload1(slots: Array<Bytes>): Array<Bytes> {
    let result = super.call("extsload", "extsload(bytes32[]):(bytes32[])", [
      ethereum.Value.fromFixedBytesArray(slots)
    ]);

    return result[0].toBytesArray();
  }

  try_extsload1(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("extsload", "extsload(bytes32[]):(bytes32[])", [
      ethereum.Value.fromFixedBytesArray(slots)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAccountInfo(accountId: BigInt): ClearingHouse__getAccountInfoResult {
    let result = super.call(
      "getAccountInfo",
      "getAccountInfo(uint256):(address,int256,(address,uint256)[],(address,int256,int256,int256,(uint8,int24,int24,uint128,int256,int256,int256,int256,uint256)[])[])",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );

    return new ClearingHouse__getAccountInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toTupleArray<
        ClearingHouse__getAccountInfoResultCollateralDepositsStruct
      >(),
      result[3].toTupleArray<
        ClearingHouse__getAccountInfoResultTokenPositionsStruct
      >()
    );
  }

  try_getAccountInfo(
    accountId: BigInt
  ): ethereum.CallResult<ClearingHouse__getAccountInfoResult> {
    let result = super.tryCall(
      "getAccountInfo",
      "getAccountInfo(uint256):(address,int256,(address,uint256)[],(address,int256,int256,int256,(uint8,int24,int24,uint128,int256,int256,int256,int256,uint256)[])[])",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getAccountInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toTupleArray<
          ClearingHouse__getAccountInfoResultCollateralDepositsStruct
        >(),
        value[3].toTupleArray<
          ClearingHouse__getAccountInfoResultTokenPositionsStruct
        >()
      )
    );
  }

  getAccountMarketValueAndRequiredMargin(
    accountId: BigInt,
    isInitialMargin: boolean
  ): ClearingHouse__getAccountMarketValueAndRequiredMarginResult {
    let result = super.call(
      "getAccountMarketValueAndRequiredMargin",
      "getAccountMarketValueAndRequiredMargin(uint256,bool):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromBoolean(isInitialMargin)
      ]
    );

    return new ClearingHouse__getAccountMarketValueAndRequiredMarginResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAccountMarketValueAndRequiredMargin(
    accountId: BigInt,
    isInitialMargin: boolean
  ): ethereum.CallResult<
    ClearingHouse__getAccountMarketValueAndRequiredMarginResult
  > {
    let result = super.tryCall(
      "getAccountMarketValueAndRequiredMargin",
      "getAccountMarketValueAndRequiredMargin(uint256,bool):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromBoolean(isInitialMargin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getAccountMarketValueAndRequiredMarginResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAccountNetProfit(accountId: BigInt): BigInt {
    let result = super.call(
      "getAccountNetProfit",
      "getAccountNetProfit(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );

    return result[0].toBigInt();
  }

  try_getAccountNetProfit(accountId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccountNetProfit",
      "getAccountNetProfit(uint256):(int256)",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralInfo(
    collateralId: BigInt
  ): ClearingHouse__getCollateralInfoResultValue0Struct {
    let result = super.call(
      "getCollateralInfo",
      "getCollateralInfo(uint32):((address,(address,uint32,bool)))",
      [ethereum.Value.fromUnsignedBigInt(collateralId)]
    );

    return result[0].toTuple() as ClearingHouse__getCollateralInfoResultValue0Struct;
  }

  try_getCollateralInfo(
    collateralId: BigInt
  ): ethereum.CallResult<ClearingHouse__getCollateralInfoResultValue0Struct> {
    let result = super.tryCall(
      "getCollateralInfo",
      "getCollateralInfo(uint32):((address,(address,uint32,bool)))",
      [ethereum.Value.fromUnsignedBigInt(collateralId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__getCollateralInfoResultValue0Struct
    );
  }

  getNetTokenPosition(accountId: BigInt, poolId: BigInt): BigInt {
    let result = super.call(
      "getNetTokenPosition",
      "getNetTokenPosition(uint256,uint32):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNetTokenPosition(
    accountId: BigInt,
    poolId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNetTokenPosition",
      "getNetTokenPosition(uint256,uint32):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(poolId: BigInt): ClearingHouse__getPoolInfoResultValue0Struct {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo(uint32):((address,address,address,(uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toTuple() as ClearingHouse__getPoolInfoResultValue0Struct;
  }

  try_getPoolInfo(
    poolId: BigInt
  ): ethereum.CallResult<ClearingHouse__getPoolInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo(uint32):((address,address,address,(uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__getPoolInfoResultValue0Struct
    );
  }

  getTwapPrices(vToken: Address): ClearingHouse__getTwapPricesResult {
    let result = super.call(
      "getTwapPrices",
      "getTwapPrices(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(vToken)]
    );

    return new ClearingHouse__getTwapPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTwapPrices(
    vToken: Address
  ): ethereum.CallResult<ClearingHouse__getTwapPricesResult> {
    let result = super.tryCall(
      "getTwapPrices",
      "getTwapPrices(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(vToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__getTwapPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  insuranceFund(): Address {
    let result = super.call("insuranceFund", "insuranceFund():(address)", []);

    return result[0].toAddress();
  }

  try_insuranceFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "insuranceFund",
      "insuranceFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPoolIdAvailable(poolId: BigInt): boolean {
    let result = super.call(
      "isPoolIdAvailable",
      "isPoolIdAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toBoolean();
  }

  try_isPoolIdAvailable(poolId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolIdAvailable",
      "isPoolIdAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateLiquidityPositionsWithGasClaim(
    accountId: BigInt,
    gasComputationUnitsClaim: BigInt
  ): BigInt {
    let result = super.call(
      "liquidateLiquidityPositionsWithGasClaim",
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateLiquidityPositionsWithGasClaim(
    accountId: BigInt,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateLiquidityPositionsWithGasClaim",
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateTokenPosition(
    liquidatorAccountId: BigInt,
    targetAccountId: BigInt,
    poolId: BigInt,
    liquidationBps: i32
  ): ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct {
    let result = super.call(
      "liquidateTokenPosition",
      "liquidateTokenPosition(uint256,uint256,uint32,uint16):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountId),
        ethereum.Value.fromUnsignedBigInt(targetAccountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps))
      ]
    );

    return result[0].toTuple() as ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct;
  }

  try_liquidateTokenPosition(
    liquidatorAccountId: BigInt,
    targetAccountId: BigInt,
    poolId: BigInt,
    liquidationBps: i32
  ): ethereum.CallResult<
    ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct
  > {
    let result = super.tryCall(
      "liquidateTokenPosition",
      "liquidateTokenPosition(uint256,uint256,uint32,uint16):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountId),
        ethereum.Value.fromUnsignedBigInt(targetAccountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__liquidateTokenPositionResultLiquidatorBalanceAdjustmentsStruct
    );
  }

  liquidateTokenPositionWithGasClaim(
    liquidatorAccountId: BigInt,
    targetAccountId: BigInt,
    poolId: BigInt,
    liquidationBps: i32,
    gasComputationUnitsClaim: BigInt
  ): ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct {
    let result = super.call(
      "liquidateTokenPositionWithGasClaim",
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountId),
        ethereum.Value.fromUnsignedBigInt(targetAccountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps)),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toTuple() as ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct;
  }

  try_liquidateTokenPositionWithGasClaim(
    liquidatorAccountId: BigInt,
    targetAccountId: BigInt,
    poolId: BigInt,
    liquidationBps: i32,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<
    ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct
  > {
    let result = super.tryCall(
      "liquidateTokenPositionWithGasClaim",
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256):((int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(liquidatorAccountId),
        ethereum.Value.fromUnsignedBigInt(targetAccountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(liquidationBps)),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouse__liquidateTokenPositionWithGasClaimResultLiquidatorBalanceAdjustmentsStruct
    );
  }

  multicallWithSingleMarginCheck(
    accountId: BigInt,
    operations: Array<
      ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct
    >
  ): Array<Bytes> {
    let result = super.call(
      "multicallWithSingleMarginCheck",
      "multicallWithSingleMarginCheck(uint256,(uint8,bytes)[]):(bytes[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromTupleArray(operations)
      ]
    );

    return result[0].toBytesArray();
  }

  try_multicallWithSingleMarginCheck(
    accountId: BigInt,
    operations: Array<
      ClearingHouse__multicallWithSingleMarginCheckInputOperationsStruct
    >
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "multicallWithSingleMarginCheck",
      "multicallWithSingleMarginCheck(uint256,(uint8,bytes)[]):(bytes[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromTupleArray(operations)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nativeOracle(): Address {
    let result = super.call("nativeOracle", "nativeOracle():(address)", []);

    return result[0].toAddress();
  }

  try_nativeOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("nativeOracle", "nativeOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numAccounts(): BigInt {
    let result = super.call("numAccounts", "numAccounts():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numAccounts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numAccounts", "numAccounts():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolInfo(): ClearingHouse__protocolInfoResult {
    let result = super.call(
      "protocolInfo",
      "protocolInfo():(address,(uint16,uint16,uint16,uint128),uint256,uint256,uint256)",
      []
    );

    return new ClearingHouse__protocolInfoResult(
      result[0].toAddress(),
      result[1].toTuple() as ClearingHouse__protocolInfoResultLiquidationParamsStruct,
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_protocolInfo(): ethereum.CallResult<ClearingHouse__protocolInfoResult> {
    let result = super.tryCall(
      "protocolInfo",
      "protocolInfo():(address,(uint16,uint16,uint16,uint128),uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__protocolInfoResult(
        value[0].toAddress(),
        value[1].toTuple() as ClearingHouse__protocolInfoResultLiquidationParamsStruct,
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  rageTradeFactoryAddress(): Address {
    let result = super.call(
      "rageTradeFactoryAddress",
      "rageTradeFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rageTradeFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rageTradeFactoryAddress",
      "rageTradeFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeLimitOrderWithGasClaim(
    accountId: BigInt,
    poolId: BigInt,
    tickLower: i32,
    tickUpper: i32,
    gasComputationUnitsClaim: BigInt
  ): BigInt {
    let result = super.call(
      "removeLimitOrderWithGasClaim",
      "removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeLimitOrderWithGasClaim(
    accountId: BigInt,
    poolId: BigInt,
    tickLower: i32,
    tickUpper: i32,
    gasComputationUnitsClaim: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLimitOrderWithGasClaim",
      "removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(gasComputationUnitsClaim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapToken(
    accountId: BigInt,
    poolId: BigInt,
    swapParams: ClearingHouse__swapTokenInputSwapParamsStruct
  ): ClearingHouse__swapTokenResult {
    let result = super.call(
      "swapToken",
      "swapToken(uint256,uint32,(int256,uint160,bool,bool)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromTuple(swapParams)
      ]
    );

    return new ClearingHouse__swapTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapToken(
    accountId: BigInt,
    poolId: BigInt,
    swapParams: ClearingHouse__swapTokenInputSwapParamsStruct
  ): ethereum.CallResult<ClearingHouse__swapTokenResult> {
    let result = super.tryCall(
      "swapToken",
      "swapToken(uint256,uint32,(int256,uint160,bool,bool)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromTuple(swapParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__swapTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  teamMultisig(): Address {
    let result = super.call("teamMultisig", "teamMultisig():(address)", []);

    return result[0].toAddress();
  }

  try_teamMultisig(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamMultisig", "teamMultisig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateRangeOrder(
    accountId: BigInt,
    poolId: BigInt,
    liquidityChangeParams: ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct
  ): ClearingHouse__updateRangeOrderResult {
    let result = super.call(
      "updateRangeOrder",
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromTuple(liquidityChangeParams)
      ]
    );

    return new ClearingHouse__updateRangeOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_updateRangeOrder(
    accountId: BigInt,
    poolId: BigInt,
    liquidityChangeParams: ClearingHouse__updateRangeOrderInputLiquidityChangeParamsStruct
  ): ethereum.CallResult<ClearingHouse__updateRangeOrderResult> {
    let result = super.tryCall(
      "updateRangeOrder",
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8)):(int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromTuple(liquidityChangeParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__updateRangeOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class __initialize_ClearingHouseCall extends ethereum.Call {
  get inputs(): __initialize_ClearingHouseCall__Inputs {
    return new __initialize_ClearingHouseCall__Inputs(this);
  }

  get outputs(): __initialize_ClearingHouseCall__Outputs {
    return new __initialize_ClearingHouseCall__Outputs(this);
  }
}

export class __initialize_ClearingHouseCall__Inputs {
  _call: __initialize_ClearingHouseCall;

  constructor(call: __initialize_ClearingHouseCall) {
    this._call = call;
  }

  get _rageTradeFactoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultCollateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultCollateralTokenOracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _insuranceFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _vQuote(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _nativeOracle(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class __initialize_ClearingHouseCall__Outputs {
  _call: __initialize_ClearingHouseCall;

  constructor(call: __initialize_ClearingHouseCall) {
    this._call = call;
  }
}

export class AddMarginCall extends ethereum.Call {
  get inputs(): AddMarginCall__Inputs {
    return new AddMarginCall__Inputs(this);
  }

  get outputs(): AddMarginCall__Outputs {
    return new AddMarginCall__Outputs(this);
  }
}

export class AddMarginCall__Inputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddMarginCall__Outputs {
  _call: AddMarginCall;

  constructor(call: AddMarginCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get newAccountId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAccountAndAddMarginCall extends ethereum.Call {
  get inputs(): CreateAccountAndAddMarginCall__Inputs {
    return new CreateAccountAndAddMarginCall__Inputs(this);
  }

  get outputs(): CreateAccountAndAddMarginCall__Outputs {
    return new CreateAccountAndAddMarginCall__Outputs(this);
  }
}

export class CreateAccountAndAddMarginCall__Inputs {
  _call: CreateAccountAndAddMarginCall;

  constructor(call: CreateAccountAndAddMarginCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateAccountAndAddMarginCall__Outputs {
  _call: CreateAccountAndAddMarginCall;

  constructor(call: CreateAccountAndAddMarginCall) {
    this._call = call;
  }

  get newAccountId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsCall extends ethereum.Call {
  get inputs(): LiquidateLiquidityPositionsCall__Inputs {
    return new LiquidateLiquidityPositionsCall__Inputs(this);
  }

  get outputs(): LiquidateLiquidityPositionsCall__Outputs {
    return new LiquidateLiquidityPositionsCall__Outputs(this);
  }
}

export class LiquidateLiquidityPositionsCall__Inputs {
  _call: LiquidateLiquidityPositionsCall;

  constructor(call: LiquidateLiquidityPositionsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsCall__Outputs {
  _call: LiquidateLiquidityPositionsCall;

  constructor(call: LiquidateLiquidityPositionsCall) {
    this._call = call;
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall extends ethereum.Call {
  get inputs(): LiquidateLiquidityPositionsWithGasClaimCall__Inputs {
    return new LiquidateLiquidityPositionsWithGasClaimCall__Inputs(this);
  }

  get outputs(): LiquidateLiquidityPositionsWithGasClaimCall__Outputs {
    return new LiquidateLiquidityPositionsWithGasClaimCall__Outputs(this);
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall__Inputs {
  _call: LiquidateLiquidityPositionsWithGasClaimCall;

  constructor(call: LiquidateLiquidityPositionsWithGasClaimCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateLiquidityPositionsWithGasClaimCall__Outputs {
  _call: LiquidateLiquidityPositionsWithGasClaimCall;

  constructor(call: LiquidateLiquidityPositionsWithGasClaimCall) {
    this._call = call;
  }

  get keeperFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateTokenPositionCall extends ethereum.Call {
  get inputs(): LiquidateTokenPositionCall__Inputs {
    return new LiquidateTokenPositionCall__Inputs(this);
  }

  get outputs(): LiquidateTokenPositionCall__Outputs {
    return new LiquidateTokenPositionCall__Outputs(this);
  }
}

export class LiquidateTokenPositionCall__Inputs {
  _call: LiquidateTokenPositionCall;

  constructor(call: LiquidateTokenPositionCall) {
    this._call = call;
  }

  get liquidatorAccountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetAccountId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidationBps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class LiquidateTokenPositionCall__Outputs {
  _call: LiquidateTokenPositionCall;

  constructor(call: LiquidateTokenPositionCall) {
    this._call = call;
  }

  get liquidatorBalanceAdjustments(): LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct {
    return this._call.outputValues[0].value.toTuple() as LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct;
  }
}

export class LiquidateTokenPositionCallLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vQuoteIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidateTokenPositionWithGasClaimCall extends ethereum.Call {
  get inputs(): LiquidateTokenPositionWithGasClaimCall__Inputs {
    return new LiquidateTokenPositionWithGasClaimCall__Inputs(this);
  }

  get outputs(): LiquidateTokenPositionWithGasClaimCall__Outputs {
    return new LiquidateTokenPositionWithGasClaimCall__Outputs(this);
  }
}

export class LiquidateTokenPositionWithGasClaimCall__Inputs {
  _call: LiquidateTokenPositionWithGasClaimCall;

  constructor(call: LiquidateTokenPositionWithGasClaimCall) {
    this._call = call;
  }

  get liquidatorAccountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetAccountId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidationBps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class LiquidateTokenPositionWithGasClaimCall__Outputs {
  _call: LiquidateTokenPositionWithGasClaimCall;

  constructor(call: LiquidateTokenPositionWithGasClaimCall) {
    this._call = call;
  }

  get liquidatorBalanceAdjustments(): LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct {
    return this._call.outputValues[0].value.toTuple() as LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct;
  }
}

export class LiquidateTokenPositionWithGasClaimCallLiquidatorBalanceAdjustmentsStruct extends ethereum.Tuple {
  get vQuoteIncrease(): BigInt {
    return this[0].toBigInt();
  }

  get vTokenIncrease(): BigInt {
    return this[1].toBigInt();
  }

  get traderPositionIncrease(): BigInt {
    return this[2].toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MulticallWithSingleMarginCheckCall extends ethereum.Call {
  get inputs(): MulticallWithSingleMarginCheckCall__Inputs {
    return new MulticallWithSingleMarginCheckCall__Inputs(this);
  }

  get outputs(): MulticallWithSingleMarginCheckCall__Outputs {
    return new MulticallWithSingleMarginCheckCall__Outputs(this);
  }
}

export class MulticallWithSingleMarginCheckCall__Inputs {
  _call: MulticallWithSingleMarginCheckCall;

  constructor(call: MulticallWithSingleMarginCheckCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get operations(): Array<MulticallWithSingleMarginCheckCallOperationsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      MulticallWithSingleMarginCheckCallOperationsStruct
    >();
  }
}

export class MulticallWithSingleMarginCheckCall__Outputs {
  _call: MulticallWithSingleMarginCheckCall;

  constructor(call: MulticallWithSingleMarginCheckCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class MulticallWithSingleMarginCheckCallOperationsStruct extends ethereum.Tuple {
  get operationType(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RegisterPoolCall extends ethereum.Call {
  get inputs(): RegisterPoolCall__Inputs {
    return new RegisterPoolCall__Inputs(this);
  }

  get outputs(): RegisterPoolCall__Outputs {
    return new RegisterPoolCall__Outputs(this);
  }
}

export class RegisterPoolCall__Inputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }

  get poolInfo(): RegisterPoolCallPoolInfoStruct {
    return this._call.inputValues[0].value.toTuple() as RegisterPoolCallPoolInfoStruct;
  }
}

export class RegisterPoolCall__Outputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }
}

export class RegisterPoolCallPoolInfoStruct extends ethereum.Tuple {
  get vToken(): Address {
    return this[0].toAddress();
  }

  get vPool(): Address {
    return this[1].toAddress();
  }

  get vPoolWrapper(): Address {
    return this[2].toAddress();
  }

  get settings(): RegisterPoolCallPoolInfoSettingsStruct {
    return this[3].toTuple() as RegisterPoolCallPoolInfoSettingsStruct;
  }
}

export class RegisterPoolCallPoolInfoSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class RemoveLimitOrderCall extends ethereum.Call {
  get inputs(): RemoveLimitOrderCall__Inputs {
    return new RemoveLimitOrderCall__Inputs(this);
  }

  get outputs(): RemoveLimitOrderCall__Outputs {
    return new RemoveLimitOrderCall__Outputs(this);
  }
}

export class RemoveLimitOrderCall__Inputs {
  _call: RemoveLimitOrderCall;

  constructor(call: RemoveLimitOrderCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class RemoveLimitOrderCall__Outputs {
  _call: RemoveLimitOrderCall;

  constructor(call: RemoveLimitOrderCall) {
    this._call = call;
  }
}

export class RemoveLimitOrderWithGasClaimCall extends ethereum.Call {
  get inputs(): RemoveLimitOrderWithGasClaimCall__Inputs {
    return new RemoveLimitOrderWithGasClaimCall__Inputs(this);
  }

  get outputs(): RemoveLimitOrderWithGasClaimCall__Outputs {
    return new RemoveLimitOrderWithGasClaimCall__Outputs(this);
  }
}

export class RemoveLimitOrderWithGasClaimCall__Inputs {
  _call: RemoveLimitOrderWithGasClaimCall;

  constructor(call: RemoveLimitOrderWithGasClaimCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tickLower(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get gasComputationUnitsClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RemoveLimitOrderWithGasClaimCall__Outputs {
  _call: RemoveLimitOrderWithGasClaimCall;

  constructor(call: RemoveLimitOrderWithGasClaimCall) {
    this._call = call;
  }

  get keeperFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveMarginCall extends ethereum.Call {
  get inputs(): RemoveMarginCall__Inputs {
    return new RemoveMarginCall__Inputs(this);
  }

  get outputs(): RemoveMarginCall__Outputs {
    return new RemoveMarginCall__Outputs(this);
  }
}

export class RemoveMarginCall__Inputs {
  _call: RemoveMarginCall;

  constructor(call: RemoveMarginCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveMarginCall__Outputs {
  _call: RemoveMarginCall;

  constructor(call: RemoveMarginCall) {
    this._call = call;
  }
}

export class SwapTokenCall extends ethereum.Call {
  get inputs(): SwapTokenCall__Inputs {
    return new SwapTokenCall__Inputs(this);
  }

  get outputs(): SwapTokenCall__Outputs {
    return new SwapTokenCall__Outputs(this);
  }
}

export class SwapTokenCall__Inputs {
  _call: SwapTokenCall;

  constructor(call: SwapTokenCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get swapParams(): SwapTokenCallSwapParamsStruct {
    return this._call.inputValues[2].value.toTuple() as SwapTokenCallSwapParamsStruct;
  }
}

export class SwapTokenCall__Outputs {
  _call: SwapTokenCall;

  constructor(call: SwapTokenCall) {
    this._call = call;
  }

  get vTokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vQuoteAmountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapTokenCallSwapParamsStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get sqrtPriceLimit(): BigInt {
    return this[1].toBigInt();
  }

  get isNotional(): boolean {
    return this[2].toBoolean();
  }

  get isPartialAllowed(): boolean {
    return this[3].toBoolean();
  }
}

export class TransferGovernanceCall extends ethereum.Call {
  get inputs(): TransferGovernanceCall__Inputs {
    return new TransferGovernanceCall__Inputs(this);
  }

  get outputs(): TransferGovernanceCall__Outputs {
    return new TransferGovernanceCall__Outputs(this);
  }
}

export class TransferGovernanceCall__Inputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }

  get newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernanceCall__Outputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }
}

export class TransferTeamMultisigCall extends ethereum.Call {
  get inputs(): TransferTeamMultisigCall__Inputs {
    return new TransferTeamMultisigCall__Inputs(this);
  }

  get outputs(): TransferTeamMultisigCall__Outputs {
    return new TransferTeamMultisigCall__Outputs(this);
  }
}

export class TransferTeamMultisigCall__Inputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }

  get newTeamMultisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTeamMultisigCall__Outputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateCollateralSettingsCall extends ethereum.Call {
  get inputs(): UpdateCollateralSettingsCall__Inputs {
    return new UpdateCollateralSettingsCall__Inputs(this);
  }

  get outputs(): UpdateCollateralSettingsCall__Outputs {
    return new UpdateCollateralSettingsCall__Outputs(this);
  }
}

export class UpdateCollateralSettingsCall__Inputs {
  _call: UpdateCollateralSettingsCall;

  constructor(call: UpdateCollateralSettingsCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralSettings(): UpdateCollateralSettingsCallCollateralSettingsStruct {
    return this._call.inputValues[1].value.toTuple() as UpdateCollateralSettingsCallCollateralSettingsStruct;
  }
}

export class UpdateCollateralSettingsCall__Outputs {
  _call: UpdateCollateralSettingsCall;

  constructor(call: UpdateCollateralSettingsCall) {
    this._call = call;
  }
}

export class UpdateCollateralSettingsCallCollateralSettingsStruct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get twapDuration(): BigInt {
    return this[1].toBigInt();
  }

  get isAllowedForDeposit(): boolean {
    return this[2].toBoolean();
  }
}

export class UpdatePoolSettingsCall extends ethereum.Call {
  get inputs(): UpdatePoolSettingsCall__Inputs {
    return new UpdatePoolSettingsCall__Inputs(this);
  }

  get outputs(): UpdatePoolSettingsCall__Outputs {
    return new UpdatePoolSettingsCall__Outputs(this);
  }
}

export class UpdatePoolSettingsCall__Inputs {
  _call: UpdatePoolSettingsCall;

  constructor(call: UpdatePoolSettingsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSettings(): UpdatePoolSettingsCallNewSettingsStruct {
    return this._call.inputValues[1].value.toTuple() as UpdatePoolSettingsCallNewSettingsStruct;
  }
}

export class UpdatePoolSettingsCall__Outputs {
  _call: UpdatePoolSettingsCall;

  constructor(call: UpdatePoolSettingsCall) {
    this._call = call;
  }
}

export class UpdatePoolSettingsCallNewSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class UpdateProfitCall extends ethereum.Call {
  get inputs(): UpdateProfitCall__Inputs {
    return new UpdateProfitCall__Inputs(this);
  }

  get outputs(): UpdateProfitCall__Outputs {
    return new UpdateProfitCall__Outputs(this);
  }
}

export class UpdateProfitCall__Inputs {
  _call: UpdateProfitCall;

  constructor(call: UpdateProfitCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateProfitCall__Outputs {
  _call: UpdateProfitCall;

  constructor(call: UpdateProfitCall) {
    this._call = call;
  }
}

export class UpdateProtocolSettingsCall extends ethereum.Call {
  get inputs(): UpdateProtocolSettingsCall__Inputs {
    return new UpdateProtocolSettingsCall__Inputs(this);
  }

  get outputs(): UpdateProtocolSettingsCall__Outputs {
    return new UpdateProtocolSettingsCall__Outputs(this);
  }
}

export class UpdateProtocolSettingsCall__Inputs {
  _call: UpdateProtocolSettingsCall;

  constructor(call: UpdateProtocolSettingsCall) {
    this._call = call;
  }

  get _liquidationParams(): UpdateProtocolSettingsCall_liquidationParamsStruct {
    return this._call.inputValues[0].value.toTuple() as UpdateProtocolSettingsCall_liquidationParamsStruct;
  }

  get _removeLimitOrderFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minimumOrderNotional(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minRequiredMargin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateProtocolSettingsCall__Outputs {
  _call: UpdateProtocolSettingsCall;

  constructor(call: UpdateProtocolSettingsCall) {
    this._call = call;
  }
}

export class UpdateProtocolSettingsCall_liquidationParamsStruct extends ethereum.Tuple {
  get liquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationPriceDeltaBps(): i32 {
    return this[1].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[2].toI32();
  }

  get maxRangeLiquidationFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class UpdateRangeOrderCall extends ethereum.Call {
  get inputs(): UpdateRangeOrderCall__Inputs {
    return new UpdateRangeOrderCall__Inputs(this);
  }

  get outputs(): UpdateRangeOrderCall__Outputs {
    return new UpdateRangeOrderCall__Outputs(this);
  }
}

export class UpdateRangeOrderCall__Inputs {
  _call: UpdateRangeOrderCall;

  constructor(call: UpdateRangeOrderCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidityChangeParams(): UpdateRangeOrderCallLiquidityChangeParamsStruct {
    return this._call.inputValues[2].value.toTuple() as UpdateRangeOrderCallLiquidityChangeParamsStruct;
  }
}

export class UpdateRangeOrderCall__Outputs {
  _call: UpdateRangeOrderCall;

  constructor(call: UpdateRangeOrderCall) {
    this._call = call;
  }

  get vTokenAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vQuoteAmountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateRangeOrderCallLiquidityChangeParamsStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }

  get liquidityDelta(): BigInt {
    return this[2].toBigInt();
  }

  get sqrtPriceCurrent(): BigInt {
    return this[3].toBigInt();
  }

  get slippageToleranceBps(): i32 {
    return this[4].toI32();
  }

  get closeTokenPosition(): boolean {
    return this[5].toBoolean();
  }

  get limitOrderType(): i32 {
    return this[6].toI32();
  }
}

export class WithdrawProtocolFeeCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeeCall__Inputs {
    return new WithdrawProtocolFeeCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeeCall__Outputs {
    return new WithdrawProtocolFeeCall__Outputs(this);
  }
}

export class WithdrawProtocolFeeCall__Inputs {
  _call: WithdrawProtocolFeeCall;

  constructor(call: WithdrawProtocolFeeCall) {
    this._call = call;
  }

  get wrapperAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class WithdrawProtocolFeeCall__Outputs {
  _call: WithdrawProtocolFeeCall;

  constructor(call: WithdrawProtocolFeeCall) {
    this._call = call;
  }
}
