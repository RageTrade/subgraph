// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GmxParamsUpdated extends ethereum.Event {
  get params(): GmxParamsUpdated__Params {
    return new GmxParamsUpdated__Params(this);
  }
}

export class GmxParamsUpdated__Params {
  _event: GmxParamsUpdated;

  constructor(event: GmxParamsUpdated) {
    this._event = event;
  }

  get stakingManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usdcReedemSlippage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdcConversionThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenWithdrawn extends ethereum.Event {
  get params(): TokenWithdrawn__Params {
    return new TokenWithdrawn__Params(this);
  }
}

export class TokenWithdrawn__Params {
  _event: TokenWithdrawn;

  constructor(event: TokenWithdrawn) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sGLPQuantity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BaseParamsUpdated extends ethereum.Event {
  get params(): BaseParamsUpdated__Params {
    return new BaseParamsUpdated__Params(this);
  }
}

export class BaseParamsUpdated__Params {
  _event: BaseParamsUpdated;

  constructor(event: BaseParamsUpdated) {
    this._event = event;
  }

  get newDepositCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newKeeperAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rebalanceTimeThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rebalancePriceThresholdBps(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class CrvSwapFailedDueToSlippage extends ethereum.Event {
  get params(): CrvSwapFailedDueToSlippage__Params {
    return new CrvSwapFailedDueToSlippage__Params(this);
  }
}

export class CrvSwapFailedDueToSlippage__Params {
  _event: CrvSwapFailedDueToSlippage;

  constructor(event: CrvSwapFailedDueToSlippage) {
    this._event = event;
  }

  get crvSlippageTolerance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CurveParamsUpdated extends ethereum.Event {
  get params(): CurveParamsUpdated__Params {
    return new CurveParamsUpdated__Params(this);
  }
}

export class CurveParamsUpdated__Params {
  _event: CurveParamsUpdated;

  constructor(event: CurveParamsUpdated) {
    this._event = event;
  }

  get feeBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stablecoinSlippage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get crvHarvestThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get crvSlippageTolerance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get crvOracle(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class EightyTwentyParamsUpdated extends ethereum.Event {
  get params(): EightyTwentyParamsUpdated__Params {
    return new EightyTwentyParamsUpdated__Params(this);
  }
}

export class EightyTwentyParamsUpdated__Params {
  _event: EightyTwentyParamsUpdated;

  constructor(event: EightyTwentyParamsUpdated) {
    this._event = event;
  }

  get closePositionSlippageSqrtToleranceBps(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get resetPositionThresholdBps(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get minNotionalPositionToCloseThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeesUpdated extends ethereum.Event {
  get params(): FeesUpdated__Params {
    return new FeesUpdated__Params(this);
  }
}

export class FeesUpdated__Params {
  _event: FeesUpdated;

  constructor(event: FeesUpdated) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Harvested extends ethereum.Event {
  get params(): Harvested__Params {
    return new Harvested__Params(this);
  }
}

export class Harvested__Params {
  _event: Harvested;

  constructor(event: Harvested) {
    this._event = event;
  }

  get crvAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Rebalance extends ethereum.Event {
  get params(): Rebalance__Params {
    return new Rebalance__Params(this);
  }
}

export class Rebalance__Params {
  _event: Rebalance;

  constructor(event: Rebalance) {
    this._event = event;
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StateInfo extends ethereum.Event {
  get params(): StateInfo__Params {
    return new StateInfo__Params(this);
  }
}

export class StateInfo__Params {
  _event: StateInfo;

  constructor(event: StateInfo) {
    this._event = event;
  }

  get lpPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenPositionClosed extends ethereum.Event {
  get params(): TokenPositionClosed__Params {
    return new TokenPositionClosed__Params(this);
  }
}

export class TokenPositionClosed__Params {
  _event: TokenPositionClosed;

  constructor(event: TokenPositionClosed) {
    this._event = event;
  }
}

export class GMXYieldStrategy extends ethereum.SmartContract {
  static bind(address: Address): GMXYieldStrategy {
    return new GMXYieldStrategy('GMXYieldStrategy', address);
  }

  MAX_BPS(): i32 {
    let result = super.call('MAX_BPS', 'MAX_BPS():(uint16)', []);

    return result[0].toI32();
  }

  try_MAX_BPS(): ethereum.CallResult<i32> {
    let result = super.tryCall('MAX_BPS', 'MAX_BPS():(uint16)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ]);

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call('asset', 'asset():(address)', []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall('asset', 'asset():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseLiquidity(): BigInt {
    let result = super.call('baseLiquidity', 'baseLiquidity():(uint128)', []);

    return result[0].toBigInt();
  }

  try_baseLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('baseLiquidity', 'baseLiquidity():(uint128)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTickLower(): i32 {
    let result = super.call('baseTickLower', 'baseTickLower():(int24)', []);

    return result[0].toI32();
  }

  try_baseTickLower(): ethereum.CallResult<i32> {
    let result = super.tryCall('baseTickLower', 'baseTickLower():(int24)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  baseTickUpper(): i32 {
    let result = super.call('baseTickUpper', 'baseTickUpper():(int24)', []);

    return result[0].toI32();
  }

  try_baseTickUpper(): ethereum.CallResult<i32> {
    let result = super.tryCall('baseTickUpper', 'baseTickUpper():(int24)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  closePositionSlippageSqrtToleranceBps(): i32 {
    let result = super.call(
      'closePositionSlippageSqrtToleranceBps',
      'closePositionSlippageSqrtToleranceBps():(uint16)',
      []
    );

    return result[0].toI32();
  }

  try_closePositionSlippageSqrtToleranceBps(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      'closePositionSlippageSqrtToleranceBps',
      'closePositionSlippageSqrtToleranceBps():(uint16)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call('decimals', 'decimals():(uint8)', []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall('decimals', 'decimals():(uint8)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(amount: BigInt, to: Address): BigInt {
    let result = super.call('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(amount: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositCap(): BigInt {
    let result = super.call('depositCap', 'depositCap():(uint256)', []);

    return result[0].toBigInt();
  }

  try_depositCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('depositCap', 'depositCap():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethPoolId(): BigInt {
    let result = super.call('ethPoolId', 'ethPoolId():(uint32)', []);

    return result[0].toBigInt();
  }

  try_ethPoolId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('ethPoolId', 'ethPoolId():(uint32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extsload(slot: Bytes): Bytes {
    let result = super.call('extsload', 'extsload(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(slot),
    ]);

    return result[0].toBytes();
  }

  try_extsload(slot: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall('extsload', 'extsload(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(slot),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  extsload1(slots: Array<Bytes>): Array<Bytes> {
    let result = super.call('extsload', 'extsload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ]);

    return result[0].toBytesArray();
  }

  try_extsload1(slots: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall('extsload', 'extsload(bytes32[]):(bytes32[])', [
      ethereum.Value.fromFixedBytesArray(slots),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getMarketValue(assetAmount: BigInt): BigInt {
    let result = super.call('getMarketValue', 'getMarketValue(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assetAmount),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketValue(assetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketValue', 'getMarketValue(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assetAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceX128(): BigInt {
    let result = super.call('getPriceX128', 'getPriceX128():(uint256)', []);

    return result[0].toBigInt();
  }

  try_getPriceX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getPriceX128', 'getPriceX128():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultMarketValue(): BigInt {
    let result = super.call('getVaultMarketValue', 'getVaultMarketValue():(int256)', []);

    return result[0].toBigInt();
  }

  try_getVaultMarketValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getVaultMarketValue',
      'getVaultMarketValue():(int256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [ethereum.Value.fromAddress(spender), ethereum.Value.fromUnsignedBigInt(addedValue)]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [ethereum.Value.fromAddress(spender), ethereum.Value.fromUnsignedBigInt(addedValue)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReset(): boolean {
    let result = super.call('isReset', 'isReset():(bool)', []);

    return result[0].toBoolean();
  }

  try_isReset(): ethereum.CallResult<boolean> {
    let result = super.tryCall('isReset', 'isReset():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidRebalance(vaultMarketValue: BigInt): boolean {
    let result = super.call('isValidRebalance', 'isValidRebalance(int256):(bool)', [
      ethereum.Value.fromSignedBigInt(vaultMarketValue),
    ]);

    return result[0].toBoolean();
  }

  try_isValidRebalance(vaultMarketValue: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('isValidRebalance', 'isValidRebalance(int256):(bool)', [
      ethereum.Value.fromSignedBigInt(vaultMarketValue),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call('keeper', 'keeper():(address)', []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall('keeper', 'keeper():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastRebalanceTS(): BigInt {
    let result = super.call('lastRebalanceTS', 'lastRebalanceTS():(uint64)', []);

    return result[0].toBigInt();
  }

  try_lastRebalanceTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('lastRebalanceTS', 'lastRebalanceTS():(uint64)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(param0: Address): BigInt {
    let result = super.call('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minNotionalPositionToCloseThreshold(): BigInt {
    let result = super.call(
      'minNotionalPositionToCloseThreshold',
      'minNotionalPositionToCloseThreshold():(uint64)',
      []
    );

    return result[0].toBigInt();
  }

  try_minNotionalPositionToCloseThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'minNotionalPositionToCloseThreshold',
      'minNotionalPositionToCloseThreshold():(uint64)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, to: Address): BigInt {
    let result = super.call('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call('name', 'name():(string)', []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rageAccountNo(): BigInt {
    let result = super.call('rageAccountNo', 'rageAccountNo():(uint256)', []);

    return result[0].toBigInt();
  }

  try_rageAccountNo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('rageAccountNo', 'rageAccountNo():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rageClearingHouse(): Address {
    let result = super.call('rageClearingHouse', 'rageClearingHouse():(address)', []);

    return result[0].toAddress();
  }

  try_rageClearingHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall('rageClearingHouse', 'rageClearingHouse():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rageVPool(): Address {
    let result = super.call('rageVPool', 'rageVPool():(address)', []);

    return result[0].toAddress();
  }

  try_rageVPool(): ethereum.CallResult<Address> {
    let result = super.tryCall('rageVPool', 'rageVPool():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebalancePriceThresholdBps(): i32 {
    let result = super.call(
      'rebalancePriceThresholdBps',
      'rebalancePriceThresholdBps():(uint16)',
      []
    );

    return result[0].toI32();
  }

  try_rebalancePriceThresholdBps(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      'rebalancePriceThresholdBps',
      'rebalancePriceThresholdBps():(uint16)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rebalanceTimeThreshold(): BigInt {
    let result = super.call(
      'rebalanceTimeThreshold',
      'rebalanceTimeThreshold():(uint32)',
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceTimeThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'rebalanceTimeThreshold',
      'rebalanceTimeThreshold():(uint32)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares: BigInt, to: Address, from: Address): BigInt {
    let result = super.call('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromAddress(from),
    ]);

    return result[0].toBigInt();
  }

  try_redeem(shares: BigInt, to: Address, from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromAddress(from),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapSimulator(): Address {
    let result = super.call('swapSimulator', 'swapSimulator():(address)', []);

    return result[0].toAddress();
  }

  try_swapSimulator(): ethereum.CallResult<Address> {
    let result = super.tryCall('swapSimulator', 'swapSimulator():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call('symbol', 'symbol():(string)', []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall('symbol', 'symbol():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call('totalAssets', 'totalAssets():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalAssets', 'totalAssets():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call('totalSupply', 'totalSupply():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalSupply', 'totalSupply():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usdcConversionThreshold(): BigInt {
    let result = super.call(
      'usdcConversionThreshold',
      'usdcConversionThreshold():(uint240)',
      []
    );

    return result[0].toBigInt();
  }

  try_usdcConversionThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'usdcConversionThreshold',
      'usdcConversionThreshold():(uint240)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdcReedemSlippage(): i32 {
    let result = super.call('usdcReedemSlippage', 'usdcReedemSlippage():(uint16)', []);

    return result[0].toI32();
  }

  try_usdcReedemSlippage(): ethereum.CallResult<i32> {
    let result = super.tryCall('usdcReedemSlippage', 'usdcReedemSlippage():(uint16)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  withdraw(amount: BigInt, to: Address, from: Address): BigInt {
    let result = super.call('withdraw', 'withdraw(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromAddress(from),
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(amount: BigInt, to: Address, from: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(from),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseTokenPositionCall extends ethereum.Call {
  get inputs(): CloseTokenPositionCall__Inputs {
    return new CloseTokenPositionCall__Inputs(this);
  }

  get outputs(): CloseTokenPositionCall__Outputs {
    return new CloseTokenPositionCall__Outputs(this);
  }
}

export class CloseTokenPositionCall__Inputs {
  _call: CloseTokenPositionCall;

  constructor(call: CloseTokenPositionCall) {
    this._call = call;
  }
}

export class CloseTokenPositionCall__Outputs {
  _call: CloseTokenPositionCall;

  constructor(call: CloseTokenPositionCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantAllowancesCall extends ethereum.Call {
  get inputs(): GrantAllowancesCall__Inputs {
    return new GrantAllowancesCall__Inputs(this);
  }

  get outputs(): GrantAllowancesCall__Outputs {
    return new GrantAllowancesCall__Outputs(this);
  }
}

export class GrantAllowancesCall__Inputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class GrantAllowancesCall__Outputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get gmxYieldStrategyInitParams(): InitializeCallGmxYieldStrategyInitParamsStruct {
    return this._call.inputValues[0].value.toTuple() as InitializeCallGmxYieldStrategyInitParamsStruct;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallGmxYieldStrategyInitParamsStruct extends ethereum.Tuple {
  get eightyTwentyRangeStrategyVaultInitParams(): InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsStruct {
    return this[0].toTuple() as InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsStruct;
  }

  get rewardRouter(): Address {
    return this[1].toAddress();
  }
}

export class InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsStruct extends ethereum.Tuple {
  get baseVaultInitParams(): InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsStruct {
    return this[0].toTuple() as InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsStruct;
  }

  get closePositionSlippageSqrtToleranceBps(): i32 {
    return this[1].toI32();
  }

  get resetPositionThresholdBps(): i32 {
    return this[2].toI32();
  }

  get minNotionalPositionToCloseThreshold(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsStruct extends ethereum.Tuple {
  get rageErc4626InitParams(): InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsRageErc4626InitParamsStruct {
    return this[0].toTuple() as InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsRageErc4626InitParamsStruct;
  }

  get ethPoolId(): BigInt {
    return this[1].toBigInt();
  }

  get swapSimulator(): Address {
    return this[2].toAddress();
  }

  get rageClearingHouse(): Address {
    return this[3].toAddress();
  }

  get clearingHouseLens(): Address {
    return this[4].toAddress();
  }

  get rageCollateralToken(): Address {
    return this[5].toAddress();
  }

  get rageSettlementToken(): Address {
    return this[6].toAddress();
  }
}

export class InitializeCallGmxYieldStrategyInitParamsEightyTwentyRangeStrategyVaultInitParamsBaseVaultInitParamsRageErc4626InitParamsStruct extends ethereum.Tuple {
  get asset(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get symbol(): string {
    return this[2].toString();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemTokenCall extends ethereum.Call {
  get inputs(): RedeemTokenCall__Inputs {
    return new RedeemTokenCall__Inputs(this);
  }

  get outputs(): RedeemTokenCall__Outputs {
    return new RedeemTokenCall__Outputs(this);
  }
}

export class RedeemTokenCall__Inputs {
  _call: RedeemTokenCall;

  constructor(call: RedeemTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minTokenOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RedeemTokenCall__Outputs {
  _call: RedeemTokenCall;

  constructor(call: RedeemTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEightTwentyParamsCall extends ethereum.Call {
  get inputs(): SetEightTwentyParamsCall__Inputs {
    return new SetEightTwentyParamsCall__Inputs(this);
  }

  get outputs(): SetEightTwentyParamsCall__Outputs {
    return new SetEightTwentyParamsCall__Outputs(this);
  }
}

export class SetEightTwentyParamsCall__Inputs {
  _call: SetEightTwentyParamsCall;

  constructor(call: SetEightTwentyParamsCall) {
    this._call = call;
  }

  get _closePositionSlippageSqrtToleranceBps(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _resetPositionThresholdBps(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _minNotionalPositionToCloseThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetEightTwentyParamsCall__Outputs {
  _call: SetEightTwentyParamsCall;

  constructor(call: SetEightTwentyParamsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBaseParamsCall extends ethereum.Call {
  get inputs(): UpdateBaseParamsCall__Inputs {
    return new UpdateBaseParamsCall__Inputs(this);
  }

  get outputs(): UpdateBaseParamsCall__Outputs {
    return new UpdateBaseParamsCall__Outputs(this);
  }
}

export class UpdateBaseParamsCall__Inputs {
  _call: UpdateBaseParamsCall;

  constructor(call: UpdateBaseParamsCall) {
    this._call = call;
  }

  get newDepositCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newKeeperAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rebalanceTimeThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rebalancePriceThresholdBps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateBaseParamsCall__Outputs {
  _call: UpdateBaseParamsCall;

  constructor(call: UpdateBaseParamsCall) {
    this._call = call;
  }
}

export class UpdateGMXParamsCall extends ethereum.Call {
  get inputs(): UpdateGMXParamsCall__Inputs {
    return new UpdateGMXParamsCall__Inputs(this);
  }

  get outputs(): UpdateGMXParamsCall__Outputs {
    return new UpdateGMXParamsCall__Outputs(this);
  }
}

export class UpdateGMXParamsCall__Inputs {
  _call: UpdateGMXParamsCall;

  constructor(call: UpdateGMXParamsCall) {
    this._call = call;
  }

  get _stakingManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdcReedemSlippage(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _usdcConversionThreshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateGMXParamsCall__Outputs {
  _call: UpdateGMXParamsCall;

  constructor(call: UpdateGMXParamsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sGLP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minTokenOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
