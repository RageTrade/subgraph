// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClearingHouseLens__getAccountCollateralInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouseLens__getAccountInfoResult {
  value0: Address;
  value1: BigInt;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class ClearingHouseLens__getAccountLiquidityPositionInfoResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class ClearingHouseLens__getAccountLiquidityPositionListResultActiveTickRangesStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }
}

export class ClearingHouseLens__getAccountPositionInfoResultActiveTickRangesStruct extends ethereum.Tuple {
  get tickLower(): i32 {
    return this[0].toI32();
  }

  get tickUpper(): i32 {
    return this[1].toI32();
  }
}

export class ClearingHouseLens__getAccountPositionInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Array<
    ClearingHouseLens__getAccountPositionInfoResultActiveTickRangesStruct
  >;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Array<
      ClearingHouseLens__getAccountPositionInfoResultActiveTickRangesStruct
    >
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromTupleArray(this.value3));
    return map;
  }
}

export class ClearingHouseLens__getAccountTokenPositionInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }
}

export class ClearingHouseLens__getCollateralInfoResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get settings(): ClearingHouseLens__getCollateralInfoResultValue0SettingsStruct {
    return this[1].toTuple() as ClearingHouseLens__getCollateralInfoResultValue0SettingsStruct;
  }
}

export class ClearingHouseLens__getCollateralInfoResultValue0SettingsStruct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get twapDuration(): BigInt {
    return this[1].toBigInt();
  }

  get isAllowedForDeposit(): boolean {
    return this[2].toBoolean();
  }
}

export class ClearingHouseLens__getPoolInfoResultPoolStruct extends ethereum.Tuple {
  get vToken(): Address {
    return this[0].toAddress();
  }

  get vPool(): Address {
    return this[1].toAddress();
  }

  get vPoolWrapper(): Address {
    return this[2].toAddress();
  }

  get settings(): ClearingHouseLens__getPoolInfoResultPoolSettingsStruct {
    return this[3].toTuple() as ClearingHouseLens__getPoolInfoResultPoolSettingsStruct;
  }
}

export class ClearingHouseLens__getPoolInfoResultPoolSettingsStruct extends ethereum.Tuple {
  get initialMarginRatioBps(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatioBps(): i32 {
    return this[1].toI32();
  }

  get maxVirtualPriceDeviationRatioBps(): i32 {
    return this[2].toI32();
  }

  get twapDuration(): BigInt {
    return this[3].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[4].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[5].toBoolean();
  }

  get oracle(): Address {
    return this[6].toAddress();
  }
}

export class ClearingHouseLens__getPoolSettingsResultSettingsStruct extends ethereum.Tuple {
  get initialMarginRatioBps(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatioBps(): i32 {
    return this[1].toI32();
  }

  get maxVirtualPriceDeviationRatioBps(): i32 {
    return this[2].toI32();
  }

  get twapDuration(): BigInt {
    return this[3].toBigInt();
  }

  get isAllowedForTrade(): boolean {
    return this[4].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[5].toBoolean();
  }

  get oracle(): Address {
    return this[6].toAddress();
  }
}

export class ClearingHouseLens__getProtocolInfoResultLiquidationParamsStruct extends ethereum.Tuple {
  get rangeLiquidationFeeFraction(): i32 {
    return this[0].toI32();
  }

  get tokenLiquidationFeeFraction(): i32 {
    return this[1].toI32();
  }

  get closeFactorMMThresholdBps(): i32 {
    return this[2].toI32();
  }

  get partialLiquidationCloseFactorBps(): i32 {
    return this[3].toI32();
  }

  get insuranceFundFeeShareBps(): i32 {
    return this[4].toI32();
  }

  get liquidationSlippageSqrtToleranceBps(): i32 {
    return this[5].toI32();
  }

  get maxRangeLiquidationFees(): BigInt {
    return this[6].toBigInt();
  }

  get minNotionalLiquidatable(): BigInt {
    return this[7].toBigInt();
  }
}

export class ClearingHouseLens__getProtocolInfoResult {
  value0: Address;
  value1: Address;
  value2: ClearingHouseLens__getProtocolInfoResultLiquidationParamsStruct;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: ClearingHouseLens__getProtocolInfoResultLiquidationParamsStruct,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class ClearingHouseLens__getVPoolAndTwapDurationResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouseLens extends ethereum.SmartContract {
  static bind(address: Address): ClearingHouseLens {
    return new ClearingHouseLens("ClearingHouseLens", address);
  }

  clearingHouse(): Address {
    let result = super.call("clearingHouse", "clearingHouse():(address)", []);

    return result[0].toAddress();
  }

  try_clearingHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "clearingHouse",
      "clearingHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountCollateralBalance(accountId: BigInt, collateralId: BigInt): BigInt {
    let result = super.call(
      "getAccountCollateralBalance",
      "getAccountCollateralBalance(uint256,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(collateralId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAccountCollateralBalance(
    accountId: BigInt,
    collateralId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccountCollateralBalance",
      "getAccountCollateralBalance(uint256,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(collateralId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountCollateralInfo(
    accountId: BigInt,
    collateralId: BigInt
  ): ClearingHouseLens__getAccountCollateralInfoResult {
    let result = super.call(
      "getAccountCollateralInfo",
      "getAccountCollateralInfo(uint256,uint32):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(collateralId)
      ]
    );

    return new ClearingHouseLens__getAccountCollateralInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getAccountCollateralInfo(
    accountId: BigInt,
    collateralId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getAccountCollateralInfoResult> {
    let result = super.tryCall(
      "getAccountCollateralInfo",
      "getAccountCollateralInfo(uint256,uint32):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(collateralId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getAccountCollateralInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getAccountInfo(accountId: BigInt): ClearingHouseLens__getAccountInfoResult {
    let result = super.call(
      "getAccountInfo",
      "getAccountInfo(uint256):(address,int256,uint32[],uint32[])",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );

    return new ClearingHouseLens__getAccountInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getAccountInfo(
    accountId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getAccountInfoResult> {
    let result = super.tryCall(
      "getAccountInfo",
      "getAccountInfo(uint256):(address,int256,uint32[],uint32[])",
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getAccountInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  getAccountLiquidityPositionInfo(
    accountId: BigInt,
    poolId: BigInt,
    tickLower: i32,
    tickUpper: i32
  ): ClearingHouseLens__getAccountLiquidityPositionInfoResult {
    let result = super.call(
      "getAccountLiquidityPositionInfo",
      "getAccountLiquidityPositionInfo(uint256,uint32,int24,int24):(uint8,uint128,int256,int256,int256,int256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper)
      ]
    );

    return new ClearingHouseLens__getAccountLiquidityPositionInfoResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getAccountLiquidityPositionInfo(
    accountId: BigInt,
    poolId: BigInt,
    tickLower: i32,
    tickUpper: i32
  ): ethereum.CallResult<
    ClearingHouseLens__getAccountLiquidityPositionInfoResult
  > {
    let result = super.tryCall(
      "getAccountLiquidityPositionInfo",
      "getAccountLiquidityPositionInfo(uint256,uint32,int24,int24):(uint8,uint128,int256,int256,int256,int256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getAccountLiquidityPositionInfoResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getAccountLiquidityPositionList(
    accountId: BigInt,
    poolId: BigInt
  ): Array<
    ClearingHouseLens__getAccountLiquidityPositionListResultActiveTickRangesStruct
  > {
    let result = super.call(
      "getAccountLiquidityPositionList",
      "getAccountLiquidityPositionList(uint256,uint32):((int24,int24)[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return result[0].toTupleArray<
      ClearingHouseLens__getAccountLiquidityPositionListResultActiveTickRangesStruct
    >();
  }

  try_getAccountLiquidityPositionList(
    accountId: BigInt,
    poolId: BigInt
  ): ethereum.CallResult<
    Array<
      ClearingHouseLens__getAccountLiquidityPositionListResultActiveTickRangesStruct
    >
  > {
    let result = super.tryCall(
      "getAccountLiquidityPositionList",
      "getAccountLiquidityPositionList(uint256,uint32):((int24,int24)[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        ClearingHouseLens__getAccountLiquidityPositionListResultActiveTickRangesStruct
      >()
    );
  }

  getAccountPositionInfo(
    accountId: BigInt,
    poolId: BigInt
  ): ClearingHouseLens__getAccountPositionInfoResult {
    let result = super.call(
      "getAccountPositionInfo",
      "getAccountPositionInfo(uint256,uint32):(int256,int256,int256,(int24,int24)[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return new ClearingHouseLens__getAccountPositionInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toTupleArray<
        ClearingHouseLens__getAccountPositionInfoResultActiveTickRangesStruct
      >()
    );
  }

  try_getAccountPositionInfo(
    accountId: BigInt,
    poolId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getAccountPositionInfoResult> {
    let result = super.tryCall(
      "getAccountPositionInfo",
      "getAccountPositionInfo(uint256,uint32):(int256,int256,int256,(int24,int24)[])",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getAccountPositionInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toTupleArray<
          ClearingHouseLens__getAccountPositionInfoResultActiveTickRangesStruct
        >()
      )
    );
  }

  getAccountTokenPositionInfo(
    accountId: BigInt,
    poolId: BigInt
  ): ClearingHouseLens__getAccountTokenPositionInfoResult {
    let result = super.call(
      "getAccountTokenPositionInfo",
      "getAccountTokenPositionInfo(uint256,uint32):(int256,int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );

    return new ClearingHouseLens__getAccountTokenPositionInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountTokenPositionInfo(
    accountId: BigInt,
    poolId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getAccountTokenPositionInfoResult> {
    let result = super.tryCall(
      "getAccountTokenPositionInfo",
      "getAccountTokenPositionInfo(uint256,uint32):(int256,int256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getAccountTokenPositionInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCollateralInfo(
    collateralId: BigInt
  ): ClearingHouseLens__getCollateralInfoResultValue0Struct {
    let result = super.call(
      "getCollateralInfo",
      "getCollateralInfo(uint32):((address,(address,uint32,bool)))",
      [ethereum.Value.fromUnsignedBigInt(collateralId)]
    );

    return result[0].toTuple() as ClearingHouseLens__getCollateralInfoResultValue0Struct;
  }

  try_getCollateralInfo(
    collateralId: BigInt
  ): ethereum.CallResult<
    ClearingHouseLens__getCollateralInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getCollateralInfo",
      "getCollateralInfo(uint32):((address,(address,uint32,bool)))",
      [ethereum.Value.fromUnsignedBigInt(collateralId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouseLens__getCollateralInfoResultValue0Struct
    );
  }

  getPoolInfo(poolId: BigInt): ClearingHouseLens__getPoolInfoResultPoolStruct {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo(uint32):((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toTuple() as ClearingHouseLens__getPoolInfoResultPoolStruct;
  }

  try_getPoolInfo(
    poolId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getPoolInfoResultPoolStruct> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo(uint32):((address,address,address,(uint16,uint16,uint16,uint32,bool,bool,address)))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouseLens__getPoolInfoResultPoolStruct
    );
  }

  getPoolSettings(
    poolId: BigInt
  ): ClearingHouseLens__getPoolSettingsResultSettingsStruct {
    let result = super.call(
      "getPoolSettings",
      "getPoolSettings(uint32):((uint16,uint16,uint16,uint32,bool,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toTuple() as ClearingHouseLens__getPoolSettingsResultSettingsStruct;
  }

  try_getPoolSettings(
    poolId: BigInt
  ): ethereum.CallResult<
    ClearingHouseLens__getPoolSettingsResultSettingsStruct
  > {
    let result = super.tryCall(
      "getPoolSettings",
      "getPoolSettings(uint32):((uint16,uint16,uint16,uint32,bool,bool,address))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ClearingHouseLens__getPoolSettingsResultSettingsStruct
    );
  }

  getProtocolInfo(): ClearingHouseLens__getProtocolInfoResult {
    let result = super.call(
      "getProtocolInfo",
      "getProtocolInfo():(address,address,(uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)",
      []
    );

    return new ClearingHouseLens__getProtocolInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toTuple() as ClearingHouseLens__getProtocolInfoResultLiquidationParamsStruct,
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getProtocolInfo(): ethereum.CallResult<
    ClearingHouseLens__getProtocolInfoResult
  > {
    let result = super.tryCall(
      "getProtocolInfo",
      "getProtocolInfo():(address,address,(uint16,uint16,uint16,uint16,uint16,uint16,uint64,uint64),uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getProtocolInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toTuple() as ClearingHouseLens__getProtocolInfoResultLiquidationParamsStruct,
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getTwapDuration(poolId: BigInt): BigInt {
    let result = super.call(
      "getTwapDuration",
      "getTwapDuration(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toBigInt();
  }

  try_getTwapDuration(poolId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTwapDuration",
      "getTwapDuration(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVPool(poolId: BigInt): Address {
    let result = super.call("getVPool", "getVPool(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(poolId)
    ]);

    return result[0].toAddress();
  }

  try_getVPool(poolId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getVPool", "getVPool(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(poolId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVPoolAndTwapDuration(
    poolId: BigInt
  ): ClearingHouseLens__getVPoolAndTwapDurationResult {
    let result = super.call(
      "getVPoolAndTwapDuration",
      "getVPoolAndTwapDuration(uint32):(address,uint32)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return new ClearingHouseLens__getVPoolAndTwapDurationResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getVPoolAndTwapDuration(
    poolId: BigInt
  ): ethereum.CallResult<ClearingHouseLens__getVPoolAndTwapDurationResult> {
    let result = super.tryCall(
      "getVPoolAndTwapDuration",
      "getVPoolAndTwapDuration(uint32):(address,uint32)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouseLens__getVPoolAndTwapDurationResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  isPoolIdAvailable(poolId: BigInt): boolean {
    let result = super.call(
      "isPoolIdAvailable",
      "isPoolIdAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toBoolean();
  }

  try_isPoolIdAvailable(poolId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolIdAvailable",
      "isPoolIdAvailable(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}
