// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GovernanceTransferred extends ethereum.Event {
  get params(): GovernanceTransferred__Params {
    return new GovernanceTransferred__Params(this);
  }
}

export class GovernanceTransferred__Params {
  _event: GovernanceTransferred;

  constructor(event: GovernanceTransferred) {
    this._event = event;
  }

  get previousGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernance(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolInitialized extends ethereum.Event {
  get params(): PoolInitialized__Params {
    return new PoolInitialized__Params(this);
  }
}

export class PoolInitialized__Params {
  _event: PoolInitialized;

  constructor(event: PoolInitialized) {
    this._event = event;
  }

  get vPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vPoolWrapper(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TeamMultisigTransferred extends ethereum.Event {
  get params(): TeamMultisigTransferred__Params {
    return new TeamMultisigTransferred__Params(this);
  }
}

export class TeamMultisigTransferred__Params {
  _event: TeamMultisigTransferred;

  constructor(event: TeamMultisigTransferred) {
    this._event = event;
  }

  get previousTeamMultisig(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTeamMultisig(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RageTradeFactory extends ethereum.SmartContract {
  static bind(address: Address): RageTradeFactory {
    return new RageTradeFactory("RageTradeFactory", address);
  }

  clearingHouse(): Address {
    let result = super.call("clearingHouse", "clearingHouse():(address)", []);

    return result[0].toAddress();
  }

  try_clearingHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "clearingHouse",
      "clearingHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyAdmin(): Address {
    let result = super.call("proxyAdmin", "proxyAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_proxyAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyAdmin", "proxyAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  teamMultisig(): Address {
    let result = super.call("teamMultisig", "teamMultisig():(address)", []);

    return result[0].toAddress();
  }

  try_teamMultisig(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamMultisig", "teamMultisig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vBase(): Address {
    let result = super.call("vBase", "vBase():(address)", []);

    return result[0].toAddress();
  }

  try_vBase(): ethereum.CallResult<Address> {
    let result = super.tryCall("vBase", "vBase():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vPoolWrapperLogicAddress(): Address {
    let result = super.call(
      "vPoolWrapperLogicAddress",
      "vPoolWrapperLogicAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vPoolWrapperLogicAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vPoolWrapperLogicAddress",
      "vPoolWrapperLogicAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get clearingHouseLogicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vPoolWrapperLogicAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get insuranceFundLogicAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get cBase(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get nativeOracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializePoolCall extends ethereum.Call {
  get inputs(): InitializePoolCall__Inputs {
    return new InitializePoolCall__Inputs(this);
  }

  get outputs(): InitializePoolCall__Outputs {
    return new InitializePoolCall__Outputs(this);
  }
}

export class InitializePoolCall__Inputs {
  _call: InitializePoolCall;

  constructor(call: InitializePoolCall) {
    this._call = call;
  }

  get initializePoolParams(): InitializePoolCallInitializePoolParamsStruct {
    return this._call.inputValues[0].value.toTuple() as InitializePoolCallInitializePoolParamsStruct;
  }
}

export class InitializePoolCall__Outputs {
  _call: InitializePoolCall;

  constructor(call: InitializePoolCall) {
    this._call = call;
  }
}

export class InitializePoolCallInitializePoolParamsStruct extends ethereum.Tuple {
  get deployVTokenParams(): InitializePoolCallInitializePoolParamsDeployVTokenParamsStruct {
    return this[0].toTuple() as InitializePoolCallInitializePoolParamsDeployVTokenParamsStruct;
  }

  get rageTradePoolInitialSettings(): InitializePoolCallInitializePoolParamsRageTradePoolInitialSettingsStruct {
    return this[1].toTuple() as InitializePoolCallInitializePoolParamsRageTradePoolInitialSettingsStruct;
  }

  get liquidityFeePips(): i32 {
    return this[2].toI32();
  }

  get protocolFeePips(): i32 {
    return this[3].toI32();
  }

  get slotsToInitialize(): i32 {
    return this[4].toI32();
  }
}

export class InitializePoolCallInitializePoolParamsDeployVTokenParamsStruct extends ethereum.Tuple {
  get vTokenName(): string {
    return this[0].toString();
  }

  get vTokenSymbol(): string {
    return this[1].toString();
  }

  get cTokenDecimals(): i32 {
    return this[2].toI32();
  }
}

export class InitializePoolCallInitializePoolParamsRageTradePoolInitialSettingsStruct extends ethereum.Tuple {
  get initialMarginRatio(): i32 {
    return this[0].toI32();
  }

  get maintainanceMarginRatio(): i32 {
    return this[1].toI32();
  }

  get twapDuration(): BigInt {
    return this[2].toBigInt();
  }

  get supported(): boolean {
    return this[3].toBoolean();
  }

  get isCrossMargined(): boolean {
    return this[4].toBoolean();
  }

  get oracle(): Address {
    return this[5].toAddress();
  }
}

export class SetVPoolWrapperLogicAddressCall extends ethereum.Call {
  get inputs(): SetVPoolWrapperLogicAddressCall__Inputs {
    return new SetVPoolWrapperLogicAddressCall__Inputs(this);
  }

  get outputs(): SetVPoolWrapperLogicAddressCall__Outputs {
    return new SetVPoolWrapperLogicAddressCall__Outputs(this);
  }
}

export class SetVPoolWrapperLogicAddressCall__Inputs {
  _call: SetVPoolWrapperLogicAddressCall;

  constructor(call: SetVPoolWrapperLogicAddressCall) {
    this._call = call;
  }

  get _vPoolWrapperLogicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVPoolWrapperLogicAddressCall__Outputs {
  _call: SetVPoolWrapperLogicAddressCall;

  constructor(call: SetVPoolWrapperLogicAddressCall) {
    this._call = call;
  }
}

export class TransferGovernanceCall extends ethereum.Call {
  get inputs(): TransferGovernanceCall__Inputs {
    return new TransferGovernanceCall__Inputs(this);
  }

  get outputs(): TransferGovernanceCall__Outputs {
    return new TransferGovernanceCall__Outputs(this);
  }
}

export class TransferGovernanceCall__Inputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }

  get newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernanceCall__Outputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }
}

export class TransferTeamMultisigCall extends ethereum.Call {
  get inputs(): TransferTeamMultisigCall__Inputs {
    return new TransferTeamMultisigCall__Inputs(this);
  }

  get outputs(): TransferTeamMultisigCall__Outputs {
    return new TransferTeamMultisigCall__Outputs(this);
  }
}

export class TransferTeamMultisigCall__Inputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }

  get newTeamMultisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTeamMultisigCall__Outputs {
  _call: TransferTeamMultisigCall;

  constructor(call: TransferTeamMultisigCall) {
    this._call = call;
  }
}
