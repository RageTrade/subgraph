// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class AdminParamsUpdated extends ethereum.Event {
  get params(): AdminParamsUpdated__Params {
    return new AdminParamsUpdated__Params(this);
  }
}

export class AdminParamsUpdated__Params {
  _event: AdminParamsUpdated;

  constructor(event: AdminParamsUpdated) {
    this._event = event;
  }

  get newKeeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dnGmxSeniorVault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDepositCap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get batchingManager(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get withdrawFeeBps(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class AllowancesGranted extends ethereum.Event {
  get params(): AllowancesGranted__Params {
    return new AllowancesGranted__Params(this);
  }
}

export class AllowancesGranted__Params {
  _event: AllowancesGranted;

  constructor(event: AllowancesGranted) {
    this._event = event;
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BatchingManagerUpdated extends ethereum.Event {
  get params(): BatchingManagerUpdated__Params {
    return new BatchingManagerUpdated__Params(this);
  }
}

export class BatchingManagerUpdated__Params {
  _event: BatchingManagerUpdated;

  constructor(event: BatchingManagerUpdated) {
    this._event = event;
  }

  get _batchingManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositCapUpdated extends ethereum.Event {
  get params(): DepositCapUpdated__Params {
    return new DepositCapUpdated__Params(this);
  }
}

export class DepositCapUpdated__Params {
  _event: DepositCapUpdated;

  constructor(event: DepositCapUpdated) {
    this._event = event;
  }

  get _newDepositCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DnGmxSeniorVaultUpdated extends ethereum.Event {
  get params(): DnGmxSeniorVaultUpdated__Params {
    return new DnGmxSeniorVaultUpdated__Params(this);
  }
}

export class DnGmxSeniorVaultUpdated__Params {
  _event: DnGmxSeniorVaultUpdated;

  constructor(event: DnGmxSeniorVaultUpdated) {
    this._event = event;
  }

  get _dnGmxSeniorVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeParamsUpdated extends ethereum.Event {
  get params(): FeeParamsUpdated__Params {
    return new FeeParamsUpdated__Params(this);
  }
}

export class FeeParamsUpdated__Params {
  _event: FeeParamsUpdated;

  constructor(event: FeeParamsUpdated) {
    this._event = event;
  }

  get feeBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newFeeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get feeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class HedgeParamsUpdated extends ethereum.Event {
  get params(): HedgeParamsUpdated__Params {
    return new HedgeParamsUpdated__Params(this);
  }
}

export class HedgeParamsUpdated__Params {
  _event: HedgeParamsUpdated;

  constructor(event: HedgeParamsUpdated) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get swapRouter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get targetHealthFactor(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get aaveRewardsController(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class KeeperUpdated extends ethereum.Event {
  get params(): KeeperUpdated__Params {
    return new KeeperUpdated__Params(this);
  }
}

export class KeeperUpdated__Params {
  _event: KeeperUpdated;

  constructor(event: KeeperUpdated) {
    this._event = event;
  }

  get _newKeeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RebalanceParamsUpdated extends ethereum.Event {
  get params(): RebalanceParamsUpdated__Params {
    return new RebalanceParamsUpdated__Params(this);
  }
}

export class RebalanceParamsUpdated__Params {
  _event: RebalanceParamsUpdated;

  constructor(event: RebalanceParamsUpdated) {
    this._event = event;
  }

  get rebalanceTimeThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rebalanceDeltaThresholdBps(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get rebalanceHfThresholdBps(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Rebalanced extends ethereum.Event {
  get params(): Rebalanced__Params {
    return new Rebalanced__Params(this);
  }
}

export class Rebalanced__Params {
  _event: Rebalanced;

  constructor(event: Rebalanced) {
    this._event = event;
  }
}

export class ThresholdsUpdated extends ethereum.Event {
  get params(): ThresholdsUpdated__Params {
    return new ThresholdsUpdated__Params(this);
  }
}

export class ThresholdsUpdated__Params {
  _event: ThresholdsUpdated;

  constructor(event: ThresholdsUpdated) {
    this._event = event;
  }

  get slippageThresholdSwapBtcBps(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get slippageThresholdSwapEthBps(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get slippageThresholdGmxBps(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get usdcConversionThreshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get wethConversionThreshold(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get hedgeUsdcAmountThreshold(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get partialBtcHedgeUsdcAmountThreshold(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get partialEthHedgeUsdcAmountThreshold(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawFeeUpdated extends ethereum.Event {
  get params(): WithdrawFeeUpdated__Params {
    return new WithdrawFeeUpdated__Params(this);
  }
}

export class WithdrawFeeUpdated__Params {
  _event: WithdrawFeeUpdated;

  constructor(event: WithdrawFeeUpdated) {
    this._event = event;
  }

  get _withdrawFeeBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GlpSwapped extends ethereum.Event {
  get params(): GlpSwapped__Params {
    return new GlpSwapped__Params(this);
  }
}

export class GlpSwapped__Params {
  _event: GlpSwapped;

  constructor(event: GlpSwapped) {
    this._event = event;
  }

  get glpQuantity(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get usdcQuantity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromGlpToUsdc(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RewardsHarvested extends ethereum.Event {
  get params(): RewardsHarvested__Params {
    return new RewardsHarvested__Params(this);
  }
}

export class RewardsHarvested__Params {
  _event: RewardsHarvested;

  constructor(event: RewardsHarvested) {
    this._event = event;
  }

  get wethHarvested(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get esGmxStaked(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get juniorVaultWeth(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seniorVaultWeth(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get juniorVaultGlp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seniorVaultAUsdc(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TokenSwapped extends ethereum.Event {
  get params(): TokenSwapped__Params {
    return new TokenSwapped__Params(this);
  }
}

export class TokenSwapped__Params {
  _event: TokenSwapped;

  constructor(event: TokenSwapped) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromQuantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toQuantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DnGmxJuniorVault__getAdminParamsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: i32;
  value5: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromAddress(this.value0));
    map.set('value1', ethereum.Value.fromAddress(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromAddress(this.value3));
    map.set('value4', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4)));
    map.set('value5', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5)));
    return map;
  }

  getKeeper(): Address {
    return this.value0;
  }

  getDnGmxSeniorVault(): Address {
    return this.value1;
  }

  getDepositCap(): BigInt {
    return this.value2;
  }

  getBatchingManager(): Address {
    return this.value3;
  }

  getWithdrawFeeBps(): i32 {
    return this.value4;
  }

  getFeeTierWethWbtcPool(): i32 {
    return this.value5;
  }
}

export class DnGmxJuniorVault__getCurrentBorrowsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCurrentBtcBorrow(): BigInt {
    return this.value0;
  }

  getCurrentEthBorrow(): BigInt {
    return this.value1;
  }
}

export class DnGmxJuniorVault__getHedgeParamsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;

  constructor(value0: Address, value1: Address, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromAddress(this.value0));
    map.set('value1', ethereum.Value.fromAddress(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getBalancerVault(): Address {
    return this.value0;
  }

  getSwapRouter(): Address {
    return this.value1;
  }

  getTargetHealthFactor(): BigInt {
    return this.value2;
  }

  getAaveRewardsController(): Address {
    return this.value3;
  }
}

export class DnGmxJuniorVault__getOptimalBorrowsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOptimalBtcBorrow(): BigInt {
    return this.value0;
  }

  getOptimalEthBorrow(): BigInt {
    return this.value1;
  }
}

export class DnGmxJuniorVault__getRebalanceParamsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;

  constructor(value0: BigInt, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)));
    return map;
  }

  getRebalanceTimeThreshold(): BigInt {
    return this.value0;
  }

  getRebalanceDeltaThresholdBps(): i32 {
    return this.value1;
  }

  getRebalanceHfThresholdBps(): i32 {
    return this.value2;
  }
}

export class DnGmxJuniorVault__getThresholdsResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set('value4', ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set('value5', ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set('value6', ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set('value7', ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getSlippageThresholdSwapBtcBps(): i32 {
    return this.value0;
  }

  getSlippageThresholdSwapEthBps(): i32 {
    return this.value1;
  }

  getSlippageThresholdGmxBps(): i32 {
    return this.value2;
  }

  getUsdcConversionThreshold(): BigInt {
    return this.value3;
  }

  getWethConversionThreshold(): BigInt {
    return this.value4;
  }

  getHedgeUsdcAmountThreshold(): BigInt {
    return this.value5;
  }

  getPartialBtcHedgeUsdcAmountThreshold(): BigInt {
    return this.value6;
  }

  getPartialEthHedgeUsdcAmountThreshold(): BigInt {
    return this.value7;
  }
}

export class DnGmxJuniorVault extends ethereum.SmartContract {
  static bind(address: Address): DnGmxJuniorVault {
    return new DnGmxJuniorVault('DnGmxJuniorVault', address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ]);

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call('asset', 'asset():(address)', []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall('asset', 'asset():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call('decimals', 'decimals():(uint8)', []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall('decimals', 'decimals():(uint8)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(amount: BigInt, to: Address): BigInt {
    let result = super.call('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(amount: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositCap(): BigInt {
    let result = super.call('depositCap', 'depositCap():(uint256)', []);

    return result[0].toBigInt();
  }

  try_depositCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('depositCap', 'depositCap():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dnUsdcDeposited(): BigInt {
    let result = super.call('dnUsdcDeposited', 'dnUsdcDeposited():(int256)', []);

    return result[0].toBigInt();
  }

  try_dnUsdcDeposited(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('dnUsdcDeposited', 'dnUsdcDeposited():(int256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdminParams(): DnGmxJuniorVault__getAdminParamsResult {
    let result = super.call(
      'getAdminParams',
      'getAdminParams():(address,address,uint256,address,uint16,uint24)',
      []
    );

    return new DnGmxJuniorVault__getAdminParamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try_getAdminParams(): ethereum.CallResult<DnGmxJuniorVault__getAdminParamsResult> {
    let result = super.tryCall(
      'getAdminParams',
      'getAdminParams():(address,address,uint256,address,uint16,uint24)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getAdminParamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  getCurrentBorrows(): DnGmxJuniorVault__getCurrentBorrowsResult {
    let result = super.call(
      'getCurrentBorrows',
      'getCurrentBorrows():(uint256,uint256)',
      []
    );

    return new DnGmxJuniorVault__getCurrentBorrowsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentBorrows(): ethereum.CallResult<
    DnGmxJuniorVault__getCurrentBorrowsResult
  > {
    let result = super.tryCall(
      'getCurrentBorrows',
      'getCurrentBorrows():(uint256,uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getCurrentBorrowsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getHedgeParams(): DnGmxJuniorVault__getHedgeParamsResult {
    let result = super.call(
      'getHedgeParams',
      'getHedgeParams():(address,address,uint256,address)',
      []
    );

    return new DnGmxJuniorVault__getHedgeParamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_getHedgeParams(): ethereum.CallResult<DnGmxJuniorVault__getHedgeParamsResult> {
    let result = super.tryCall(
      'getHedgeParams',
      'getHedgeParams():(address,address,uint256,address)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getHedgeParamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  getMarketValue(assetAmount: BigInt): BigInt {
    let result = super.call('getMarketValue', 'getMarketValue(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assetAmount),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketValue(assetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketValue', 'getMarketValue(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assetAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptimalBorrows(glpDeposited: BigInt): DnGmxJuniorVault__getOptimalBorrowsResult {
    let result = super.call(
      'getOptimalBorrows',
      'getOptimalBorrows(uint256):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(glpDeposited)]
    );

    return new DnGmxJuniorVault__getOptimalBorrowsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getOptimalBorrows(
    glpDeposited: BigInt
  ): ethereum.CallResult<DnGmxJuniorVault__getOptimalBorrowsResult> {
    let result = super.tryCall(
      'getOptimalBorrows',
      'getOptimalBorrows(uint256):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(glpDeposited)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getOptimalBorrowsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPrice(maximize: boolean): BigInt {
    let result = super.call('getPrice', 'getPrice(bool):(uint256)', [
      ethereum.Value.fromBoolean(maximize),
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(maximize: boolean): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getPrice', 'getPrice(bool):(uint256)', [
      ethereum.Value.fromBoolean(maximize),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceX128(): BigInt {
    let result = super.call('getPriceX128', 'getPriceX128():(uint256)', []);

    return result[0].toBigInt();
  }

  try_getPriceX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getPriceX128', 'getPriceX128():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRebalanceParams(): DnGmxJuniorVault__getRebalanceParamsResult {
    let result = super.call(
      'getRebalanceParams',
      'getRebalanceParams():(uint32,uint16,uint16)',
      []
    );

    return new DnGmxJuniorVault__getRebalanceParamsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_getRebalanceParams(): ethereum.CallResult<
    DnGmxJuniorVault__getRebalanceParamsResult
  > {
    let result = super.tryCall(
      'getRebalanceParams',
      'getRebalanceParams():(uint32,uint16,uint16)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getRebalanceParamsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  getThresholds(): DnGmxJuniorVault__getThresholdsResult {
    let result = super.call(
      'getThresholds',
      'getThresholds():(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)',
      []
    );

    return new DnGmxJuniorVault__getThresholdsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getThresholds(): ethereum.CallResult<DnGmxJuniorVault__getThresholdsResult> {
    let result = super.tryCall(
      'getThresholds',
      'getThresholds():(uint16,uint16,uint16,uint128,uint128,uint128,uint128,uint128)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DnGmxJuniorVault__getThresholdsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  getUsdcBorrowed(): BigInt {
    let result = super.call('getUsdcBorrowed', 'getUsdcBorrowed():(uint256)', []);

    return result[0].toBigInt();
  }

  try_getUsdcBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getUsdcBorrowed', 'getUsdcBorrowed():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultMarketValue(): BigInt {
    let result = super.call('getVaultMarketValue', 'getVaultMarketValue():(int256)', []);

    return result[0].toBigInt();
  }

  try_getVaultMarketValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getVaultMarketValue',
      'getVaultMarketValue():(int256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [ethereum.Value.fromAddress(spender), ethereum.Value.fromUnsignedBigInt(addedValue)]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [ethereum.Value.fromAddress(spender), ethereum.Value.fromUnsignedBigInt(addedValue)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidRebalance(): boolean {
    let result = super.call('isValidRebalance', 'isValidRebalance():(bool)', []);

    return result[0].toBoolean();
  }

  try_isValidRebalance(): ethereum.CallResult<boolean> {
    let result = super.tryCall('isValidRebalance', 'isValidRebalance():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(receiver: Address): BigInt {
    let result = super.call('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, to: Address): BigInt {
    let result = super.call('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call('name', 'name():(string)', []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call('paused', 'paused():(bool)', []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('paused', 'paused():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call('symbol', 'symbol():(string)', []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall('symbol', 'symbol():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call('totalAssets', 'totalAssets():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalAssets', 'totalAssets():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call('totalSupply', 'totalSupply():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalSupply', 'totalSupply():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call('withdraw', 'withdraw(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimVestedGmxCall extends ethereum.Call {
  get inputs(): ClaimVestedGmxCall__Inputs {
    return new ClaimVestedGmxCall__Inputs(this);
  }

  get outputs(): ClaimVestedGmxCall__Outputs {
    return new ClaimVestedGmxCall__Outputs(this);
  }
}

export class ClaimVestedGmxCall__Inputs {
  _call: ClaimVestedGmxCall;

  constructor(call: ClaimVestedGmxCall) {
    this._call = call;
  }
}

export class ClaimVestedGmxCall__Outputs {
  _call: ClaimVestedGmxCall;

  constructor(call: ClaimVestedGmxCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantAllowancesCall extends ethereum.Call {
  get inputs(): GrantAllowancesCall__Inputs {
    return new GrantAllowancesCall__Inputs(this);
  }

  get outputs(): GrantAllowancesCall__Outputs {
    return new GrantAllowancesCall__Outputs(this);
  }
}

export class GrantAllowancesCall__Inputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class GrantAllowancesCall__Outputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class HarvestFeesCall extends ethereum.Call {
  get inputs(): HarvestFeesCall__Inputs {
    return new HarvestFeesCall__Inputs(this);
  }

  get outputs(): HarvestFeesCall__Outputs {
    return new HarvestFeesCall__Outputs(this);
  }
}

export class HarvestFeesCall__Inputs {
  _call: HarvestFeesCall;

  constructor(call: HarvestFeesCall) {
    this._call = call;
  }
}

export class HarvestFeesCall__Outputs {
  _call: HarvestFeesCall;

  constructor(call: HarvestFeesCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rewardRouter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _tokens(): InitializeCall_tokensStruct {
    return changetype<InitializeCall_tokensStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }

  get _poolAddressesProvider(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_tokensStruct extends ethereum.Tuple {
  get weth(): Address {
    return this[0].toAddress();
  }

  get wbtc(): Address {
    return this[1].toAddress();
  }

  get sGlp(): Address {
    return this[2].toAddress();
  }

  get usdc(): Address {
    return this[3].toAddress();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class ReceiveFlashLoanCall extends ethereum.Call {
  get inputs(): ReceiveFlashLoanCall__Inputs {
    return new ReceiveFlashLoanCall__Inputs(this);
  }

  get outputs(): ReceiveFlashLoanCall__Outputs {
    return new ReceiveFlashLoanCall__Outputs(this);
  }
}

export class ReceiveFlashLoanCall__Inputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get feeAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get userData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveFlashLoanCall__Outputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAdminParamsCall extends ethereum.Call {
  get inputs(): SetAdminParamsCall__Inputs {
    return new SetAdminParamsCall__Inputs(this);
  }

  get outputs(): SetAdminParamsCall__Outputs {
    return new SetAdminParamsCall__Outputs(this);
  }
}

export class SetAdminParamsCall__Inputs {
  _call: SetAdminParamsCall;

  constructor(call: SetAdminParamsCall) {
    this._call = call;
  }

  get newKeeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dnGmxSeniorVault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newDepositCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get batchingManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get withdrawFeeBps(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get feeTierWethWbtcPool(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class SetAdminParamsCall__Outputs {
  _call: SetAdminParamsCall;

  constructor(call: SetAdminParamsCall) {
    this._call = call;
  }
}

export class SetFeeParamsCall extends ethereum.Call {
  get inputs(): SetFeeParamsCall__Inputs {
    return new SetFeeParamsCall__Inputs(this);
  }

  get outputs(): SetFeeParamsCall__Outputs {
    return new SetFeeParamsCall__Outputs(this);
  }
}

export class SetFeeParamsCall__Inputs {
  _call: SetFeeParamsCall;

  constructor(call: SetFeeParamsCall) {
    this._call = call;
  }

  get _feeBps(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFeeParamsCall__Outputs {
  _call: SetFeeParamsCall;

  constructor(call: SetFeeParamsCall) {
    this._call = call;
  }
}

export class SetHedgeParamsCall extends ethereum.Call {
  get inputs(): SetHedgeParamsCall__Inputs {
    return new SetHedgeParamsCall__Inputs(this);
  }

  get outputs(): SetHedgeParamsCall__Outputs {
    return new SetHedgeParamsCall__Outputs(this);
  }
}

export class SetHedgeParamsCall__Inputs {
  _call: SetHedgeParamsCall;

  constructor(call: SetHedgeParamsCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get swapRouter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targetHealthFactor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get aaveRewardsController(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetHedgeParamsCall__Outputs {
  _call: SetHedgeParamsCall;

  constructor(call: SetHedgeParamsCall) {
    this._call = call;
  }
}

export class SetRebalanceParamsCall extends ethereum.Call {
  get inputs(): SetRebalanceParamsCall__Inputs {
    return new SetRebalanceParamsCall__Inputs(this);
  }

  get outputs(): SetRebalanceParamsCall__Outputs {
    return new SetRebalanceParamsCall__Outputs(this);
  }
}

export class SetRebalanceParamsCall__Inputs {
  _call: SetRebalanceParamsCall;

  constructor(call: SetRebalanceParamsCall) {
    this._call = call;
  }

  get rebalanceTimeThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rebalanceDeltaThresholdBps(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rebalanceHfThresholdBps(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetRebalanceParamsCall__Outputs {
  _call: SetRebalanceParamsCall;

  constructor(call: SetRebalanceParamsCall) {
    this._call = call;
  }
}

export class SetThresholdsCall extends ethereum.Call {
  get inputs(): SetThresholdsCall__Inputs {
    return new SetThresholdsCall__Inputs(this);
  }

  get outputs(): SetThresholdsCall__Outputs {
    return new SetThresholdsCall__Outputs(this);
  }
}

export class SetThresholdsCall__Inputs {
  _call: SetThresholdsCall;

  constructor(call: SetThresholdsCall) {
    this._call = call;
  }

  get slippageThresholdSwapBtcBps(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get slippageThresholdSwapEthBps(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get slippageThresholdGmxBps(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get usdcConversionThreshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get wethConversionThreshold(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get hedgeUsdcAmountThreshold(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get partialBtcHedgeUsdcAmountThreshold(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get partialEthHedgeUsdcAmountThreshold(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class SetThresholdsCall__Outputs {
  _call: SetThresholdsCall;

  constructor(call: SetThresholdsCall) {
    this._call = call;
  }
}

export class StopVestAndStakeEsGmxCall extends ethereum.Call {
  get inputs(): StopVestAndStakeEsGmxCall__Inputs {
    return new StopVestAndStakeEsGmxCall__Inputs(this);
  }

  get outputs(): StopVestAndStakeEsGmxCall__Outputs {
    return new StopVestAndStakeEsGmxCall__Outputs(this);
  }
}

export class StopVestAndStakeEsGmxCall__Inputs {
  _call: StopVestAndStakeEsGmxCall;

  constructor(call: StopVestAndStakeEsGmxCall) {
    this._call = call;
  }
}

export class StopVestAndStakeEsGmxCall__Outputs {
  _call: StopVestAndStakeEsGmxCall;

  constructor(call: StopVestAndStakeEsGmxCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeAndVestEsGmxCall extends ethereum.Call {
  get inputs(): UnstakeAndVestEsGmxCall__Inputs {
    return new UnstakeAndVestEsGmxCall__Inputs(this);
  }

  get outputs(): UnstakeAndVestEsGmxCall__Outputs {
    return new UnstakeAndVestEsGmxCall__Outputs(this);
  }
}

export class UnstakeAndVestEsGmxCall__Inputs {
  _call: UnstakeAndVestEsGmxCall;

  constructor(call: UnstakeAndVestEsGmxCall) {
    this._call = call;
  }
}

export class UnstakeAndVestEsGmxCall__Outputs {
  _call: UnstakeAndVestEsGmxCall;

  constructor(call: UnstakeAndVestEsGmxCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
