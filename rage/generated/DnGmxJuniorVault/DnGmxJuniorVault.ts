// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class AllowancesGranted extends ethereum.Event {
  get params(): AllowancesGranted__Params {
    return new AllowancesGranted__Params(this);
  }
}

export class AllowancesGranted__Params {
  _event: AllowancesGranted;

  constructor(event: AllowancesGranted) {
    this._event = event;
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BatchingManagerUpdated extends ethereum.Event {
  get params(): BatchingManagerUpdated__Params {
    return new BatchingManagerUpdated__Params(this);
  }
}

export class BatchingManagerUpdated__Params {
  _event: BatchingManagerUpdated;

  constructor(event: BatchingManagerUpdated) {
    this._event = event;
  }

  get _batchingManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositCapUpdated extends ethereum.Event {
  get params(): DepositCapUpdated__Params {
    return new DepositCapUpdated__Params(this);
  }
}

export class DepositCapUpdated__Params {
  _event: DepositCapUpdated;

  constructor(event: DepositCapUpdated) {
    this._event = event;
  }

  get _newDepositCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DnGmxSeniorVaultUpdated extends ethereum.Event {
  get params(): DnGmxSeniorVaultUpdated__Params {
    return new DnGmxSeniorVaultUpdated__Params(this);
  }
}

export class DnGmxSeniorVaultUpdated__Params {
  _event: DnGmxSeniorVaultUpdated;

  constructor(event: DnGmxSeniorVaultUpdated) {
    this._event = event;
  }

  get _dnGmxSeniorVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get _newFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get feeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class KeeperUpdated extends ethereum.Event {
  get params(): KeeperUpdated__Params {
    return new KeeperUpdated__Params(this);
  }
}

export class KeeperUpdated__Params {
  _event: KeeperUpdated;

  constructor(event: KeeperUpdated) {
    this._event = event;
  }

  get _newKeeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RebalanceParamsUpdated extends ethereum.Event {
  get params(): RebalanceParamsUpdated__Params {
    return new RebalanceParamsUpdated__Params(this);
  }
}

export class RebalanceParamsUpdated__Params {
  _event: RebalanceParamsUpdated;

  constructor(event: RebalanceParamsUpdated) {
    this._event = event;
  }

  get rebalanceTimeThreshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rebalanceDeltaThreshold(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Rebalanced extends ethereum.Event {
  get params(): Rebalanced__Params {
    return new Rebalanced__Params(this);
  }
}

export class Rebalanced__Params {
  _event: Rebalanced;

  constructor(event: Rebalanced) {
    this._event = event;
  }
}

export class RewardsHarvested extends ethereum.Event {
  get params(): RewardsHarvested__Params {
    return new RewardsHarvested__Params(this);
  }
}

export class RewardsHarvested__Params {
  _event: RewardsHarvested;

  constructor(event: RewardsHarvested) {
    this._event = event;
  }

  get totalEthAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get juniorVaultShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawFeeUpdated extends ethereum.Event {
  get params(): WithdrawFeeUpdated__Params {
    return new WithdrawFeeUpdated__Params(this);
  }
}

export class WithdrawFeeUpdated__Params {
  _event: WithdrawFeeUpdated;

  constructor(event: WithdrawFeeUpdated) {
    this._event = event;
  }

  get _withdrawFeeBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class YieldParamsUpdated extends ethereum.Event {
  get params(): YieldParamsUpdated__Params {
    return new YieldParamsUpdated__Params(this);
  }
}

export class YieldParamsUpdated__Params {
  _event: YieldParamsUpdated;

  constructor(event: YieldParamsUpdated) {
    this._event = event;
  }

  get usdcRedeemSlippage(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get usdcConversionThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seniorVaultWethConversionThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DnGmxJuniorVault extends ethereum.SmartContract {
  static bind(address: Address): DnGmxJuniorVault {
    return new DnGmxJuniorVault('DnGmxJuniorVault', address);
  }

  FEE(): BigInt {
    let result = super.call('FEE', 'FEE():(uint256)', []);

    return result[0].toBigInt();
  }

  try_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('FEE', 'FEE():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPS(): i32 {
    let result = super.call('MAX_BPS', 'MAX_BPS():(uint16)', []);

    return result[0].toI32();
  }

  try_MAX_BPS(): ethereum.CallResult<i32> {
    let result = super.tryCall('MAX_BPS', 'MAX_BPS():(uint16)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  PRICE_PRECISION(): BigInt {
    let result = super.call(
      'PRICE_PRECISION',
      'PRICE_PRECISION():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_PRICE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'PRICE_PRECISION',
      'PRICE_PRECISION():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDG_DECIMALS(): BigInt {
    let result = super.call('USDG_DECIMALS', 'USDG_DECIMALS():(uint256)', []);

    return result[0].toBigInt();
  }

  try_USDG_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'USDG_DECIMALS',
      'USDG_DECIMALS():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VARIABLE_INTEREST_MODE(): BigInt {
    let result = super.call(
      'VARIABLE_INTEREST_MODE',
      'VARIABLE_INTEREST_MODE():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_VARIABLE_INTEREST_MODE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'VARIABLE_INTEREST_MODE',
      'VARIABLE_INTEREST_MODE():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH_DECIMALS(): BigInt {
    let result = super.call('WETH_DECIMALS', 'WETH_DECIMALS():(uint256)', []);

    return result[0].toBigInt();
  }

  try_WETH_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'WETH_DECIMALS',
      'WETH_DECIMALS():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      'allowance',
      'allowance(address,address):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'allowance',
      'allowance(address,address):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call('asset', 'asset():(address)', []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall('asset', 'asset():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      'convertToAssets',
      'convertToAssets(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'convertToAssets',
      'convertToAssets(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      'convertToShares',
      'convertToShares(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'convertToShares',
      'convertToShares(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call('decimals', 'decimals():(uint8)', []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall('decimals', 'decimals():(uint8)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(amount: BigInt, to: Address): BigInt {
    let result = super.call('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(amount: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'deposit',
      'deposit(uint256,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(to),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositCap(): BigInt {
    let result = super.call('depositCap', 'depositCap():(uint256)', []);

    return result[0].toBigInt();
  }

  try_depositCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('depositCap', 'depositCap():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dnGmxSeniorVault(): Address {
    let result = super.call(
      'dnGmxSeniorVault',
      'dnGmxSeniorVault():(address)',
      []
    );

    return result[0].toAddress();
  }

  try_dnGmxSeniorVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'dnGmxSeniorVault',
      'dnGmxSeniorVault():(address)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRecipient(): Address {
    let result = super.call('feeRecipient', 'feeRecipient():(address)', []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall('feeRecipient', 'feeRecipient():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketValue(assetAmount: BigInt): BigInt {
    let result = super.call(
      'getMarketValue',
      'getMarketValue(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );

    return result[0].toBigInt();
  }

  try_getMarketValue(assetAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketValue',
      'getMarketValue(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assetAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceX128(): BigInt {
    let result = super.call('getPriceX128', 'getPriceX128():(uint256)', []);

    return result[0].toBigInt();
  }

  try_getPriceX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getPriceX128', 'getPriceX128():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUsdcBorrowed(): BigInt {
    let result = super.call(
      'getUsdcBorrowed',
      'getUsdcBorrowed():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_getUsdcBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getUsdcBorrowed',
      'getUsdcBorrowed():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultMarketValue(): BigInt {
    let result = super.call(
      'getVaultMarketValue',
      'getVaultMarketValue():(int256)',
      []
    );

    return result[0].toBigInt();
  }

  try_getVaultMarketValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getVaultMarketValue',
      'getVaultMarketValue():(int256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidRebalance(): boolean {
    let result = super.call(
      'isValidRebalance',
      'isValidRebalance():(bool)',
      []
    );

    return result[0].toBoolean();
  }

  try_isValidRebalance(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isValidRebalance',
      'isValidRebalance():(bool)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call('keeper', 'keeper():(address)', []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall('keeper', 'keeper():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastRebalanceTS(): BigInt {
    let result = super.call(
      'lastRebalanceTS',
      'lastRebalanceTS():(uint64)',
      []
    );

    return result[0].toBigInt();
  }

  try_lastRebalanceTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'lastRebalanceTS',
      'lastRebalanceTS():(uint64)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(param0: Address): BigInt {
    let result = super.call('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'maxWithdraw',
      'maxWithdraw(address):(uint256)',
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, to: Address): BigInt {
    let result = super.call('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call('name', 'name():(string)', []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call('paused', 'paused():(bool)', []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('paused', 'paused():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call(
      'previewDeposit',
      'previewDeposit(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'previewDeposit',
      'previewDeposit(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'previewMint',
      'previewMint(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call(
      'previewRedeem',
      'previewRedeem(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'previewRedeem',
      'previewRedeem(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call(
      'previewWithdraw',
      'previewWithdraw(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'previewWithdraw',
      'previewWithdraw(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFee(): BigInt {
    let result = super.call('protocolFee', 'protocolFee():(uint256)', []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('protocolFee', 'protocolFee():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceDeltaThreshold(): i32 {
    let result = super.call(
      'rebalanceDeltaThreshold',
      'rebalanceDeltaThreshold():(uint16)',
      []
    );

    return result[0].toI32();
  }

  try_rebalanceDeltaThreshold(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      'rebalanceDeltaThreshold',
      'rebalanceDeltaThreshold():(uint16)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rebalanceTimeThreshold(): BigInt {
    let result = super.call(
      'rebalanceTimeThreshold',
      'rebalanceTimeThreshold():(uint32)',
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceTimeThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'rebalanceTimeThreshold',
      'rebalanceTimeThreshold():(uint32)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      'redeem',
      'redeem(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ]
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'redeem',
      'redeem(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorVaultWethConversionThreshold(): BigInt {
    let result = super.call(
      'seniorVaultWethConversionThreshold',
      'seniorVaultWethConversionThreshold():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_seniorVaultWethConversionThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'seniorVaultWethConversionThreshold',
      'seniorVaultWethConversionThreshold():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorVaultWethRewards(): BigInt {
    let result = super.call(
      'seniorVaultWethRewards',
      'seniorVaultWethRewards():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_seniorVaultWethRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'seniorVaultWethRewards',
      'seniorVaultWethRewards():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippageThreshold(): BigInt {
    let result = super.call(
      'slippageThreshold',
      'slippageThreshold():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_slippageThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'slippageThreshold',
      'slippageThreshold():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call('symbol', 'symbol():(string)', []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall('symbol', 'symbol():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call('totalAssets', 'totalAssets():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalAssets', 'totalAssets():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call('totalSupply', 'totalSupply():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalSupply', 'totalSupply():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usdcConversionThreshold(): BigInt {
    let result = super.call(
      'usdcConversionThreshold',
      'usdcConversionThreshold():(uint240)',
      []
    );

    return result[0].toBigInt();
  }

  try_usdcConversionThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'usdcConversionThreshold',
      'usdcConversionThreshold():(uint240)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdcRedeemSlippage(): i32 {
    let result = super.call(
      'usdcRedeemSlippage',
      'usdcRedeemSlippage():(uint16)',
      []
    );

    return result[0].toI32();
  }

  try_usdcRedeemSlippage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      'usdcRedeemSlippage',
      'usdcRedeemSlippage():(uint16)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  wethThreshold(): BigInt {
    let result = super.call('wethThreshold', 'wethThreshold():(uint256)', []);

    return result[0].toBigInt();
  }

  try_wethThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'wethThreshold',
      'wethThreshold():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFeeBps(): BigInt {
    let result = super.call('withdrawFeeBps', 'withdrawFeeBps():(uint256)', []);

    return result[0].toBigInt();
  }

  try_withdrawFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'withdrawFeeBps',
      'withdrawFeeBps():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantAllowancesCall extends ethereum.Call {
  get inputs(): GrantAllowancesCall__Inputs {
    return new GrantAllowancesCall__Inputs(this);
  }

  get outputs(): GrantAllowancesCall__Outputs {
    return new GrantAllowancesCall__Outputs(this);
  }
}

export class GrantAllowancesCall__Inputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class GrantAllowancesCall__Outputs {
  _call: GrantAllowancesCall;

  constructor(call: GrantAllowancesCall) {
    this._call = call;
  }
}

export class HarvestFeesCall extends ethereum.Call {
  get inputs(): HarvestFeesCall__Inputs {
    return new HarvestFeesCall__Inputs(this);
  }

  get outputs(): HarvestFeesCall__Outputs {
    return new HarvestFeesCall__Outputs(this);
  }
}

export class HarvestFeesCall__Inputs {
  _call: HarvestFeesCall;

  constructor(call: HarvestFeesCall) {
    this._call = call;
  }
}

export class HarvestFeesCall__Outputs {
  _call: HarvestFeesCall;

  constructor(call: HarvestFeesCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rewardRouter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _tricryptoPool(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _tokens(): InitializeCall_tokensStruct {
    return this._call.inputValues[5].value.toTuple() as InitializeCall_tokensStruct;
  }

  get _poolAddressesProvider(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_tokensStruct extends ethereum.Tuple {
  get weth(): Address {
    return this[0].toAddress();
  }

  get wbtc(): Address {
    return this[1].toAddress();
  }

  get sGlp(): Address {
    return this[2].toAddress();
  }

  get usdc(): Address {
    return this[3].toAddress();
  }

  get usdt(): Address {
    return this[4].toAddress();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class ReceiveFlashLoanCall extends ethereum.Call {
  get inputs(): ReceiveFlashLoanCall__Inputs {
    return new ReceiveFlashLoanCall__Inputs(this);
  }

  get outputs(): ReceiveFlashLoanCall__Outputs {
    return new ReceiveFlashLoanCall__Outputs(this);
  }
}

export class ReceiveFlashLoanCall__Inputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get feeAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get userData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveFlashLoanCall__Outputs {
  _call: ReceiveFlashLoanCall;

  constructor(call: ReceiveFlashLoanCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBatchingManagerCall extends ethereum.Call {
  get inputs(): SetBatchingManagerCall__Inputs {
    return new SetBatchingManagerCall__Inputs(this);
  }

  get outputs(): SetBatchingManagerCall__Outputs {
    return new SetBatchingManagerCall__Outputs(this);
  }
}

export class SetBatchingManagerCall__Inputs {
  _call: SetBatchingManagerCall;

  constructor(call: SetBatchingManagerCall) {
    this._call = call;
  }

  get _batchingManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBatchingManagerCall__Outputs {
  _call: SetBatchingManagerCall;

  constructor(call: SetBatchingManagerCall) {
    this._call = call;
  }
}

export class SetDepositCapCall extends ethereum.Call {
  get inputs(): SetDepositCapCall__Inputs {
    return new SetDepositCapCall__Inputs(this);
  }

  get outputs(): SetDepositCapCall__Outputs {
    return new SetDepositCapCall__Outputs(this);
  }
}

export class SetDepositCapCall__Inputs {
  _call: SetDepositCapCall;

  constructor(call: SetDepositCapCall) {
    this._call = call;
  }

  get _newDepositCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositCapCall__Outputs {
  _call: SetDepositCapCall;

  constructor(call: SetDepositCapCall) {
    this._call = call;
  }
}

export class SetDnGmxSeniorVaultCall extends ethereum.Call {
  get inputs(): SetDnGmxSeniorVaultCall__Inputs {
    return new SetDnGmxSeniorVaultCall__Inputs(this);
  }

  get outputs(): SetDnGmxSeniorVaultCall__Outputs {
    return new SetDnGmxSeniorVaultCall__Outputs(this);
  }
}

export class SetDnGmxSeniorVaultCall__Inputs {
  _call: SetDnGmxSeniorVaultCall;

  constructor(call: SetDnGmxSeniorVaultCall) {
    this._call = call;
  }

  get _dnGmxSeniorVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDnGmxSeniorVaultCall__Outputs {
  _call: SetDnGmxSeniorVaultCall;

  constructor(call: SetDnGmxSeniorVaultCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetHedgeParamsCall extends ethereum.Call {
  get inputs(): SetHedgeParamsCall__Inputs {
    return new SetHedgeParamsCall__Inputs(this);
  }

  get outputs(): SetHedgeParamsCall__Outputs {
    return new SetHedgeParamsCall__Outputs(this);
  }
}

export class SetHedgeParamsCall__Inputs {
  _call: SetHedgeParamsCall;

  constructor(call: SetHedgeParamsCall) {
    this._call = call;
  }

  get _hedgeParams(): SetHedgeParamsCall_hedgeParamsStruct {
    return this._call.inputValues[0].value.toTuple() as SetHedgeParamsCall_hedgeParamsStruct;
  }
}

export class SetHedgeParamsCall__Outputs {
  _call: SetHedgeParamsCall;

  constructor(call: SetHedgeParamsCall) {
    this._call = call;
  }
}

export class SetHedgeParamsCall_hedgeParamsStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get swapRouter(): Address {
    return this[1].toAddress();
  }

  get targetHealthFactor(): BigInt {
    return this[2].toBigInt();
  }

  get aaveRewardsController(): Address {
    return this[3].toAddress();
  }
}

export class SetKeeperCall extends ethereum.Call {
  get inputs(): SetKeeperCall__Inputs {
    return new SetKeeperCall__Inputs(this);
  }

  get outputs(): SetKeeperCall__Outputs {
    return new SetKeeperCall__Outputs(this);
  }
}

export class SetKeeperCall__Inputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }

  get _newKeeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeeperCall__Outputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }
}

export class SetRebalanceParamsCall extends ethereum.Call {
  get inputs(): SetRebalanceParamsCall__Inputs {
    return new SetRebalanceParamsCall__Inputs(this);
  }

  get outputs(): SetRebalanceParamsCall__Outputs {
    return new SetRebalanceParamsCall__Outputs(this);
  }
}

export class SetRebalanceParamsCall__Inputs {
  _call: SetRebalanceParamsCall;

  constructor(call: SetRebalanceParamsCall) {
    this._call = call;
  }

  get _rsParams(): SetRebalanceParamsCall_rsParamsStruct {
    return this._call.inputValues[0].value.toTuple() as SetRebalanceParamsCall_rsParamsStruct;
  }
}

export class SetRebalanceParamsCall__Outputs {
  _call: SetRebalanceParamsCall;

  constructor(call: SetRebalanceParamsCall) {
    this._call = call;
  }
}

export class SetRebalanceParamsCall_rsParamsStruct extends ethereum.Tuple {
  get rebalanceTimeThreshold(): BigInt {
    return this[0].toBigInt();
  }

  get rebalanceDeltaThreshold(): i32 {
    return this[1].toI32();
  }
}

export class SetThresholdsCall extends ethereum.Call {
  get inputs(): SetThresholdsCall__Inputs {
    return new SetThresholdsCall__Inputs(this);
  }

  get outputs(): SetThresholdsCall__Outputs {
    return new SetThresholdsCall__Outputs(this);
  }
}

export class SetThresholdsCall__Inputs {
  _call: SetThresholdsCall;

  constructor(call: SetThresholdsCall) {
    this._call = call;
  }

  get _ysParams(): SetThresholdsCall_ysParamsStruct {
    return this._call.inputValues[0].value.toTuple() as SetThresholdsCall_ysParamsStruct;
  }
}

export class SetThresholdsCall__Outputs {
  _call: SetThresholdsCall;

  constructor(call: SetThresholdsCall) {
    this._call = call;
  }
}

export class SetThresholdsCall_ysParamsStruct extends ethereum.Tuple {
  get usdcRedeemSlippage(): i32 {
    return this[0].toI32();
  }

  get usdcConversionThreshold(): BigInt {
    return this[1].toBigInt();
  }

  get seniorVaultWethConversionThreshold(): BigInt {
    return this[2].toBigInt();
  }
}

export class SetWithdrawFeeCall extends ethereum.Call {
  get inputs(): SetWithdrawFeeCall__Inputs {
    return new SetWithdrawFeeCall__Inputs(this);
  }

  get outputs(): SetWithdrawFeeCall__Outputs {
    return new SetWithdrawFeeCall__Outputs(this);
  }
}

export class SetWithdrawFeeCall__Inputs {
  _call: SetWithdrawFeeCall;

  constructor(call: SetWithdrawFeeCall) {
    this._call = call;
  }

  get _withdrawFeeBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawFeeCall__Outputs {
  _call: SetWithdrawFeeCall;

  constructor(call: SetWithdrawFeeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
