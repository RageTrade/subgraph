// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ownerAddress", Value.fromBytes(Bytes.empty()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ownerAddress(): Bytes {
    let value = this.get("ownerAddress");
    return value!.toBytes();
  }

  set ownerAddress(value: Bytes) {
    this.set("ownerAddress", Value.fromBytes(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }
}

export class Margin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("rTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("marginAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Margin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Margin entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Margin", id.toString(), this);
    }
  }

  static load(id: string): Margin | null {
    return changetype<Margin | null>(store.get("Margin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get rTokenAddress(): Bytes {
    let value = this.get("rTokenAddress");
    return value!.toBytes();
  }

  set rTokenAddress(value: Bytes) {
    this.set("rTokenAddress", Value.fromBytes(value));
  }

  get marginAmount(): BigInt {
    let value = this.get("marginAmount");
    return value!.toBigInt();
  }

  set marginAmount(value: BigInt) {
    this.set("marginAmount", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt | null {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt | null) {
    if (!value) {
      this.unset("totalProfit");
    } else {
      this.set("totalProfit", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TokenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmountOut", Value.fromBigInt(BigInt.zero()));
    this.set("baseAmountOut", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenPosition", id.toString(), this);
    }
  }

  static load(id: string): TokenPosition | null {
    return changetype<TokenPosition | null>(store.get("TokenPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get baseAmountOut(): BigInt {
    let value = this.get("baseAmountOut");
    return value!.toBigInt();
  }

  set baseAmountOut(value: BigInt) {
    this.set("baseAmountOut", Value.fromBigInt(value));
  }
}

export class LiquidateToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("liquidatorAccountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("liquidationBps", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationPriceX128", Value.fromBigInt(BigInt.zero()));
    this.set("liquidatorPriceX128", Value.fromBigInt(BigInt.zero()));
    this.set("insuranceFundFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidateToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidateToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidateToken", id.toString(), this);
    }
  }

  static load(id: string): LiquidateToken | null {
    return changetype<LiquidateToken | null>(store.get("LiquidateToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get liquidatorAccountNo(): BigInt {
    let value = this.get("liquidatorAccountNo");
    return value!.toBigInt();
  }

  set liquidatorAccountNo(value: BigInt) {
    this.set("liquidatorAccountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get liquidationBps(): BigInt {
    let value = this.get("liquidationBps");
    return value!.toBigInt();
  }

  set liquidationBps(value: BigInt) {
    this.set("liquidationBps", Value.fromBigInt(value));
  }

  get liquidationPriceX128(): BigInt {
    let value = this.get("liquidationPriceX128");
    return value!.toBigInt();
  }

  set liquidationPriceX128(value: BigInt) {
    this.set("liquidationPriceX128", Value.fromBigInt(value));
  }

  get liquidatorPriceX128(): BigInt {
    let value = this.get("liquidatorPriceX128");
    return value!.toBigInt();
  }

  set liquidatorPriceX128(value: BigInt) {
    this.set("liquidatorPriceX128", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value!.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidateRangePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("keeperAddress", Value.fromBytes(Bytes.empty()));
    this.set("liquidationFee", Value.fromBigInt(BigInt.zero()));
    this.set("keeperFee", Value.fromBigInt(BigInt.zero()));
    this.set("insuranceFundFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidateRangePosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidateRangePosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidateRangePosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidateRangePosition | null {
    return changetype<LiquidateRangePosition | null>(
      store.get("LiquidateRangePosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get keeperAddress(): Bytes {
    let value = this.get("keeperAddress");
    return value!.toBytes();
  }

  set keeperAddress(value: Bytes) {
    this.set("keeperAddress", Value.fromBytes(value));
  }

  get liquidationFee(): BigInt {
    let value = this.get("liquidationFee");
    return value!.toBigInt();
  }

  set liquidationFee(value: BigInt) {
    this.set("liquidationFee", Value.fromBigInt(value));
  }

  get keeperFee(): BigInt {
    let value = this.get("keeperFee");
    return value!.toBigInt();
  }

  set keeperFee(value: BigInt) {
    this.set("keeperFee", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value!.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("tickLower", Value.fromBigInt(BigInt.zero()));
    this.set("tickUpper", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAmountOut", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPosition | null {
    return changetype<LiquidityPosition | null>(
      store.get("LiquidityPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get("liquidityDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (!value) {
      this.unset("liquidityDelta");
    } else {
      this.set("liquidityDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get("limitOrderType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (!value) {
      this.unset("limitOrderType");
    } else {
      this.set("limitOrderType", Value.fromString(<string>value));
    }
  }

  get baseAmountOut(): BigInt | null {
    let value = this.get("baseAmountOut");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set baseAmountOut(value: BigInt | null) {
    if (!value) {
      this.unset("baseAmountOut");
    } else {
      this.set("baseAmountOut", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get("fundingPayment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (!value) {
      this.unset("fundingPayment");
    } else {
      this.set("fundingPayment", Value.fromBigInt(<BigInt>value));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get("feePayment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (!value) {
      this.unset("feePayment");
    } else {
      this.set("feePayment", Value.fromBigInt(<BigInt>value));
    }
  }

  get keeperAddress(): Bytes | null {
    let value = this.get("keeperAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (!value) {
      this.unset("keeperAddress");
    } else {
      this.set("keeperAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidationFee(): Bytes | null {
    let value = this.get("liquidationFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidationFee(value: Bytes | null) {
    if (!value) {
      this.unset("liquidationFee");
    } else {
      this.set("liquidationFee", Value.fromBytes(<Bytes>value));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get("keeperFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (!value) {
      this.unset("keeperFee");
    } else {
      this.set("keeperFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get("insuranceFundFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (!value) {
      this.unset("insuranceFundFee");
    } else {
      this.set("insuranceFundFee", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("wrapperAddress", Value.fromBytes(Bytes.empty()));
    this.set("feeAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Protocol entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get wrapperAddress(): Bytes {
    let value = this.get("wrapperAddress");
    return value!.toBytes();
  }

  set wrapperAddress(value: Bytes) {
    this.set("wrapperAddress", Value.fromBytes(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    return value!.toBigInt();
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }
}

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolCount", Value.fromBigInt(BigInt.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalFeesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalFeesETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalValueLockedUSDUntracked",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "totalValueLockedETHUntracked",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Factory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeETH(): BigDecimal {
    let value = this.get("totalVolumeETH");
    return value!.toBigDecimal();
  }

  set totalVolumeETH(value: BigDecimal) {
    this.set("totalVolumeETH", Value.fromBigDecimal(value));
  }

  get totalFeesUSD(): BigDecimal {
    let value = this.get("totalFeesUSD");
    return value!.toBigDecimal();
  }

  set totalFeesUSD(value: BigDecimal) {
    this.set("totalFeesUSD", Value.fromBigDecimal(value));
  }

  get totalFeesETH(): BigDecimal {
    let value = this.get("totalFeesETH");
    return value!.toBigDecimal();
  }

  set totalFeesETH(value: BigDecimal) {
    this.set("totalFeesETH", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get("totalValueLockedETH");
    return value!.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set("totalValueLockedETH", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get totalValueLockedETHUntracked(): BigDecimal {
    let value = this.get("totalValueLockedETHUntracked");
    return value!.toBigDecimal();
  }

  set totalValueLockedETHUntracked(value: BigDecimal) {
    this.set("totalValueLockedETHUntracked", Value.fromBigDecimal(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ethPriceUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bundle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bundle", id.toString(), this);
    }
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get("Bundle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPriceUSD(): BigDecimal {
    let value = this.get("ethPriceUSD");
    return value!.toBigDecimal();
  }

  set ethPriceUSD(value: BigDecimal) {
    this.set("ethPriceUSD", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("volume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("poolCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalValueLockedUSDUntracked",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("derivedETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("whitelistPools", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get derivedETH(): BigDecimal {
    let value = this.get("derivedETH");
    return value!.toBigDecimal();
  }

  set derivedETH(value: BigDecimal) {
    this.set("derivedETH", Value.fromBigDecimal(value));
  }

  get whitelistPools(): Array<string> {
    let value = this.get("whitelistPools");
    return value!.toStringArray();
  }

  set whitelistPools(value: Array<string>) {
    this.set("whitelistPools", Value.fromStringArray(value));
  }

  get tokenDayData(): Array<string> {
    let value = this.get("tokenDayData");
    return value!.toStringArray();
  }

  set tokenDayData(value: Array<string>) {
    this.set("tokenDayData", Value.fromStringArray(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdAtBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("feeTier", Value.fromBigInt(BigInt.zero()));
    this.set("liquidity", Value.fromBigInt(BigInt.zero()));
    this.set("sqrtPrice", Value.fromBigInt(BigInt.zero()));
    this.set("token0Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("token1Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("observationIndex", Value.fromBigInt(BigInt.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("collectedFeesToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collectedFeesToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collectedFeesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalValueLockedUSDUntracked",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("liquidityProviderCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get feeTier(): BigInt {
    let value = this.get("feeTier");
    return value!.toBigInt();
  }

  set feeTier(value: BigInt) {
    this.set("feeTier", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get observationIndex(): BigInt {
    let value = this.get("observationIndex");
    return value!.toBigInt();
  }

  set observationIndex(value: BigInt) {
    this.set("observationIndex", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get("collectedFeesToken0");
    return value!.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set("collectedFeesToken0", Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get("collectedFeesToken1");
    return value!.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set("collectedFeesToken1", Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get("collectedFeesUSD");
    return value!.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set("collectedFeesUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedToken0(): BigDecimal {
    let value = this.get("totalValueLockedToken0");
    return value!.toBigDecimal();
  }

  set totalValueLockedToken0(value: BigDecimal) {
    this.set("totalValueLockedToken0", Value.fromBigDecimal(value));
  }

  get totalValueLockedToken1(): BigDecimal {
    let value = this.get("totalValueLockedToken1");
    return value!.toBigDecimal();
  }

  set totalValueLockedToken1(value: BigDecimal) {
    this.set("totalValueLockedToken1", Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get("totalValueLockedETH");
    return value!.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set("totalValueLockedETH", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value!.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }

  get poolHourData(): Array<string> {
    let value = this.get("poolHourData");
    return value!.toStringArray();
  }

  set poolHourData(value: Array<string>) {
    this.set("poolHourData", Value.fromStringArray(value));
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value!.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get collects(): Array<string> {
    let value = this.get("collects");
    return value!.toStringArray();
  }

  set collects(value: Array<string>) {
    this.set("collects", Value.fromStringArray(value));
  }

  get ticks(): Array<string> {
    let value = this.get("ticks");
    return value!.toStringArray();
  }

  set ticks(value: Array<string>) {
    this.set("ticks", Value.fromStringArray(value));
  }
}

export class Tick extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tickIdx", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("liquidityGross", Value.fromBigInt(BigInt.zero()));
    this.set("liquidityNet", Value.fromBigInt(BigInt.zero()));
    this.set("price0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("price1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collectedFeesToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collectedFeesToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("collectedFeesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdAtBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("liquidityProviderCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tick entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tick entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tick", id.toString(), this);
    }
  }

  static load(id: string): Tick | null {
    return changetype<Tick | null>(store.get("Tick", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (!value) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(<string>value));
    }
  }

  get tickIdx(): BigInt {
    let value = this.get("tickIdx");
    return value!.toBigInt();
  }

  set tickIdx(value: BigInt) {
    this.set("tickIdx", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get price0(): BigDecimal {
    let value = this.get("price0");
    return value!.toBigDecimal();
  }

  set price0(value: BigDecimal) {
    this.set("price0", Value.fromBigDecimal(value));
  }

  get price1(): BigDecimal {
    let value = this.get("price1");
    return value!.toBigDecimal();
  }

  set price1(value: BigDecimal) {
    this.set("price1", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get("collectedFeesToken0");
    return value!.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set("collectedFeesToken0", Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get("collectedFeesToken1");
    return value!.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set("collectedFeesToken1", Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get("collectedFeesUSD");
    return value!.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set("collectedFeesUSD", Value.fromBigDecimal(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value!.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("gasUsed", Value.fromBigInt(BigInt.zero()));
    this.set("gasPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get mints(): Array<string> | null {
    let value = this.get("mints");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mints(value: Array<string> | null) {
    if (!value) {
      this.unset("mints");
    } else {
      this.set("mints", Value.fromStringArray(<Array<string>>value));
    }
  }

  get burns(): Array<string> | null {
    let value = this.get("burns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set burns(value: Array<string> | null) {
    if (!value) {
      this.unset("burns");
    } else {
      this.set("burns", Value.fromStringArray(<Array<string>>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get flashed(): Array<string> | null {
    let value = this.get("flashed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set flashed(value: Array<string> | null) {
    if (!value) {
      this.unset("flashed");
    } else {
      this.set("flashed", Value.fromStringArray(<Array<string>>value));
    }
  }

  get collects(): Array<string> | null {
    let value = this.get("collects");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collects(value: Array<string> | null) {
    if (!value) {
      this.unset("collects");
    } else {
      this.set("collects", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("origin", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("amount0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tickLower", Value.fromBigInt(BigInt.zero()));
    this.set("tickUpper", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Mint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Mint", id.toString(), this);
    }
  }

  static load(id: string): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("origin", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("amount0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tickLower", Value.fromBigInt(BigInt.zero()));
    this.set("tickUpper", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Burn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Burn", id.toString(), this);
    }
  }

  static load(id: string): Burn | null {
    return changetype<Burn | null>(store.get("Burn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("origin", Value.fromBytes(Bytes.empty()));
    this.set("amount0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("sqrtPriceX96", Value.fromBigInt(BigInt.zero()));
    this.set("tick", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get sqrtPriceX96(): BigInt {
    let value = this.get("sqrtPriceX96");
    return value!.toBigInt();
  }

  set sqrtPriceX96(value: BigInt) {
    this.set("sqrtPriceX96", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    return value!.toBigInt();
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Collect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("amount0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tickLower", Value.fromBigInt(BigInt.zero()));
    this.set("tickUpper", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collect entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Collect entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Collect", id.toString(), this);
    }
  }

  static load(id: string): Collect | null {
    return changetype<Collect | null>(store.get("Collect", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Flash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pool", Value.fromString(""));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("amount0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount0Paid", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amount1Paid", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Flash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Flash entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Flash", id.toString(), this);
    }
  }

  static load(id: string): Flash | null {
    return changetype<Flash | null>(store.get("Flash", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get amount0Paid(): BigDecimal {
    let value = this.get("amount0Paid");
    return value!.toBigDecimal();
  }

  set amount0Paid(value: BigDecimal) {
    this.set("amount0Paid", Value.fromBigDecimal(value));
  }

  get amount1Paid(): BigDecimal {
    let value = this.get("amount1Paid");
    return value!.toBigDecimal();
  }

  set amount1Paid(value: BigDecimal) {
    this.set("amount1Paid", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("volumeETH", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSDUntracked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("tvlUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniswapDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniswapDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniswapDayData", id.toString(), this);
    }
  }

  static load(id: string): UniswapDayData | null {
    return changetype<UniswapDayData | null>(store.get("UniswapDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get volumeETH(): BigDecimal {
    let value = this.get("volumeETH");
    return value!.toBigDecimal();
  }

  set volumeETH(value: BigDecimal) {
    this.set("volumeETH", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get volumeUSDUntracked(): BigDecimal {
    let value = this.get("volumeUSDUntracked");
    return value!.toBigDecimal();
  }

  set volumeUSDUntracked(value: BigDecimal) {
    this.set("volumeUSDUntracked", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("liquidity", Value.fromBigInt(BigInt.zero()));
    this.set("sqrtPrice", Value.fromBigInt(BigInt.zero()));
    this.set("token0Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("token1Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tvlUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolDayData", id.toString(), this);
    }
  }

  static load(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(store.get("PoolDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("periodStartUnix", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("liquidity", Value.fromBigInt(BigInt.zero()));
    this.set("sqrtPrice", Value.fromBigInt(BigInt.zero()));
    this.set("token0Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("token1Price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tvlUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolHourData", id.toString(), this);
    }
  }

  static load(id: string): PoolHourData | null {
    return changetype<PoolHourData | null>(store.get("PoolHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TickHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("periodStartUnix", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("tick", Value.fromString(""));
    this.set("liquidityGross", Value.fromBigInt(BigInt.zero()));
    this.set("liquidityNet", Value.fromBigInt(BigInt.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TickHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TickHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TickHourData", id.toString(), this);
    }
  }

  static load(id: string): TickHourData | null {
    return changetype<TickHourData | null>(store.get("TickHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tick(): string {
    let value = this.get("tick");
    return value!.toString();
  }

  set tick(value: string) {
    this.set("tick", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }
}

export class TickDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("tick", Value.fromString(""));
    this.set("liquidityGross", Value.fromBigInt(BigInt.zero()));
    this.set("liquidityNet", Value.fromBigInt(BigInt.zero()));
    this.set("volumeToken0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeToken1", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TickDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TickDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TickDayData", id.toString(), this);
    }
  }

  static load(id: string): TickDayData | null {
    return changetype<TickDayData | null>(store.get("TickDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tick(): string {
    let value = this.get("tick");
    return value!.toString();
  }

  set tick(value: string) {
    this.set("tick", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("token", Value.fromString(""));
    this.set("volume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenDayData", id.toString(), this);
    }
  }

  static load(id: string): TokenDayData | null {
    return changetype<TokenDayData | null>(store.get("TokenDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TokenHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("periodStartUnix", Value.fromI32(0));
    this.set("token", Value.fromString(""));
    this.set("volume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLocked", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenHourData", id.toString(), this);
    }
  }

  static load(id: string): TokenHourData | null {
    return changetype<TokenHourData | null>(store.get("TokenHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}
