// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accounts(): Array<string> {
    let value = this.get("accounts");
    return value.toStringArray();
  }

  set accounts(value: Array<string>) {
    this.set("accounts", Value.fromStringArray(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get margin(): Array<string> {
    let value = this.get("margin");
    return value.toStringArray();
  }

  set margin(value: Array<string>) {
    this.set("margin", Value.fromStringArray(value));
  }

  get tokenPositions(): Array<string> {
    let value = this.get("tokenPositions");
    return value.toStringArray();
  }

  set tokenPositions(value: Array<string>) {
    this.set("tokenPositions", Value.fromStringArray(value));
  }

  get tokenPositionChangeEntries(): Array<string> {
    let value = this.get("tokenPositionChangeEntries");
    return value.toStringArray();
  }

  set tokenPositionChangeEntries(value: Array<string>) {
    this.set("tokenPositionChangeEntries", Value.fromStringArray(value));
  }

  get liquidateToken(): Array<string> {
    let value = this.get("liquidateToken");
    return value.toStringArray();
  }

  set liquidateToken(value: Array<string>) {
    this.set("liquidateToken", Value.fromStringArray(value));
  }

  get liquidateRangePosition(): Array<string> {
    let value = this.get("liquidateRangePosition");
    return value.toStringArray();
  }

  set liquidateRangePosition(value: Array<string>) {
    this.set("liquidateRangePosition", Value.fromStringArray(value));
  }

  get liquidityPosition(): Array<string> {
    let value = this.get("liquidityPosition");
    return value.toStringArray();
  }

  set liquidityPosition(value: Array<string>) {
    this.set("liquidityPosition", Value.fromStringArray(value));
  }

  get liquidityPositionEntry(): Array<string> {
    let value = this.get("liquidityPositionEntry");
    return value.toStringArray();
  }

  set liquidityPositionEntry(value: Array<string>) {
    this.set("liquidityPositionEntry", Value.fromStringArray(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Protocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Protocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Protocol", id.toString(), this);
  }

  static load(id: string): Protocol | null {
    return store.get("Protocol", id) as Protocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tvlUSDC(): BigDecimal {
    let value = this.get("tvlUSDC");
    return value.toBigDecimal();
  }

  set tvlUSDC(value: BigDecimal) {
    this.set("tvlUSDC", Value.fromBigDecimal(value));
  }

  get lpFees(): BigDecimal {
    let value = this.get("lpFees");
    return value.toBigDecimal();
  }

  set lpFees(value: BigDecimal) {
    this.set("lpFees", Value.fromBigDecimal(value));
  }

  get protocolFees(): BigDecimal {
    let value = this.get("protocolFees");
    return value.toBigDecimal();
  }

  set protocolFees(value: BigDecimal) {
    this.set("protocolFees", Value.fromBigDecimal(value));
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collateral entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collateral entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collateral", id.toString(), this);
  }

  static load(id: string): Collateral | null {
    return store.get("Collateral", id) as Collateral | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get rTokenAddress(): Bytes {
    let value = this.get("rTokenAddress");
    return value.toBytes();
  }

  set rTokenAddress(value: Bytes) {
    this.set("rTokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt | null {
    let value = this.get("totalProfit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt | null) {
    if (value === null) {
      this.unset("totalProfit");
    } else {
      this.set("totalProfit", Value.fromBigInt(value as BigInt));
    }
  }

  get marginRatio(): BigInt | null {
    let value = this.get("marginRatio");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marginRatio(value: BigInt | null) {
    if (value === null) {
      this.unset("marginRatio");
    } else {
      this.set("marginRatio", Value.fromBigInt(value as BigInt));
    }
  }
}

export class FundingPaymentRealizedEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save FundingPaymentRealizedEntry entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FundingPaymentRealizedEntry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FundingPaymentRealizedEntry", id.toString(), this);
  }

  static load(id: string): FundingPaymentRealizedEntry | null {
    return store.get(
      "FundingPaymentRealizedEntry",
      id
    ) as FundingPaymentRealizedEntry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingRate(): BigDecimal {
    let value = this.get("fundingRate");
    return value.toBigDecimal();
  }

  set fundingRate(value: BigDecimal) {
    this.set("fundingRate", Value.fromBigDecimal(value));
  }

  get side(): string {
    let value = this.get("side");
    return value.toString();
  }

  set side(value: string) {
    this.set("side", Value.fromString(value));
  }

  get tokenPosition(): string {
    let value = this.get("tokenPosition");
    return value.toString();
  }

  set tokenPosition(value: string) {
    this.set("tokenPosition", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TokenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenPosition", id.toString(), this);
  }

  static load(id: string): TokenPosition | null {
    return store.get("TokenPosition", id) as TokenPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get("rageTradePool");
    return value.toString();
  }

  set rageTradePool(value: string) {
    this.set("rageTradePool", Value.fromString(value));
  }

  get netPosition(): BigInt {
    let value = this.get("netPosition");
    return value.toBigInt();
  }

  set netPosition(value: BigInt) {
    this.set("netPosition", Value.fromBigInt(value));
  }

  get fundingPaymentRealizedEntries(): Array<string> {
    let value = this.get("fundingPaymentRealizedEntries");
    return value.toStringArray();
  }

  set fundingPaymentRealizedEntries(value: Array<string>) {
    this.set("fundingPaymentRealizedEntries", Value.fromStringArray(value));
  }

  get totalRealizedFundingPaymentAmount(): BigInt {
    let value = this.get("totalRealizedFundingPaymentAmount");
    return value.toBigInt();
  }

  set totalRealizedFundingPaymentAmount(value: BigInt) {
    this.set("totalRealizedFundingPaymentAmount", Value.fromBigInt(value));
  }

  get sumAX128CheckPoint(): BigInt {
    let value = this.get("sumAX128CheckPoint");
    return value.toBigInt();
  }

  set sumAX128CheckPoint(value: BigInt) {
    this.set("sumAX128CheckPoint", Value.fromBigInt(value));
  }

  get buyVQuoteAmount(): BigDecimal {
    let value = this.get("buyVQuoteAmount");
    return value.toBigDecimal();
  }

  set buyVQuoteAmount(value: BigDecimal) {
    this.set("buyVQuoteAmount", Value.fromBigDecimal(value));
  }

  get buyVTokenAmount(): BigDecimal {
    let value = this.get("buyVTokenAmount");
    return value.toBigDecimal();
  }

  set buyVTokenAmount(value: BigDecimal) {
    this.set("buyVTokenAmount", Value.fromBigDecimal(value));
  }

  get sellVQuoteAmount(): BigDecimal {
    let value = this.get("sellVQuoteAmount");
    return value.toBigDecimal();
  }

  set sellVQuoteAmount(value: BigDecimal) {
    this.set("sellVQuoteAmount", Value.fromBigDecimal(value));
  }

  get sellVTokenAmount(): BigDecimal {
    let value = this.get("sellVTokenAmount");
    return value.toBigDecimal();
  }

  set sellVTokenAmount(value: BigDecimal) {
    this.set("sellVTokenAmount", Value.fromBigDecimal(value));
  }

  get realizedPnL(): BigDecimal {
    let value = this.get("realizedPnL");
    return value.toBigDecimal();
  }

  set realizedPnL(value: BigDecimal) {
    this.set("realizedPnL", Value.fromBigDecimal(value));
  }
}

export class TokenPositionChangeEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TokenPositionChangeEntry entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenPositionChangeEntry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenPositionChangeEntry", id.toString(), this);
  }

  static load(id: string): TokenPositionChangeEntry | null {
    return store.get(
      "TokenPositionChangeEntry",
      id
    ) as TokenPositionChangeEntry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get("rageTradePool");
    return value.toString();
  }

  set rageTradePool(value: string) {
    this.set("rageTradePool", Value.fromString(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get baseAmountOut(): BigInt {
    let value = this.get("baseAmountOut");
    return value.toBigInt();
  }

  set baseAmountOut(value: BigInt) {
    this.set("baseAmountOut", Value.fromBigInt(value));
  }
}

export class LiquidateToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidateToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidateToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidateToken", id.toString(), this);
  }

  static load(id: string): LiquidateToken | null {
    return store.get("LiquidateToken", id) as LiquidateToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get liquidatorAccountNo(): BigInt {
    let value = this.get("liquidatorAccountNo");
    return value.toBigInt();
  }

  set liquidatorAccountNo(value: BigInt) {
    this.set("liquidatorAccountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get liquidationBps(): BigInt {
    let value = this.get("liquidationBps");
    return value.toBigInt();
  }

  set liquidationBps(value: BigInt) {
    this.set("liquidationBps", Value.fromBigInt(value));
  }

  get liquidationPriceX128(): BigInt {
    let value = this.get("liquidationPriceX128");
    return value.toBigInt();
  }

  set liquidationPriceX128(value: BigInt) {
    this.set("liquidationPriceX128", Value.fromBigInt(value));
  }

  get liquidatorPriceX128(): BigInt {
    let value = this.get("liquidatorPriceX128");
    return value.toBigInt();
  }

  set liquidatorPriceX128(value: BigInt) {
    this.set("liquidatorPriceX128", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidateRangePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidateRangePosition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidateRangePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidateRangePosition", id.toString(), this);
  }

  static load(id: string): LiquidateRangePosition | null {
    return store.get(
      "LiquidateRangePosition",
      id
    ) as LiquidateRangePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get keeperAddress(): Bytes {
    let value = this.get("keeperAddress");
    return value.toBytes();
  }

  set keeperAddress(value: Bytes) {
    this.set("keeperAddress", Value.fromBytes(value));
  }

  get liquidationFee(): BigInt {
    let value = this.get("liquidationFee");
    return value.toBigInt();
  }

  set liquidationFee(value: BigInt) {
    this.set("liquidationFee", Value.fromBigInt(value));
  }

  get keeperFee(): BigInt {
    let value = this.get("keeperFee");
    return value.toBigInt();
  }

  set keeperFee(value: BigInt) {
    this.set("keeperFee", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tickLower(): i32 {
    let value = this.get("tickLower");
    return value.toI32();
  }

  set tickLower(value: i32) {
    this.set("tickLower", Value.fromI32(value));
  }

  get tickUpper(): i32 {
    let value = this.get("tickUpper");
    return value.toI32();
  }

  set tickUpper(value: i32) {
    this.set("tickUpper", Value.fromI32(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get("liquidityDelta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidityDelta");
    } else {
      this.set("liquidityDelta", Value.fromBigInt(value as BigInt));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get("limitOrderType");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (value === null) {
      this.unset("limitOrderType");
    } else {
      this.set("limitOrderType", Value.fromString(value as string));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get("fundingPayment");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (value === null) {
      this.unset("fundingPayment");
    } else {
      this.set("fundingPayment", Value.fromBigInt(value as BigInt));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get("feePayment");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (value === null) {
      this.unset("feePayment");
    } else {
      this.set("feePayment", Value.fromBigInt(value as BigInt));
    }
  }

  get keeperAddress(): Bytes | null {
    let value = this.get("keeperAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("keeperAddress");
    } else {
      this.set("keeperAddress", Value.fromBytes(value as Bytes));
    }
  }

  get liquidationFee(): BigDecimal | null {
    let value = this.get("liquidationFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationFee(value: BigDecimal | null) {
    if (value === null) {
      this.unset("liquidationFee");
    } else {
      this.set("liquidationFee", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get("keeperFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (value === null) {
      this.unset("keeperFee");
    } else {
      this.set("keeperFee", Value.fromBigInt(value as BigInt));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get("insuranceFundFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (value === null) {
      this.unset("insuranceFundFee");
    } else {
      this.set("insuranceFundFee", Value.fromBigInt(value as BigInt));
    }
  }
}

export class LiquidityPositionEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityPositionEntry entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPositionEntry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPositionEntry", id.toString(), this);
  }

  static load(id: string): LiquidityPositionEntry | null {
    return store.get(
      "LiquidityPositionEntry",
      id
    ) as LiquidityPositionEntry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tickLower(): i32 {
    let value = this.get("tickLower");
    return value.toI32();
  }

  set tickLower(value: i32) {
    this.set("tickLower", Value.fromI32(value));
  }

  get tickUpper(): i32 {
    let value = this.get("tickUpper");
    return value.toI32();
  }

  set tickUpper(value: i32) {
    this.set("tickUpper", Value.fromI32(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get("liquidityDelta");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidityDelta");
    } else {
      this.set("liquidityDelta", Value.fromBigInt(value as BigInt));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get("limitOrderType");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (value === null) {
      this.unset("limitOrderType");
    } else {
      this.set("limitOrderType", Value.fromString(value as string));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get("fundingPayment");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (value === null) {
      this.unset("fundingPayment");
    } else {
      this.set("fundingPayment", Value.fromBigInt(value as BigInt));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get("feePayment");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (value === null) {
      this.unset("feePayment");
    } else {
      this.set("feePayment", Value.fromBigInt(value as BigInt));
    }
  }

  get liquidationFee(): BigDecimal | null {
    let value = this.get("liquidationFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationFee(value: BigDecimal | null) {
    if (value === null) {
      this.unset("liquidationFee");
    } else {
      this.set("liquidationFee", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get("keeperFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (value === null) {
      this.unset("keeperFee");
    } else {
      this.set("keeperFee", Value.fromBigInt(value as BigInt));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get("insuranceFundFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (value === null) {
      this.unset("insuranceFundFee");
    } else {
      this.set("insuranceFundFee", Value.fromBigInt(value as BigInt));
    }
  }
}

export class RageTradeFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RageTradeFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RageTradeFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RageTradeFactory", id.toString(), this);
  }

  static load(id: string): RageTradeFactory | null {
    return store.get("RageTradeFactory", id) as RageTradeFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }
}

export class VQuote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VQuote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VQuote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VQuote", id.toString(), this);
  }

  static load(id: string): VQuote | null {
    return store.get("VQuote", id) as VQuote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class RageTradePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RageTradePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RageTradePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RageTradePool", id.toString(), this);
  }

  static load(id: string): RageTradePool | null {
    return store.get("RageTradePool", id) as RageTradePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vToken(): string {
    let value = this.get("vToken");
    return value.toString();
  }

  set vToken(value: string) {
    this.set("vToken", Value.fromString(value));
  }

  get vPool(): string {
    let value = this.get("vPool");
    return value.toString();
  }

  set vPool(value: string) {
    this.set("vPool", Value.fromString(value));
  }

  get vPoolWrapper(): string {
    let value = this.get("vPoolWrapper");
    return value.toString();
  }

  set vPoolWrapper(value: string) {
    this.set("vPoolWrapper", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    return value.toBigInt();
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get fundingRate(): BigInt {
    let value = this.get("fundingRate");
    return value.toBigInt();
  }

  set fundingRate(value: BigInt) {
    this.set("fundingRate", Value.fromBigInt(value));
  }

  get volume24H(): BigInt {
    let value = this.get("volume24H");
    return value.toBigInt();
  }

  set volume24H(value: BigInt) {
    this.set("volume24H", Value.fromBigInt(value));
  }

  get priceChange24H(): BigInt {
    let value = this.get("priceChange24H");
    return value.toBigInt();
  }

  set priceChange24H(value: BigInt) {
    this.set("priceChange24H", Value.fromBigInt(value));
  }

  get sumAX128(): BigInt {
    let value = this.get("sumAX128");
    return value.toBigInt();
  }

  set sumAX128(value: BigInt) {
    this.set("sumAX128", Value.fromBigInt(value));
  }

  get sumBX128(): BigInt {
    let value = this.get("sumBX128");
    return value.toBigInt();
  }

  set sumBX128(value: BigInt) {
    this.set("sumBX128", Value.fromBigInt(value));
  }

  get sumFpX128(): BigInt {
    let value = this.get("sumFpX128");
    return value.toBigInt();
  }

  set sumFpX128(value: BigInt) {
    this.set("sumFpX128", Value.fromBigInt(value));
  }

  get sumFeeX128(): BigInt {
    let value = this.get("sumFeeX128");
    return value.toBigInt();
  }

  set sumFeeX128(value: BigInt) {
    this.set("sumFeeX128", Value.fromBigInt(value));
  }

  get hourData(): string {
    let value = this.get("hourData");
    return value.toString();
  }

  set hourData(value: string) {
    this.set("hourData", Value.fromString(value));
  }

  get dayData(): string {
    let value = this.get("dayData");
    return value.toString();
  }

  set dayData(value: string) {
    this.set("dayData", Value.fromString(value));
  }
}

export class VToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VToken", id.toString(), this);
  }

  static load(id: string): VToken | null {
    return store.get("VToken", id) as VToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class VPoolWrapper extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VPoolWrapper entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VPoolWrapper entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VPoolWrapper", id.toString(), this);
  }

  static load(id: string): VPoolWrapper | null {
    return store.get("VPoolWrapper", id) as VPoolWrapper | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Collection entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Collection entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Collection", id.toString(), this);
  }

  static load(id: string): Collection | null {
    return store.get("Collection", id) as Collection | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): Array<string> {
    let value = this.get("data");
    return value.toStringArray();
  }

  set data(value: Array<string>) {
    this.set("data", Value.fromStringArray(value));
  }
}

export class Candle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Candle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Candle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Candle", id.toString(), this);
  }

  static load(id: string): Candle | null {
    return store.get("Candle", id) as Candle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get periodStartUnix(): BigInt {
    let value = this.get("periodStartUnix");
    return value.toBigInt();
  }

  set periodStartUnix(value: BigInt) {
    this.set("periodStartUnix", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    return value.toBigInt();
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get sumAX128(): BigInt {
    let value = this.get("sumAX128");
    return value.toBigInt();
  }

  set sumAX128(value: BigInt) {
    this.set("sumAX128", Value.fromBigInt(value));
  }

  get sumBX128(): BigInt {
    let value = this.get("sumBX128");
    return value.toBigInt();
  }

  set sumBX128(value: BigInt) {
    this.set("sumBX128", Value.fromBigInt(value));
  }

  get sumFpX128(): BigInt {
    let value = this.get("sumFpX128");
    return value.toBigInt();
  }

  set sumFpX128(value: BigInt) {
    this.set("sumFpX128", Value.fromBigInt(value));
  }

  get sumFeeX128(): BigInt {
    let value = this.get("sumFeeX128");
    return value.toBigInt();
  }

  set sumFeeX128(value: BigInt) {
    this.set("sumFeeX128", Value.fromBigInt(value));
  }

  get volumeVToken(): BigDecimal {
    let value = this.get("volumeVToken");
    return value.toBigDecimal();
  }

  set volumeVToken(value: BigDecimal) {
    this.set("volumeVToken", Value.fromBigDecimal(value));
  }

  get volumeUSDC(): BigDecimal {
    let value = this.get("volumeUSDC");
    return value.toBigDecimal();
  }

  set volumeUSDC(value: BigDecimal) {
    this.set("volumeUSDC", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }
}

export class UniswapV3Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Factory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Factory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Factory", id.toString(), this);
  }

  static load(id: string): UniswapV3Factory | null {
    return store.get("UniswapV3Factory", id) as UniswapV3Factory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeETH(): BigDecimal {
    let value = this.get("totalVolumeETH");
    return value.toBigDecimal();
  }

  set totalVolumeETH(value: BigDecimal) {
    this.set("totalVolumeETH", Value.fromBigDecimal(value));
  }

  get totalFeesUSD(): BigDecimal {
    let value = this.get("totalFeesUSD");
    return value.toBigDecimal();
  }

  set totalFeesUSD(value: BigDecimal) {
    this.set("totalFeesUSD", Value.fromBigDecimal(value));
  }

  get totalFeesETH(): BigDecimal {
    let value = this.get("totalFeesETH");
    return value.toBigDecimal();
  }

  set totalFeesETH(value: BigDecimal) {
    this.set("totalFeesETH", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get("totalValueLockedETH");
    return value.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set("totalValueLockedETH", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get totalValueLockedETHUntracked(): BigDecimal {
    let value = this.get("totalValueLockedETHUntracked");
    return value.toBigDecimal();
  }

  set totalValueLockedETHUntracked(value: BigDecimal) {
    this.set("totalValueLockedETHUntracked", Value.fromBigDecimal(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bundle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bundle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bundle", id.toString(), this);
  }

  static load(id: string): Bundle | null {
    return store.get("Bundle", id) as Bundle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPriceUSD(): BigDecimal {
    let value = this.get("ethPriceUSD");
    return value.toBigDecimal();
  }

  set ethPriceUSD(value: BigDecimal) {
    this.set("ethPriceUSD", Value.fromBigDecimal(value));
  }
}

export class UniswapV3Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Token", id.toString(), this);
  }

  static load(id: string): UniswapV3Token | null {
    return store.get("UniswapV3Token", id) as UniswapV3Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get derivedETH(): BigDecimal {
    let value = this.get("derivedETH");
    return value.toBigDecimal();
  }

  set derivedETH(value: BigDecimal) {
    this.set("derivedETH", Value.fromBigDecimal(value));
  }

  get whitelistPools(): Array<string> {
    let value = this.get("whitelistPools");
    return value.toStringArray();
  }

  set whitelistPools(value: Array<string>) {
    this.set("whitelistPools", Value.fromStringArray(value));
  }

  get tokenDayData(): Array<string> {
    let value = this.get("tokenDayData");
    return value.toStringArray();
  }

  set tokenDayData(value: Array<string>) {
    this.set("tokenDayData", Value.fromStringArray(value));
  }
}

export class Temp_UniswapV3_Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Temp_UniswapV3_Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Temp_UniswapV3_Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Temp_UniswapV3_Pool", id.toString(), this);
  }

  static load(id: string): Temp_UniswapV3_Pool | null {
    return store.get("Temp_UniswapV3_Pool", id) as Temp_UniswapV3_Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get("rageTradePool");
    return value.toString();
  }

  set rageTradePool(value: string) {
    this.set("rageTradePool", Value.fromString(value));
  }
}

export class UniswapV3Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Pool", id.toString(), this);
  }

  static load(id: string): UniswapV3Pool | null {
    return store.get("UniswapV3Pool", id) as UniswapV3Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get feeTier(): BigInt {
    let value = this.get("feeTier");
    return value.toBigInt();
  }

  set feeTier(value: BigInt) {
    this.set("feeTier", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (value === null) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(value as BigInt));
    }
  }

  get observationIndex(): BigInt {
    let value = this.get("observationIndex");
    return value.toBigInt();
  }

  set observationIndex(value: BigInt) {
    this.set("observationIndex", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get("collectedFeesToken0");
    return value.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set("collectedFeesToken0", Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get("collectedFeesToken1");
    return value.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set("collectedFeesToken1", Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get("collectedFeesUSD");
    return value.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set("collectedFeesUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedToken0(): BigDecimal {
    let value = this.get("totalValueLockedToken0");
    return value.toBigDecimal();
  }

  set totalValueLockedToken0(value: BigDecimal) {
    this.set("totalValueLockedToken0", Value.fromBigDecimal(value));
  }

  get totalValueLockedToken1(): BigDecimal {
    let value = this.get("totalValueLockedToken1");
    return value.toBigDecimal();
  }

  set totalValueLockedToken1(value: BigDecimal) {
    this.set("totalValueLockedToken1", Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get("totalValueLockedETH");
    return value.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set("totalValueLockedETH", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get("totalValueLockedUSDUntracked");
    return value.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set("totalValueLockedUSDUntracked", Value.fromBigDecimal(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }

  get poolHourData(): Array<string> {
    let value = this.get("poolHourData");
    return value.toStringArray();
  }

  set poolHourData(value: Array<string>) {
    this.set("poolHourData", Value.fromStringArray(value));
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get collects(): Array<string> {
    let value = this.get("collects");
    return value.toStringArray();
  }

  set collects(value: Array<string>) {
    this.set("collects", Value.fromStringArray(value));
  }

  get ticks(): Array<string> {
    let value = this.get("ticks");
    return value.toStringArray();
  }

  set ticks(value: Array<string>) {
    this.set("ticks", Value.fromStringArray(value));
  }
}

export class UniswapV3Tick extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Tick entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Tick entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Tick", id.toString(), this);
  }

  static load(id: string): UniswapV3Tick | null {
    return store.get("UniswapV3Tick", id) as UniswapV3Tick | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(value as string));
    }
  }

  get tickIdx(): BigInt {
    let value = this.get("tickIdx");
    return value.toBigInt();
  }

  set tickIdx(value: BigInt) {
    this.set("tickIdx", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get price0(): BigDecimal {
    let value = this.get("price0");
    return value.toBigDecimal();
  }

  set price0(value: BigDecimal) {
    this.set("price0", Value.fromBigDecimal(value));
  }

  get price1(): BigDecimal {
    let value = this.get("price1");
    return value.toBigDecimal();
  }

  set price1(value: BigDecimal) {
    this.set("price1", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get("collectedFeesToken0");
    return value.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set("collectedFeesToken0", Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get("collectedFeesToken1");
    return value.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set("collectedFeesToken1", Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get("collectedFeesUSD");
    return value.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set("collectedFeesUSD", Value.fromBigDecimal(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get("liquidityProviderCount");
    return value.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set("liquidityProviderCount", Value.fromBigInt(value));
  }
}

export class UniswapV3Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV3Transaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Transaction", id.toString(), this);
  }

  static load(id: string): UniswapV3Transaction | null {
    return store.get("UniswapV3Transaction", id) as UniswapV3Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get mints(): Array<string | null> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string | null>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string | null> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string | null>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get collects(): Array<string | null> {
    let value = this.get("collects");
    return value.toStringArray();
  }

  set collects(value: Array<string | null>) {
    this.set("collects", Value.fromStringArray(value));
  }
}

export class UniswapV3Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Mint", id.toString(), this);
  }

  static load(id: string): UniswapV3Mint | null {
    return store.get("UniswapV3Mint", id) as UniswapV3Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UniswapV3Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Burn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Burn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Burn", id.toString(), this);
  }

  static load(id: string): UniswapV3Burn | null {
    return store.get("UniswapV3Burn", id) as UniswapV3Burn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UniswapV3Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Swap", id.toString(), this);
  }

  static load(id: string): UniswapV3Swap | null {
    return store.get("UniswapV3Swap", id) as UniswapV3Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get("origin");
    return value.toBytes();
  }

  set origin(value: Bytes) {
    this.set("origin", Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get sqrtPriceX96(): BigInt {
    let value = this.get("sqrtPriceX96");
    return value.toBigInt();
  }

  set sqrtPriceX96(value: BigInt) {
    this.set("sqrtPriceX96", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    return value.toBigInt();
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UniswapV3Collect extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Collect entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Collect entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Collect", id.toString(), this);
  }

  static load(id: string): UniswapV3Collect | null {
    return store.get("UniswapV3Collect", id) as UniswapV3Collect | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UniswapV3Flash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapV3Flash entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV3Flash entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV3Flash", id.toString(), this);
  }

  static load(id: string): UniswapV3Flash | null {
    return store.get("UniswapV3Flash", id) as UniswapV3Flash | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get("amount0");
    return value.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set("amount0", Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get("amount1");
    return value.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set("amount1", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get amount0Paid(): BigDecimal {
    let value = this.get("amount0Paid");
    return value.toBigDecimal();
  }

  set amount0Paid(value: BigDecimal) {
    this.set("amount0Paid", Value.fromBigDecimal(value));
  }

  get amount1Paid(): BigDecimal {
    let value = this.get("amount1Paid");
    return value.toBigDecimal();
  }

  set amount1Paid(value: BigDecimal) {
    this.set("amount1Paid", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UniswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapDayData", id.toString(), this);
  }

  static load(id: string): UniswapDayData | null {
    return store.get("UniswapDayData", id) as UniswapDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get volumeETH(): BigDecimal {
    let value = this.get("volumeETH");
    return value.toBigDecimal();
  }

  set volumeETH(value: BigDecimal) {
    this.set("volumeETH", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get volumeUSDUntracked(): BigDecimal {
    let value = this.get("volumeUSDUntracked");
    return value.toBigDecimal();
  }

  set volumeUSDUntracked(value: BigDecimal) {
    this.set("volumeUSDUntracked", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolDayData", id.toString(), this);
  }

  static load(id: string): PoolDayData | null {
    return store.get("PoolDayData", id) as PoolDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (value === null) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(value as BigInt));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolHourData", id.toString(), this);
  }

  static load(id: string): PoolHourData | null {
    return store.get("PoolHourData", id) as PoolHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get("token0Price");
    return value.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set("token0Price", Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get("token1Price");
    return value.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set("token1Price", Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (value === null) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(value as BigInt));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TickHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TickHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TickHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TickHourData", id.toString(), this);
  }

  static load(id: string): TickHourData | null {
    return store.get("TickHourData", id) as TickHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tick(): string {
    let value = this.get("tick");
    return value.toString();
  }

  set tick(value: string) {
    this.set("tick", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }
}

export class TickDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TickDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TickDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TickDayData", id.toString(), this);
  }

  static load(id: string): TickDayData | null {
    return store.get("TickDayData", id) as TickDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tick(): string {
    let value = this.get("tick");
    return value.toString();
  }

  set tick(value: string) {
    this.set("tick", Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    return value.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    return value.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get("volumeToken0");
    return value.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set("volumeToken0", Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get("volumeToken1");
    return value.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set("volumeToken1", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDayData", id.toString(), this);
  }

  static load(id: string): TokenDayData | null {
    return store.get("TokenDayData", id) as TokenDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TokenHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenHourData", id.toString(), this);
  }

  static load(id: string): TokenHourData | null {
    return store.get("TokenHourData", id) as TokenHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get("periodStartUnix");
    return value.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set("periodStartUnix", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get("untrackedVolumeUSD");
    return value.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set("untrackedVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get("totalValueLocked");
    return value.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}
