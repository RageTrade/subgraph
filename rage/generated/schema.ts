// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("ownerAddress", Value.fromBytes(Bytes.empty()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ownerAddress(): Bytes {
    let value = this.get("ownerAddress");
    return value!.toBytes();
  }

  set ownerAddress(value: Bytes) {
    this.set("ownerAddress", Value.fromBytes(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }
}

export class Margin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("rTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("marginAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Margin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Margin entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Margin", id.toString(), this);
    }
  }

  static load(id: string): Margin | null {
    return changetype<Margin | null>(store.get("Margin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get rTokenAddress(): Bytes {
    let value = this.get("rTokenAddress");
    return value!.toBytes();
  }

  set rTokenAddress(value: Bytes) {
    this.set("rTokenAddress", Value.fromBytes(value));
  }

  get marginAmount(): BigInt {
    let value = this.get("marginAmount");
    return value!.toBigInt();
  }

  set marginAmount(value: BigInt) {
    this.set("marginAmount", Value.fromBigInt(value));
  }

  get totalProfit(): BigInt | null {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt | null) {
    if (!value) {
      this.unset("totalProfit");
    } else {
      this.set("totalProfit", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TokenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmountOut", Value.fromBigInt(BigInt.zero()));
    this.set("baseAmountOut", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenPosition", id.toString(), this);
    }
  }

  static load(id: string): TokenPosition | null {
    return changetype<TokenPosition | null>(store.get("TokenPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get baseAmountOut(): BigInt {
    let value = this.get("baseAmountOut");
    return value!.toBigInt();
  }

  set baseAmountOut(value: BigInt) {
    this.set("baseAmountOut", Value.fromBigInt(value));
  }
}

export class LiquidateToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("liquidatorAccountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("liquidationBps", Value.fromBigInt(BigInt.zero()));
    this.set("liquidationPriceX128", Value.fromBigInt(BigInt.zero()));
    this.set("liquidatorPriceX128", Value.fromBigInt(BigInt.zero()));
    this.set("insuranceFundFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidateToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidateToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidateToken", id.toString(), this);
    }
  }

  static load(id: string): LiquidateToken | null {
    return changetype<LiquidateToken | null>(store.get("LiquidateToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get liquidatorAccountNo(): BigInt {
    let value = this.get("liquidatorAccountNo");
    return value!.toBigInt();
  }

  set liquidatorAccountNo(value: BigInt) {
    this.set("liquidatorAccountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get liquidationBps(): BigInt {
    let value = this.get("liquidationBps");
    return value!.toBigInt();
  }

  set liquidationBps(value: BigInt) {
    this.set("liquidationBps", Value.fromBigInt(value));
  }

  get liquidationPriceX128(): BigInt {
    let value = this.get("liquidationPriceX128");
    return value!.toBigInt();
  }

  set liquidationPriceX128(value: BigInt) {
    this.set("liquidationPriceX128", Value.fromBigInt(value));
  }

  get liquidatorPriceX128(): BigInt {
    let value = this.get("liquidatorPriceX128");
    return value!.toBigInt();
  }

  set liquidatorPriceX128(value: BigInt) {
    this.set("liquidatorPriceX128", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value!.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidateRangePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("keeperAddress", Value.fromBytes(Bytes.empty()));
    this.set("liquidationFee", Value.fromBigInt(BigInt.zero()));
    this.set("keeperFee", Value.fromBigInt(BigInt.zero()));
    this.set("insuranceFundFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LiquidateRangePosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidateRangePosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidateRangePosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidateRangePosition | null {
    return changetype<LiquidateRangePosition | null>(
      store.get("LiquidateRangePosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get keeperAddress(): Bytes {
    let value = this.get("keeperAddress");
    return value!.toBytes();
  }

  set keeperAddress(value: Bytes) {
    this.set("keeperAddress", Value.fromBytes(value));
  }

  get liquidationFee(): BigInt {
    let value = this.get("liquidationFee");
    return value!.toBigInt();
  }

  set liquidationFee(value: BigInt) {
    this.set("liquidationFee", Value.fromBigInt(value));
  }

  get keeperFee(): BigInt {
    let value = this.get("keeperFee");
    return value!.toBigInt();
  }

  set keeperFee(value: BigInt) {
    this.set("keeperFee", Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get("insuranceFundFee");
    return value!.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set("insuranceFundFee", Value.fromBigInt(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("accountNo", Value.fromBigInt(BigInt.zero()));
    this.set("vToken", Value.fromBytes(Bytes.empty()));
    this.set("tickLower", Value.fromBigInt(BigInt.zero()));
    this.set("tickUpper", Value.fromBigInt(BigInt.zero()));
    this.set("tokenAmountOut", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPosition | null {
    return changetype<LiquidityPosition | null>(
      store.get("LiquidityPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get accountNo(): BigInt {
    let value = this.get("accountNo");
    return value!.toBigInt();
  }

  set accountNo(value: BigInt) {
    this.set("accountNo", Value.fromBigInt(value));
  }

  get vToken(): Bytes {
    let value = this.get("vToken");
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set("vToken", Value.fromBytes(value));
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get("tokenAmountOut");
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set("tokenAmountOut", Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get("liquidityDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (!value) {
      this.unset("liquidityDelta");
    } else {
      this.set("liquidityDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get("limitOrderType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (!value) {
      this.unset("limitOrderType");
    } else {
      this.set("limitOrderType", Value.fromString(<string>value));
    }
  }

  get baseAmountOut(): BigInt | null {
    let value = this.get("baseAmountOut");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set baseAmountOut(value: BigInt | null) {
    if (!value) {
      this.unset("baseAmountOut");
    } else {
      this.set("baseAmountOut", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get("fundingPayment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (!value) {
      this.unset("fundingPayment");
    } else {
      this.set("fundingPayment", Value.fromBigInt(<BigInt>value));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get("feePayment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (!value) {
      this.unset("feePayment");
    } else {
      this.set("feePayment", Value.fromBigInt(<BigInt>value));
    }
  }

  get keeperAddress(): Bytes | null {
    let value = this.get("keeperAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (!value) {
      this.unset("keeperAddress");
    } else {
      this.set("keeperAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidationFee(): Bytes | null {
    let value = this.get("liquidationFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidationFee(value: Bytes | null) {
    if (!value) {
      this.unset("liquidationFee");
    } else {
      this.set("liquidationFee", Value.fromBytes(<Bytes>value));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get("keeperFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (!value) {
      this.unset("keeperFee");
    } else {
      this.set("keeperFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get("insuranceFundFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (!value) {
      this.unset("insuranceFundFee");
    } else {
      this.set("insuranceFundFee", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("wrapperAddress", Value.fromBytes(Bytes.empty()));
    this.set("feeAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Protocol entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get wrapperAddress(): Bytes {
    let value = this.get("wrapperAddress");
    return value!.toBytes();
  }

  set wrapperAddress(value: Bytes) {
    this.set("wrapperAddress", Value.fromBytes(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    return value!.toBigInt();
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }
}
