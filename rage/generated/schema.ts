// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Owner entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Owner', id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get('Owner', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get accounts(): Array<string> {
    let value = this.get('accounts');
    return value!.toStringArray();
  }

  set accounts(value: Array<string>) {
    this.set('accounts', Value.fromStringArray(value));
  }

  get vaultDepositWithdrawEntriesCount(): BigInt {
    let value = this.get('vaultDepositWithdrawEntriesCount');
    return value!.toBigInt();
  }

  set vaultDepositWithdrawEntriesCount(value: BigInt) {
    this.set('vaultDepositWithdrawEntriesCount', Value.fromBigInt(value));
  }

  get vaultDepositWithdrawEntries(): Array<string> {
    let value = this.get('vaultDepositWithdrawEntries');
    return value!.toStringArray();
  }

  set vaultDepositWithdrawEntries(value: Array<string>) {
    this.set('vaultDepositWithdrawEntries', Value.fromStringArray(value));
  }

  get vaultAccounts(): Array<string> {
    let value = this.get('vaultAccounts');
    return value!.toStringArray();
  }

  set vaultAccounts(value: Array<string>) {
    this.set('vaultAccounts', Value.fromStringArray(value));
  }

  get vaultTransferEntries(): Array<string> {
    let value = this.get('vaultTransferEntries');
    return value!.toStringArray();
  }

  set vaultTransferEntries(value: Array<string>) {
    this.set('vaultTransferEntries', Value.fromStringArray(value));
  }
}

export class VaultTransferEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultTransferEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultTransferEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultTransferEntry', id.toString(), this);
    }
  }

  static load(id: string): VaultTransferEntry | null {
    return changetype<VaultTransferEntry | null>(store.get('VaultTransferEntry', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get vault(): string {
    let value = this.get('vault');
    return value!.toString();
  }

  set vault(value: string) {
    this.set('vault', Value.fromString(value));
  }

  get owner(): string {
    let value = this.get('owner');
    return value!.toString();
  }

  set owner(value: string) {
    this.set('owner', Value.fromString(value));
  }

  get party(): string {
    let value = this.get('party');
    return value!.toString();
  }

  set party(value: string) {
    this.set('party', Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get('value');
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set('value', Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get('action');
    return value!.toString();
  }

  set action(value: string) {
    this.set('action', Value.fromString(value));
  }
}

export class VaultAccount extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultAccount entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultAccount', id.toString(), this);
    }
  }

  static load(id: string): VaultAccount | null {
    return changetype<VaultAccount | null>(store.get('VaultAccount', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get owner(): string {
    let value = this.get('owner');
    return value!.toString();
  }

  set owner(value: string) {
    this.set('owner', Value.fromString(value));
  }

  get vault(): string {
    let value = this.get('vault');
    return value!.toString();
  }

  set vault(value: string) {
    this.set('vault', Value.fromString(value));
  }

  get assetBalance(): BigDecimal {
    let value = this.get('assetBalance');
    return value!.toBigDecimal();
  }

  set assetBalance(value: BigDecimal) {
    this.set('assetBalance', Value.fromBigDecimal(value));
  }

  get assetEntryPrice(): BigDecimal {
    let value = this.get('assetEntryPrice');
    return value!.toBigDecimal();
  }

  set assetEntryPrice(value: BigDecimal) {
    this.set('assetEntryPrice', Value.fromBigDecimal(value));
  }

  get assetEntryPrice_Numerator(): BigDecimal {
    let value = this.get('assetEntryPrice_Numerator');
    return value!.toBigDecimal();
  }

  set assetEntryPrice_Numerator(value: BigDecimal) {
    this.set('assetEntryPrice_Numerator', Value.fromBigDecimal(value));
  }

  get assetEntryPrice_Denominator(): BigDecimal {
    let value = this.get('assetEntryPrice_Denominator');
    return value!.toBigDecimal();
  }

  set assetEntryPrice_Denominator(value: BigDecimal) {
    this.set('assetEntryPrice_Denominator', Value.fromBigDecimal(value));
  }

  get shareBalance(): BigDecimal {
    let value = this.get('shareBalance');
    return value!.toBigDecimal();
  }

  set shareBalance(value: BigDecimal) {
    this.set('shareBalance', Value.fromBigDecimal(value));
  }

  get shareEntryPrice(): BigDecimal {
    let value = this.get('shareEntryPrice');
    return value!.toBigDecimal();
  }

  set shareEntryPrice(value: BigDecimal) {
    this.set('shareEntryPrice', Value.fromBigDecimal(value));
  }

  get shareEntryPrice_Numerator(): BigDecimal {
    let value = this.get('shareEntryPrice_Numerator');
    return value!.toBigDecimal();
  }

  set shareEntryPrice_Numerator(value: BigDecimal) {
    this.set('shareEntryPrice_Numerator', Value.fromBigDecimal(value));
  }

  get shareEntryPrice_Denominator(): BigDecimal {
    let value = this.get('shareEntryPrice_Denominator');
    return value!.toBigDecimal();
  }

  set shareEntryPrice_Denominator(value: BigDecimal) {
    this.set('shareEntryPrice_Denominator', Value.fromBigDecimal(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Account entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Account', id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get('Account', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get('owner');
    return value!.toString();
  }

  set owner(value: string) {
    this.set('owner', Value.fromString(value));
  }

  get vQuoteBalance(): BigDecimal {
    let value = this.get('vQuoteBalance');
    return value!.toBigDecimal();
  }

  set vQuoteBalance(value: BigDecimal) {
    this.set('vQuoteBalance', Value.fromBigDecimal(value));
  }

  get marginBalance(): BigDecimal {
    let value = this.get('marginBalance');
    return value!.toBigDecimal();
  }

  set marginBalance(value: BigDecimal) {
    this.set('marginBalance', Value.fromBigDecimal(value));
  }

  get totalLiquidityPositionEarningsRealized(): BigDecimal {
    let value = this.get('totalLiquidityPositionEarningsRealized');
    return value!.toBigDecimal();
  }

  set totalLiquidityPositionEarningsRealized(value: BigDecimal) {
    this.set('totalLiquidityPositionEarningsRealized', Value.fromBigDecimal(value));
  }

  get tokenPositionChangeEntriesCount(): BigInt {
    let value = this.get('tokenPositionChangeEntriesCount');
    return value!.toBigInt();
  }

  set tokenPositionChangeEntriesCount(value: BigInt) {
    this.set('tokenPositionChangeEntriesCount', Value.fromBigInt(value));
  }

  get tokenPositionChangeEntries(): Array<string> {
    let value = this.get('tokenPositionChangeEntries');
    return value!.toStringArray();
  }

  set tokenPositionChangeEntries(value: Array<string>) {
    this.set('tokenPositionChangeEntries', Value.fromStringArray(value));
  }

  get margin(): Array<string> {
    let value = this.get('margin');
    return value!.toStringArray();
  }

  set margin(value: Array<string>) {
    this.set('margin', Value.fromStringArray(value));
  }

  get fundingPaymentRealizedEntriesCount(): BigInt {
    let value = this.get('fundingPaymentRealizedEntriesCount');
    return value!.toBigInt();
  }

  set fundingPaymentRealizedEntriesCount(value: BigInt) {
    this.set('fundingPaymentRealizedEntriesCount', Value.fromBigInt(value));
  }

  get fundingPaymentRealizedEntries(): Array<string> {
    let value = this.get('fundingPaymentRealizedEntries');
    return value!.toStringArray();
  }

  set fundingPaymentRealizedEntries(value: Array<string>) {
    this.set('fundingPaymentRealizedEntries', Value.fromStringArray(value));
  }

  get tokenPositionLiquidatedEntriesCount(): BigInt {
    let value = this.get('tokenPositionLiquidatedEntriesCount');
    return value!.toBigInt();
  }

  set tokenPositionLiquidatedEntriesCount(value: BigInt) {
    this.set('tokenPositionLiquidatedEntriesCount', Value.fromBigInt(value));
  }

  get tokenPositionLiquidatedEntries(): Array<string> {
    let value = this.get('tokenPositionLiquidatedEntries');
    return value!.toStringArray();
  }

  set tokenPositionLiquidatedEntries(value: Array<string>) {
    this.set('tokenPositionLiquidatedEntries', Value.fromStringArray(value));
  }

  get tokenPositions(): Array<string> {
    let value = this.get('tokenPositions');
    return value!.toStringArray();
  }

  set tokenPositions(value: Array<string>) {
    this.set('tokenPositions', Value.fromStringArray(value));
  }

  get marginChangeEntriesCount(): BigInt {
    let value = this.get('marginChangeEntriesCount');
    return value!.toBigInt();
  }

  set marginChangeEntriesCount(value: BigInt) {
    this.set('marginChangeEntriesCount', Value.fromBigInt(value));
  }

  get marginChangeEntries(): Array<string> {
    let value = this.get('marginChangeEntries');
    return value!.toStringArray();
  }

  set marginChangeEntries(value: Array<string>) {
    this.set('marginChangeEntries', Value.fromStringArray(value));
  }

  get liquidateToken(): Array<string> {
    let value = this.get('liquidateToken');
    return value!.toStringArray();
  }

  set liquidateToken(value: Array<string>) {
    this.set('liquidateToken', Value.fromStringArray(value));
  }

  get liquidateRangePosition(): Array<string> {
    let value = this.get('liquidateRangePosition');
    return value!.toStringArray();
  }

  set liquidateRangePosition(value: Array<string>) {
    this.set('liquidateRangePosition', Value.fromStringArray(value));
  }

  get liquidityPosition(): Array<string> {
    let value = this.get('liquidityPosition');
    return value!.toStringArray();
  }

  set liquidityPosition(value: Array<string>) {
    this.set('liquidityPosition', Value.fromStringArray(value));
  }

  get liquidityPositionEntry(): Array<string> {
    let value = this.get('liquidityPositionEntry');
    return value!.toStringArray();
  }

  set liquidityPositionEntry(value: Array<string>) {
    this.set('liquidityPositionEntry', Value.fromStringArray(value));
  }
}

export class ERC20Token extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save ERC20Token entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('ERC20Token', id.toString(), this);
    }
  }

  static load(id: string): ERC20Token | null {
    return changetype<ERC20Token | null>(store.get('ERC20Token', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get('symbol');
    return value!.toString();
  }

  set symbol(value: string) {
    this.set('symbol', Value.fromString(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get('decimals');
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set('decimals', Value.fromBigInt(value));
  }
}

export class VQuote extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VQuote entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VQuote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VQuote', id.toString(), this);
    }
  }

  static load(id: string): VQuote | null {
    return changetype<VQuote | null>(store.get('VQuote', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get('symbol');
    return value!.toString();
  }

  set symbol(value: string) {
    this.set('symbol', Value.fromString(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get('decimals');
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set('decimals', Value.fromBigInt(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Protocol entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Protocol', id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get('Protocol', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get tvlUSDC(): BigDecimal {
    let value = this.get('tvlUSDC');
    return value!.toBigDecimal();
  }

  set tvlUSDC(value: BigDecimal) {
    this.set('tvlUSDC', Value.fromBigDecimal(value));
  }

  get lpFees(): BigDecimal {
    let value = this.get('lpFees');
    return value!.toBigDecimal();
  }

  set lpFees(value: BigDecimal) {
    this.set('lpFees', Value.fromBigDecimal(value));
  }

  get protocolFees(): BigDecimal {
    let value = this.get('protocolFees');
    return value!.toBigDecimal();
  }

  set protocolFees(value: BigDecimal) {
    this.set('protocolFees', Value.fromBigDecimal(value));
  }

  get vQuote(): string {
    let value = this.get('vQuote');
    return value!.toString();
  }

  set vQuote(value: string) {
    this.set('vQuote', Value.fromString(value));
  }

  get rageTradePools(): Array<string> {
    let value = this.get('rageTradePools');
    return value!.toStringArray();
  }

  set rageTradePools(value: Array<string>) {
    this.set('rageTradePools', Value.fromStringArray(value));
  }
}

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Collateral entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Collateral', id.toString(), this);
    }
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get('Collateral', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get('amount');
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set('amount', Value.fromBigInt(value));
  }

  get totalProfit(): BigInt | null {
    let value = this.get('totalProfit');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt | null) {
    if (!value) {
      this.unset('totalProfit');
    } else {
      this.set('totalProfit', Value.fromBigInt(<BigInt>value));
    }
  }

  get marginRatio(): BigInt | null {
    let value = this.get('marginRatio');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marginRatio(value: BigInt | null) {
    if (!value) {
      this.unset('marginRatio');
    } else {
      this.set('marginRatio', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FundingPaymentRealizedEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save FundingPaymentRealizedEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundingPaymentRealizedEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('FundingPaymentRealizedEntry', id.toString(), this);
    }
  }

  static load(id: string): FundingPaymentRealizedEntry | null {
    return changetype<FundingPaymentRealizedEntry | null>(
      store.get('FundingPaymentRealizedEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get fundingRate(): BigDecimal {
    let value = this.get('fundingRate');
    return value!.toBigDecimal();
  }

  set fundingRate(value: BigDecimal) {
    this.set('fundingRate', Value.fromBigDecimal(value));
  }

  get side(): string {
    let value = this.get('side');
    return value!.toString();
  }

  set side(value: string) {
    this.set('side', Value.fromString(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get tokenPosition(): string {
    let value = this.get('tokenPosition');
    return value!.toString();
  }

  set tokenPosition(value: string) {
    this.set('tokenPosition', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get('price');
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set('price', Value.fromBigDecimal(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get('amount');
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set('amount', Value.fromBigDecimal(value));
  }

  get vTokenPosition(): BigDecimal {
    let value = this.get('vTokenPosition');
    return value!.toBigDecimal();
  }

  set vTokenPosition(value: BigDecimal) {
    this.set('vTokenPosition', Value.fromBigDecimal(value));
  }

  get virtualPriceAccumulator(): BigDecimal {
    let value = this.get('virtualPriceAccumulator');
    return value!.toBigDecimal();
  }

  set virtualPriceAccumulator(value: BigDecimal) {
    this.set('virtualPriceAccumulator', Value.fromBigDecimal(value));
  }

  get checkpointTimestamp(): BigInt {
    let value = this.get('checkpointTimestamp');
    return value!.toBigInt();
  }

  set checkpointTimestamp(value: BigInt) {
    this.set('checkpointTimestamp', Value.fromBigInt(value));
  }

  get timeElapsed(): BigInt {
    let value = this.get('timeElapsed');
    return value!.toBigInt();
  }

  set timeElapsed(value: BigInt) {
    this.set('timeElapsed', Value.fromBigInt(value));
  }

  get avgTwapPrice(): BigDecimal {
    let value = this.get('avgTwapPrice');
    return value!.toBigDecimal();
  }

  set avgTwapPrice(value: BigDecimal) {
    this.set('avgTwapPrice', Value.fromBigDecimal(value));
  }
}

export class TokenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenPosition entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenPosition', id.toString(), this);
    }
  }

  static load(id: string): TokenPosition | null {
    return changetype<TokenPosition | null>(store.get('TokenPosition', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get('rageTradePool');
    return value!.toString();
  }

  set rageTradePool(value: string) {
    this.set('rageTradePool', Value.fromString(value));
  }

  get netPosition(): BigDecimal {
    let value = this.get('netPosition');
    return value!.toBigDecimal();
  }

  set netPosition(value: BigDecimal) {
    this.set('netPosition', Value.fromBigDecimal(value));
  }

  get liquidationPrice(): BigDecimal {
    let value = this.get('liquidationPrice');
    return value!.toBigDecimal();
  }

  set liquidationPrice(value: BigDecimal) {
    this.set('liquidationPrice', Value.fromBigDecimal(value));
  }

  get tokenPositionChangeEntriesCount(): BigInt {
    let value = this.get('tokenPositionChangeEntriesCount');
    return value!.toBigInt();
  }

  set tokenPositionChangeEntriesCount(value: BigInt) {
    this.set('tokenPositionChangeEntriesCount', Value.fromBigInt(value));
  }

  get tokenPositionChangeEntries(): Array<string> {
    let value = this.get('tokenPositionChangeEntries');
    return value!.toStringArray();
  }

  set tokenPositionChangeEntries(value: Array<string>) {
    this.set('tokenPositionChangeEntries', Value.fromStringArray(value));
  }

  get fundingPaymentRealizedEntriesCount(): BigInt {
    let value = this.get('fundingPaymentRealizedEntriesCount');
    return value!.toBigInt();
  }

  set fundingPaymentRealizedEntriesCount(value: BigInt) {
    this.set('fundingPaymentRealizedEntriesCount', Value.fromBigInt(value));
  }

  get lastFundingPaymentRealizedEntry(): string {
    let value = this.get('lastFundingPaymentRealizedEntry');
    return value!.toString();
  }

  set lastFundingPaymentRealizedEntry(value: string) {
    this.set('lastFundingPaymentRealizedEntry', Value.fromString(value));
  }

  get fundingPaymentRealizedEntries(): Array<string> {
    let value = this.get('fundingPaymentRealizedEntries');
    return value!.toStringArray();
  }

  set fundingPaymentRealizedEntries(value: Array<string>) {
    this.set('fundingPaymentRealizedEntries', Value.fromStringArray(value));
  }

  get openPositionEntries(): Array<string> {
    let value = this.get('openPositionEntries');
    return value!.toStringArray();
  }

  set openPositionEntries(value: Array<string>) {
    this.set('openPositionEntries', Value.fromStringArray(value));
  }

  get lastTokenPositionChangeEntry(): string {
    let value = this.get('lastTokenPositionChangeEntry');
    return value!.toString();
  }

  set lastTokenPositionChangeEntry(value: string) {
    this.set('lastTokenPositionChangeEntry', Value.fromString(value));
  }

  get tokenPositionLiquidatedEntriesCount(): BigInt {
    let value = this.get('tokenPositionLiquidatedEntriesCount');
    return value!.toBigInt();
  }

  set tokenPositionLiquidatedEntriesCount(value: BigInt) {
    this.set('tokenPositionLiquidatedEntriesCount', Value.fromBigInt(value));
  }

  get tokenPositionLiquidatedEntries(): Array<string> {
    let value = this.get('tokenPositionLiquidatedEntries');
    return value!.toStringArray();
  }

  set tokenPositionLiquidatedEntries(value: Array<string>) {
    this.set('tokenPositionLiquidatedEntries', Value.fromStringArray(value));
  }

  get totalRealizedFundingPaymentAmount(): BigDecimal {
    let value = this.get('totalRealizedFundingPaymentAmount');
    return value!.toBigDecimal();
  }

  set totalRealizedFundingPaymentAmount(value: BigDecimal) {
    this.set('totalRealizedFundingPaymentAmount', Value.fromBigDecimal(value));
  }

  get sumAX128CheckPoint(): BigInt {
    let value = this.get('sumAX128CheckPoint');
    return value!.toBigInt();
  }

  set sumAX128CheckPoint(value: BigInt) {
    this.set('sumAX128CheckPoint', Value.fromBigInt(value));
  }

  get buyVQuoteAmount(): BigDecimal {
    let value = this.get('buyVQuoteAmount');
    return value!.toBigDecimal();
  }

  set buyVQuoteAmount(value: BigDecimal) {
    this.set('buyVQuoteAmount', Value.fromBigDecimal(value));
  }

  get buyVTokenAmount(): BigDecimal {
    let value = this.get('buyVTokenAmount');
    return value!.toBigDecimal();
  }

  set buyVTokenAmount(value: BigDecimal) {
    this.set('buyVTokenAmount', Value.fromBigDecimal(value));
  }

  get sellVQuoteAmount(): BigDecimal {
    let value = this.get('sellVQuoteAmount');
    return value!.toBigDecimal();
  }

  set sellVQuoteAmount(value: BigDecimal) {
    this.set('sellVQuoteAmount', Value.fromBigDecimal(value));
  }

  get sellVTokenAmount(): BigDecimal {
    let value = this.get('sellVTokenAmount');
    return value!.toBigDecimal();
  }

  set sellVTokenAmount(value: BigDecimal) {
    this.set('sellVTokenAmount', Value.fromBigDecimal(value));
  }

  get entryValue(): BigDecimal {
    let value = this.get('entryValue');
    return value!.toBigDecimal();
  }

  set entryValue(value: BigDecimal) {
    this.set('entryValue', Value.fromBigDecimal(value));
  }

  get entryPrice(): BigDecimal {
    let value = this.get('entryPrice');
    return value!.toBigDecimal();
  }

  set entryPrice(value: BigDecimal) {
    this.set('entryPrice', Value.fromBigDecimal(value));
  }
}

export class MarginChangeEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save MarginChangeEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarginChangeEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('MarginChangeEntry', id.toString(), this);
    }
  }

  static load(id: string): MarginChangeEntry | null {
    return changetype<MarginChangeEntry | null>(store.get('MarginChangeEntry', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get('amount');
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set('amount', Value.fromBigDecimal(value));
  }

  get transactionType(): string {
    let value = this.get('transactionType');
    return value!.toString();
  }

  set transactionType(value: string) {
    this.set('transactionType', Value.fromString(value));
  }

  get isSettleProfit(): boolean {
    let value = this.get('isSettleProfit');
    return value!.toBoolean();
  }

  set isSettleProfit(value: boolean) {
    this.set('isSettleProfit', Value.fromBoolean(value));
  }
}

export class TokenPositionChangeEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenPositionChangeEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenPositionChangeEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenPositionChangeEntry', id.toString(), this);
    }
  }

  static load(id: string): TokenPositionChangeEntry | null {
    return changetype<TokenPositionChangeEntry | null>(
      store.get('TokenPositionChangeEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get side(): string {
    let value = this.get('side');
    return value!.toString();
  }

  set side(value: string) {
    this.set('side', Value.fromString(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get tokenPosition(): string {
    let value = this.get('tokenPosition');
    return value!.toString();
  }

  set tokenPosition(value: string) {
    this.set('tokenPosition', Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get('rageTradePool');
    return value!.toString();
  }

  set rageTradePool(value: string) {
    this.set('rageTradePool', Value.fromString(value));
  }

  get vTokenAmountOut(): BigDecimal {
    let value = this.get('vTokenAmountOut');
    return value!.toBigDecimal();
  }

  set vTokenAmountOut(value: BigDecimal) {
    this.set('vTokenAmountOut', Value.fromBigDecimal(value));
  }

  get vQuoteAmountOut(): BigDecimal {
    let value = this.get('vQuoteAmountOut');
    return value!.toBigDecimal();
  }

  set vQuoteAmountOut(value: BigDecimal) {
    this.set('vQuoteAmountOut', Value.fromBigDecimal(value));
  }

  get vTokenQuantity(): BigDecimal {
    let value = this.get('vTokenQuantity');
    return value!.toBigDecimal();
  }

  set vTokenQuantity(value: BigDecimal) {
    this.set('vTokenQuantity', Value.fromBigDecimal(value));
  }

  get entryPrice(): BigDecimal {
    let value = this.get('entryPrice');
    return value!.toBigDecimal();
  }

  set entryPrice(value: BigDecimal) {
    this.set('entryPrice', Value.fromBigDecimal(value));
  }

  get geometricMeanPrice(): BigDecimal {
    let value = this.get('geometricMeanPrice');
    return value!.toBigDecimal();
  }

  set geometricMeanPrice(value: BigDecimal) {
    this.set('geometricMeanPrice', Value.fromBigDecimal(value));
  }

  get startPrice(): BigDecimal {
    let value = this.get('startPrice');
    return value!.toBigDecimal();
  }

  set startPrice(value: BigDecimal) {
    this.set('startPrice', Value.fromBigDecimal(value));
  }

  get endPrice(): BigDecimal {
    let value = this.get('endPrice');
    return value!.toBigDecimal();
  }

  set endPrice(value: BigDecimal) {
    this.set('endPrice', Value.fromBigDecimal(value));
  }

  get realizedPnL(): BigDecimal {
    let value = this.get('realizedPnL');
    return value!.toBigDecimal();
  }

  set realizedPnL(value: BigDecimal) {
    this.set('realizedPnL', Value.fromBigDecimal(value));
  }
}

export class TokenPositionLiquidatedEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenPositionLiquidatedEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenPositionLiquidatedEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenPositionLiquidatedEntry', id.toString(), this);
    }
  }

  static load(id: string): TokenPositionLiquidatedEntry | null {
    return changetype<TokenPositionLiquidatedEntry | null>(
      store.get('TokenPositionLiquidatedEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get tokenPosition(): string {
    let value = this.get('tokenPosition');
    return value!.toString();
  }

  set tokenPosition(value: string) {
    this.set('tokenPosition', Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get('rageTradePool');
    return value!.toString();
  }

  set rageTradePool(value: string) {
    this.set('rageTradePool', Value.fromString(value));
  }

  get side(): string {
    let value = this.get('side');
    return value!.toString();
  }

  set side(value: string) {
    this.set('side', Value.fromString(value));
  }

  get vTokenClosed(): BigDecimal {
    let value = this.get('vTokenClosed');
    return value!.toBigDecimal();
  }

  set vTokenClosed(value: BigDecimal) {
    this.set('vTokenClosed', Value.fromBigDecimal(value));
  }

  get vQuoteClosed(): BigDecimal {
    let value = this.get('vQuoteClosed');
    return value!.toBigDecimal();
  }

  set vQuoteClosed(value: BigDecimal) {
    this.set('vQuoteClosed', Value.fromBigDecimal(value));
  }

  get liquidationPrice(): BigDecimal {
    let value = this.get('liquidationPrice');
    return value!.toBigDecimal();
  }

  set liquidationPrice(value: BigDecimal) {
    this.set('liquidationPrice', Value.fromBigDecimal(value));
  }

  get feeKeeper(): BigDecimal {
    let value = this.get('feeKeeper');
    return value!.toBigDecimal();
  }

  set feeKeeper(value: BigDecimal) {
    this.set('feeKeeper', Value.fromBigDecimal(value));
  }

  get feeInsuranceFund(): BigDecimal {
    let value = this.get('feeInsuranceFund');
    return value!.toBigDecimal();
  }

  set feeInsuranceFund(value: BigDecimal) {
    this.set('feeInsuranceFund', Value.fromBigDecimal(value));
  }

  get accountMarketValueFinal(): BigDecimal {
    let value = this.get('accountMarketValueFinal');
    return value!.toBigDecimal();
  }

  set accountMarketValueFinal(value: BigDecimal) {
    this.set('accountMarketValueFinal', Value.fromBigDecimal(value));
  }
}

export class LiquidateRangePosition extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save LiquidateRangePosition entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidateRangePosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('LiquidateRangePosition', id.toString(), this);
    }
  }

  static load(id: string): LiquidateRangePosition | null {
    return changetype<LiquidateRangePosition | null>(
      store.get('LiquidateRangePosition', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get keeperAddress(): Bytes {
    let value = this.get('keeperAddress');
    return value!.toBytes();
  }

  set keeperAddress(value: Bytes) {
    this.set('keeperAddress', Value.fromBytes(value));
  }

  get liquidationFee(): BigInt {
    let value = this.get('liquidationFee');
    return value!.toBigInt();
  }

  set liquidationFee(value: BigInt) {
    this.set('liquidationFee', Value.fromBigInt(value));
  }

  get keeperFee(): BigInt {
    let value = this.get('keeperFee');
    return value!.toBigInt();
  }

  set keeperFee(value: BigInt) {
    this.set('keeperFee', Value.fromBigInt(value));
  }

  get insuranceFundFee(): BigInt {
    let value = this.get('insuranceFundFee');
    return value!.toBigInt();
  }

  set insuranceFundFee(value: BigInt) {
    this.set('insuranceFundFee', Value.fromBigInt(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save LiquidityPosition entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('LiquidityPosition', id.toString(), this);
    }
  }

  static load(id: string): LiquidityPosition | null {
    return changetype<LiquidityPosition | null>(store.get('LiquidityPosition', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get vToken(): Bytes {
    let value = this.get('vToken');
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set('vToken', Value.fromBytes(value));
  }

  get tickLower(): i32 {
    let value = this.get('tickLower');
    return value!.toI32();
  }

  set tickLower(value: i32) {
    this.set('tickLower', Value.fromI32(value));
  }

  get tickUpper(): i32 {
    let value = this.get('tickUpper');
    return value!.toI32();
  }

  set tickUpper(value: i32) {
    this.set('tickUpper', Value.fromI32(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get('tokenAmountOut');
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set('tokenAmountOut', Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get('liquidityDelta');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (!value) {
      this.unset('liquidityDelta');
    } else {
      this.set('liquidityDelta', Value.fromBigInt(<BigInt>value));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get('limitOrderType');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (!value) {
      this.unset('limitOrderType');
    } else {
      this.set('limitOrderType', Value.fromString(<string>value));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get('fundingPayment');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (!value) {
      this.unset('fundingPayment');
    } else {
      this.set('fundingPayment', Value.fromBigInt(<BigInt>value));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get('feePayment');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (!value) {
      this.unset('feePayment');
    } else {
      this.set('feePayment', Value.fromBigInt(<BigInt>value));
    }
  }

  get keeperAddress(): Bytes | null {
    let value = this.get('keeperAddress');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keeperAddress(value: Bytes | null) {
    if (!value) {
      this.unset('keeperAddress');
    } else {
      this.set('keeperAddress', Value.fromBytes(<Bytes>value));
    }
  }

  get liquidationFee(): BigDecimal | null {
    let value = this.get('liquidationFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationFee(value: BigDecimal | null) {
    if (!value) {
      this.unset('liquidationFee');
    } else {
      this.set('liquidationFee', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get('keeperFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (!value) {
      this.unset('keeperFee');
    } else {
      this.set('keeperFee', Value.fromBigInt(<BigInt>value));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get('insuranceFundFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (!value) {
      this.unset('insuranceFundFee');
    } else {
      this.set('insuranceFundFee', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LiquidityPositionEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save LiquidityPositionEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityPositionEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('LiquidityPositionEntry', id.toString(), this);
    }
  }

  static load(id: string): LiquidityPositionEntry | null {
    return changetype<LiquidityPositionEntry | null>(
      store.get('LiquidityPositionEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get('account');
    return value!.toString();
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get vToken(): Bytes {
    let value = this.get('vToken');
    return value!.toBytes();
  }

  set vToken(value: Bytes) {
    this.set('vToken', Value.fromBytes(value));
  }

  get tickLower(): i32 {
    let value = this.get('tickLower');
    return value!.toI32();
  }

  set tickLower(value: i32) {
    this.set('tickLower', Value.fromI32(value));
  }

  get tickUpper(): i32 {
    let value = this.get('tickUpper');
    return value!.toI32();
  }

  set tickUpper(value: i32) {
    this.set('tickUpper', Value.fromI32(value));
  }

  get tokenAmountOut(): BigInt {
    let value = this.get('tokenAmountOut');
    return value!.toBigInt();
  }

  set tokenAmountOut(value: BigInt) {
    this.set('tokenAmountOut', Value.fromBigInt(value));
  }

  get liquidityDelta(): BigInt | null {
    let value = this.get('liquidityDelta');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityDelta(value: BigInt | null) {
    if (!value) {
      this.unset('liquidityDelta');
    } else {
      this.set('liquidityDelta', Value.fromBigInt(<BigInt>value));
    }
  }

  get limitOrderType(): string | null {
    let value = this.get('limitOrderType');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set limitOrderType(value: string | null) {
    if (!value) {
      this.unset('limitOrderType');
    } else {
      this.set('limitOrderType', Value.fromString(<string>value));
    }
  }

  get fundingPayment(): BigInt | null {
    let value = this.get('fundingPayment');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingPayment(value: BigInt | null) {
    if (!value) {
      this.unset('fundingPayment');
    } else {
      this.set('fundingPayment', Value.fromBigInt(<BigInt>value));
    }
  }

  get feePayment(): BigInt | null {
    let value = this.get('feePayment');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feePayment(value: BigInt | null) {
    if (!value) {
      this.unset('feePayment');
    } else {
      this.set('feePayment', Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidationFee(): BigDecimal | null {
    let value = this.get('liquidationFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationFee(value: BigDecimal | null) {
    if (!value) {
      this.unset('liquidationFee');
    } else {
      this.set('liquidationFee', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get('keeperFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (!value) {
      this.unset('keeperFee');
    } else {
      this.set('keeperFee', Value.fromBigInt(<BigInt>value));
    }
  }

  get insuranceFundFee(): BigInt | null {
    let value = this.get('insuranceFundFee');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set insuranceFundFee(value: BigInt | null) {
    if (!value) {
      this.unset('insuranceFundFee');
    } else {
      this.set('insuranceFundFee', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class RageTradeFactory extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RageTradeFactory entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RageTradeFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RageTradeFactory', id.toString(), this);
    }
  }

  static load(id: string): RageTradeFactory | null {
    return changetype<RageTradeFactory | null>(store.get('RageTradeFactory', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get pools(): Array<string> {
    let value = this.get('pools');
    return value!.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set('pools', Value.fromStringArray(value));
  }
}

export class RageTradePool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RageTradePool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RageTradePool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RageTradePool', id.toString(), this);
    }
  }

  static load(id: string): RageTradePool | null {
    return changetype<RageTradePool | null>(store.get('RageTradePool', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get vToken(): string {
    let value = this.get('vToken');
    return value!.toString();
  }

  set vToken(value: string) {
    this.set('vToken', Value.fromString(value));
  }

  get vQuote(): string {
    let value = this.get('vQuote');
    return value!.toString();
  }

  set vQuote(value: string) {
    this.set('vQuote', Value.fromString(value));
  }

  get vPool(): string {
    let value = this.get('vPool');
    return value!.toString();
  }

  set vPool(value: string) {
    this.set('vPool', Value.fromString(value));
  }

  get vPoolWrapper(): string {
    let value = this.get('vPoolWrapper');
    return value!.toString();
  }

  set vPoolWrapper(value: string) {
    this.set('vPoolWrapper', Value.fromString(value));
  }

  get factory(): string {
    let value = this.get('factory');
    return value!.toString();
  }

  set factory(value: string) {
    this.set('factory', Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get('price');
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set('price', Value.fromBigDecimal(value));
  }

  get tick(): BigInt {
    let value = this.get('tick');
    return value!.toBigInt();
  }

  set tick(value: BigInt) {
    this.set('tick', Value.fromBigInt(value));
  }

  get vTotalValueLocked(): BigDecimal {
    let value = this.get('vTotalValueLocked');
    return value!.toBigDecimal();
  }

  set vTotalValueLocked(value: BigDecimal) {
    this.set('vTotalValueLocked', Value.fromBigDecimal(value));
  }

  get maintenanceMarginRatioBps(): BigDecimal {
    let value = this.get('maintenanceMarginRatioBps');
    return value!.toBigDecimal();
  }

  set maintenanceMarginRatioBps(value: BigDecimal) {
    this.set('maintenanceMarginRatioBps', Value.fromBigDecimal(value));
  }

  get fundingRate(): BigDecimal {
    let value = this.get('fundingRate');
    return value!.toBigDecimal();
  }

  set fundingRate(value: BigDecimal) {
    this.set('fundingRate', Value.fromBigDecimal(value));
  }

  get volume24H(): BigInt {
    let value = this.get('volume24H');
    return value!.toBigInt();
  }

  set volume24H(value: BigInt) {
    this.set('volume24H', Value.fromBigInt(value));
  }

  get priceChange24H(): BigInt {
    let value = this.get('priceChange24H');
    return value!.toBigInt();
  }

  set priceChange24H(value: BigInt) {
    this.set('priceChange24H', Value.fromBigInt(value));
  }

  get hourData(): string {
    let value = this.get('hourData');
    return value!.toString();
  }

  set hourData(value: string) {
    this.set('hourData', Value.fromString(value));
  }

  get dayData(): string {
    let value = this.get('dayData');
    return value!.toString();
  }

  set dayData(value: string) {
    this.set('dayData', Value.fromString(value));
  }

  get virtualPriceAccumulator(): BigDecimal {
    let value = this.get('virtualPriceAccumulator');
    return value!.toBigDecimal();
  }

  set virtualPriceAccumulator(value: BigDecimal) {
    this.set('virtualPriceAccumulator', Value.fromBigDecimal(value));
  }

  get checkpointTimestamp(): BigInt {
    let value = this.get('checkpointTimestamp');
    return value!.toBigInt();
  }

  set checkpointTimestamp(value: BigInt) {
    this.set('checkpointTimestamp', Value.fromBigInt(value));
  }
}

export class VToken extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VToken entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VToken', id.toString(), this);
    }
  }

  static load(id: string): VToken | null {
    return changetype<VToken | null>(store.get('VToken', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get('symbol');
    return value!.toString();
  }

  set symbol(value: string) {
    this.set('symbol', Value.fromString(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get('decimals');
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set('decimals', Value.fromBigInt(value));
  }
}

export class VPoolWrapper extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VPoolWrapper entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VPoolWrapper must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VPoolWrapper', id.toString(), this);
    }
  }

  static load(id: string): VPoolWrapper | null {
    return changetype<VPoolWrapper | null>(store.get('VPoolWrapper', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Collection entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Collection', id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get('Collection', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get data(): Array<string> {
    let value = this.get('data');
    return value!.toStringArray();
  }

  set data(value: Array<string>) {
    this.set('data', Value.fromStringArray(value));
  }
}

export class Candle extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Candle entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Candle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Candle', id.toString(), this);
    }
  }

  static load(id: string): Candle | null {
    return changetype<Candle | null>(store.get('Candle', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get collection(): string {
    let value = this.get('collection');
    return value!.toString();
  }

  set collection(value: string) {
    this.set('collection', Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get('periodStartUnix');
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set('periodStartUnix', Value.fromI32(value));
  }

  get tick(): BigInt {
    let value = this.get('tick');
    return value!.toBigInt();
  }

  set tick(value: BigInt) {
    this.set('tick', Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get('open');
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set('open', Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get('high');
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set('high', Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get('low');
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set('low', Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get('close');
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set('close', Value.fromBigDecimal(value));
  }

  get volumeVToken(): BigDecimal {
    let value = this.get('volumeVToken');
    return value!.toBigDecimal();
  }

  set volumeVToken(value: BigDecimal) {
    this.set('volumeVToken', Value.fromBigDecimal(value));
  }

  get volumeUSDC(): BigDecimal {
    let value = this.get('volumeUSDC');
    return value!.toBigDecimal();
  }

  set volumeUSDC(value: BigDecimal) {
    this.set('volumeUSDC', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Vault entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Vault', id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get('Vault', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get rageAccount(): string {
    let value = this.get('rageAccount');
    return value!.toString();
  }

  set rageAccount(value: string) {
    this.set('rageAccount', Value.fromString(value));
  }

  get pendingDeposits(): Array<string> {
    let value = this.get('pendingDeposits');
    return value!.toStringArray();
  }

  set pendingDeposits(value: Array<string>) {
    this.set('pendingDeposits', Value.fromStringArray(value));
  }

  get totalLiquidityPositionEarningsRealized(): BigDecimal {
    let value = this.get('totalLiquidityPositionEarningsRealized');
    return value!.toBigDecimal();
  }

  set totalLiquidityPositionEarningsRealized(value: BigDecimal) {
    this.set('totalLiquidityPositionEarningsRealized', Value.fromBigDecimal(value));
  }

  get rebalances(): Array<string> {
    let value = this.get('rebalances');
    return value!.toStringArray();
  }

  set rebalances(value: Array<string>) {
    this.set('rebalances', Value.fromStringArray(value));
  }

  get rewardsHarvestedEntries(): Array<string> {
    let value = this.get('rewardsHarvestedEntries');
    return value!.toStringArray();
  }

  set rewardsHarvestedEntries(value: Array<string>) {
    this.set('rewardsHarvestedEntries', Value.fromStringArray(value));
  }
}

export class VaultRewardsHarvestedEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultRewardsHarvestedEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultRewardsHarvestedEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultRewardsHarvestedEntry', id.toString(), this);
    }
  }

  static load(id: string): VaultRewardsHarvestedEntry | null {
    return changetype<VaultRewardsHarvestedEntry | null>(
      store.get('VaultRewardsHarvestedEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get vault(): string {
    let value = this.get('vault');
    return value!.toString();
  }

  set vault(value: string) {
    this.set('vault', Value.fromString(value));
  }

  get wethHarvested(): BigDecimal {
    let value = this.get('wethHarvested');
    return value!.toBigDecimal();
  }

  set wethHarvested(value: BigDecimal) {
    this.set('wethHarvested', Value.fromBigDecimal(value));
  }

  get esGmxStaked(): BigDecimal {
    let value = this.get('esGmxStaked');
    return value!.toBigDecimal();
  }

  set esGmxStaked(value: BigDecimal) {
    this.set('esGmxStaked', Value.fromBigDecimal(value));
  }

  get juniorVaultWeth(): BigDecimal {
    let value = this.get('juniorVaultWeth');
    return value!.toBigDecimal();
  }

  set juniorVaultWeth(value: BigDecimal) {
    this.set('juniorVaultWeth', Value.fromBigDecimal(value));
  }

  get seniorVaultWeth(): BigDecimal {
    let value = this.get('seniorVaultWeth');
    return value!.toBigDecimal();
  }

  set seniorVaultWeth(value: BigDecimal) {
    this.set('seniorVaultWeth', Value.fromBigDecimal(value));
  }

  get juniorVaultGlp(): BigDecimal {
    let value = this.get('juniorVaultGlp');
    return value!.toBigDecimal();
  }

  set juniorVaultGlp(value: BigDecimal) {
    this.set('juniorVaultGlp', Value.fromBigDecimal(value));
  }

  get seniorVaultAUsdc(): BigDecimal {
    let value = this.get('seniorVaultAUsdc');
    return value!.toBigDecimal();
  }

  set seniorVaultAUsdc(value: BigDecimal) {
    this.set('seniorVaultAUsdc', Value.fromBigDecimal(value));
  }
}

export class VaultRebalance extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultRebalance entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultRebalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultRebalance', id.toString(), this);
    }
  }

  static load(id: string): VaultRebalance | null {
    return changetype<VaultRebalance | null>(store.get('VaultRebalance', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get liquidityPositionEarningsRealized(): BigDecimal {
    let value = this.get('liquidityPositionEarningsRealized');
    return value!.toBigDecimal();
  }

  set liquidityPositionEarningsRealized(value: BigDecimal) {
    this.set('liquidityPositionEarningsRealized', Value.fromBigDecimal(value));
  }

  get vault(): string {
    let value = this.get('vault');
    return value!.toString();
  }

  set vault(value: string) {
    this.set('vault', Value.fromString(value));
  }

  get vaultMarketValue(): BigDecimal {
    let value = this.get('vaultMarketValue');
    return value!.toBigDecimal();
  }

  set vaultMarketValue(value: BigDecimal) {
    this.set('vaultMarketValue', Value.fromBigDecimal(value));
  }

  get partnerVaultMarketValue(): BigDecimal {
    let value = this.get('partnerVaultMarketValue');
    return value!.toBigDecimal();
  }

  set partnerVaultMarketValue(value: BigDecimal) {
    this.set('partnerVaultMarketValue', Value.fromBigDecimal(value));
  }
}

export class VaultDepositWithdrawEntry extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultDepositWithdrawEntry entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultDepositWithdrawEntry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultDepositWithdrawEntry', id.toString(), this);
    }
  }

  static load(id: string): VaultDepositWithdrawEntry | null {
    return changetype<VaultDepositWithdrawEntry | null>(
      store.get('VaultDepositWithdrawEntry', id)
    );
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get('owner');
    return value!.toString();
  }

  set owner(value: string) {
    this.set('owner', Value.fromString(value));
  }

  get vault(): string {
    let value = this.get('vault');
    return value!.toString();
  }

  set vault(value: string) {
    this.set('vault', Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get('transactionHash');
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set('transactionHash', Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get('token');
    return value!.toString();
  }

  set token(value: string) {
    this.set('token', Value.fromString(value));
  }

  get tokenAmount(): BigDecimal {
    let value = this.get('tokenAmount');
    return value!.toBigDecimal();
  }

  set tokenAmount(value: BigDecimal) {
    this.set('tokenAmount', Value.fromBigDecimal(value));
  }

  get assetsTokenAmount(): BigDecimal {
    let value = this.get('assetsTokenAmount');
    return value!.toBigDecimal();
  }

  set assetsTokenAmount(value: BigDecimal) {
    this.set('assetsTokenAmount', Value.fromBigDecimal(value));
  }

  get sharesTokenAmount(): BigDecimal {
    let value = this.get('sharesTokenAmount');
    return value!.toBigDecimal();
  }

  set sharesTokenAmount(value: BigDecimal) {
    this.set('sharesTokenAmount', Value.fromBigDecimal(value));
  }

  get assetPrice(): BigDecimal {
    let value = this.get('assetPrice');
    return value!.toBigDecimal();
  }

  set assetPrice(value: BigDecimal) {
    this.set('assetPrice', Value.fromBigDecimal(value));
  }

  get sharePrice(): BigDecimal {
    let value = this.get('sharePrice');
    return value!.toBigDecimal();
  }

  set sharePrice(value: BigDecimal) {
    this.set('sharePrice', Value.fromBigDecimal(value));
  }

  get sharesTokenDollarValue(): BigDecimal {
    let value = this.get('sharesTokenDollarValue');
    return value!.toBigDecimal();
  }

  set sharesTokenDollarValue(value: BigDecimal) {
    this.set('sharesTokenDollarValue', Value.fromBigDecimal(value));
  }

  get action(): string {
    let value = this.get('action');
    return value!.toString();
  }

  set action(value: string) {
    this.set('action', Value.fromString(value));
  }
}

export class UniswapV3Factory extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Factory entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Factory', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Factory | null {
    return changetype<UniswapV3Factory | null>(store.get('UniswapV3Factory', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get('poolCount');
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set('poolCount', Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get('totalVolumeUSD');
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set('totalVolumeUSD', Value.fromBigDecimal(value));
  }

  get totalVolumeETH(): BigDecimal {
    let value = this.get('totalVolumeETH');
    return value!.toBigDecimal();
  }

  set totalVolumeETH(value: BigDecimal) {
    this.set('totalVolumeETH', Value.fromBigDecimal(value));
  }

  get totalFeesUSD(): BigDecimal {
    let value = this.get('totalFeesUSD');
    return value!.toBigDecimal();
  }

  set totalFeesUSD(value: BigDecimal) {
    this.set('totalFeesUSD', Value.fromBigDecimal(value));
  }

  get totalFeesETH(): BigDecimal {
    let value = this.get('totalFeesETH');
    return value!.toBigDecimal();
  }

  set totalFeesETH(value: BigDecimal) {
    this.set('totalFeesETH', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get('totalValueLockedUSD');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set('totalValueLockedUSD', Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get('totalValueLockedETH');
    return value!.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set('totalValueLockedETH', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get('totalValueLockedUSDUntracked');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set('totalValueLockedUSDUntracked', Value.fromBigDecimal(value));
  }

  get totalValueLockedETHUntracked(): BigDecimal {
    let value = this.get('totalValueLockedETHUntracked');
    return value!.toBigDecimal();
  }

  set totalValueLockedETHUntracked(value: BigDecimal) {
    this.set('totalValueLockedETHUntracked', Value.fromBigDecimal(value));
  }

  get owner(): string {
    let value = this.get('owner');
    return value!.toString();
  }

  set owner(value: string) {
    this.set('owner', Value.fromString(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Bundle entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bundle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Bundle', id.toString(), this);
    }
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get('Bundle', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get ethPriceUSD(): BigDecimal {
    let value = this.get('ethPriceUSD');
    return value!.toBigDecimal();
  }

  set ethPriceUSD(value: BigDecimal) {
    this.set('ethPriceUSD', Value.fromBigDecimal(value));
  }
}

export class UniswapV3Token extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Token entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Token', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Token | null {
    return changetype<UniswapV3Token | null>(store.get('UniswapV3Token', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get('symbol');
    return value!.toString();
  }

  set symbol(value: string) {
    this.set('symbol', Value.fromString(value));
  }

  get name(): string {
    let value = this.get('name');
    return value!.toString();
  }

  set name(value: string) {
    this.set('name', Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get('decimals');
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set('decimals', Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get('totalSupply');
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set('totalSupply', Value.fromBigInt(value));
  }

  get volume(): BigDecimal {
    let value = this.get('volume');
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set('volume', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get poolCount(): BigInt {
    let value = this.get('poolCount');
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set('poolCount', Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get('totalValueLocked');
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set('totalValueLocked', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get('totalValueLockedUSD');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set('totalValueLockedUSD', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get('totalValueLockedUSDUntracked');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set('totalValueLockedUSDUntracked', Value.fromBigDecimal(value));
  }

  get derivedETH(): BigDecimal {
    let value = this.get('derivedETH');
    return value!.toBigDecimal();
  }

  set derivedETH(value: BigDecimal) {
    this.set('derivedETH', Value.fromBigDecimal(value));
  }

  get whitelistPools(): Array<string> {
    let value = this.get('whitelistPools');
    return value!.toStringArray();
  }

  set whitelistPools(value: Array<string>) {
    this.set('whitelistPools', Value.fromStringArray(value));
  }

  get tokenDayData(): Array<string> {
    let value = this.get('tokenDayData');
    return value!.toStringArray();
  }

  set tokenDayData(value: Array<string>) {
    this.set('tokenDayData', Value.fromStringArray(value));
  }
}

export class Temp_UniswapV3_Pool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Temp_UniswapV3_Pool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Temp_UniswapV3_Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Temp_UniswapV3_Pool', id.toString(), this);
    }
  }

  static load(id: string): Temp_UniswapV3_Pool | null {
    return changetype<Temp_UniswapV3_Pool | null>(store.get('Temp_UniswapV3_Pool', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get rageTradePool(): string {
    let value = this.get('rageTradePool');
    return value!.toString();
  }

  set rageTradePool(value: string) {
    this.set('rageTradePool', Value.fromString(value));
  }
}

export class UniswapV3Pool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Pool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Pool', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Pool | null {
    return changetype<UniswapV3Pool | null>(store.get('UniswapV3Pool', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get('createdAtTimestamp');
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set('createdAtTimestamp', Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get('createdAtBlockNumber');
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set('createdAtBlockNumber', Value.fromBigInt(value));
  }

  get token0(): string {
    let value = this.get('token0');
    return value!.toString();
  }

  set token0(value: string) {
    this.set('token0', Value.fromString(value));
  }

  get token1(): string {
    let value = this.get('token1');
    return value!.toString();
  }

  set token1(value: string) {
    this.set('token1', Value.fromString(value));
  }

  get feeTier(): BigInt {
    let value = this.get('feeTier');
    return value!.toBigInt();
  }

  set feeTier(value: BigInt) {
    this.set('feeTier', Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get('liquidity');
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set('liquidity', Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get('sqrtPrice');
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set('sqrtPrice', Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get('token0Price');
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set('token0Price', Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get('token1Price');
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set('token1Price', Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get('tick');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset('tick');
    } else {
      this.set('tick', Value.fromBigInt(<BigInt>value));
    }
  }

  get observationIndex(): BigInt {
    let value = this.get('observationIndex');
    return value!.toBigInt();
  }

  set observationIndex(value: BigInt) {
    this.set('observationIndex', Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get('collectedFeesToken0');
    return value!.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set('collectedFeesToken0', Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get('collectedFeesToken1');
    return value!.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set('collectedFeesToken1', Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get('collectedFeesUSD');
    return value!.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set('collectedFeesUSD', Value.fromBigDecimal(value));
  }

  get totalValueLockedToken0(): BigDecimal {
    let value = this.get('totalValueLockedToken0');
    return value!.toBigDecimal();
  }

  set totalValueLockedToken0(value: BigDecimal) {
    this.set('totalValueLockedToken0', Value.fromBigDecimal(value));
  }

  get totalValueLockedToken1(): BigDecimal {
    let value = this.get('totalValueLockedToken1');
    return value!.toBigDecimal();
  }

  set totalValueLockedToken1(value: BigDecimal) {
    this.set('totalValueLockedToken1', Value.fromBigDecimal(value));
  }

  get totalValueLockedETH(): BigDecimal {
    let value = this.get('totalValueLockedETH');
    return value!.toBigDecimal();
  }

  set totalValueLockedETH(value: BigDecimal) {
    this.set('totalValueLockedETH', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get('totalValueLockedUSD');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set('totalValueLockedUSD', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSDUntracked(): BigDecimal {
    let value = this.get('totalValueLockedUSDUntracked');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSDUntracked(value: BigDecimal) {
    this.set('totalValueLockedUSDUntracked', Value.fromBigDecimal(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get('liquidityProviderCount');
    return value!.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set('liquidityProviderCount', Value.fromBigInt(value));
  }

  get poolHourData(): Array<string> {
    let value = this.get('poolHourData');
    return value!.toStringArray();
  }

  set poolHourData(value: Array<string>) {
    this.set('poolHourData', Value.fromStringArray(value));
  }

  get poolDayData(): Array<string> {
    let value = this.get('poolDayData');
    return value!.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set('poolDayData', Value.fromStringArray(value));
  }

  get mints(): Array<string> {
    let value = this.get('mints');
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set('mints', Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get('burns');
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set('burns', Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get('swaps');
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set('swaps', Value.fromStringArray(value));
  }

  get collects(): Array<string> {
    let value = this.get('collects');
    return value!.toStringArray();
  }

  set collects(value: Array<string>) {
    this.set('collects', Value.fromStringArray(value));
  }

  get ticks(): Array<string> {
    let value = this.get('ticks');
    return value!.toStringArray();
  }

  set ticks(value: Array<string>) {
    this.set('ticks', Value.fromStringArray(value));
  }
}

export class UniswapV3Tick extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Tick entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Tick must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Tick', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Tick | null {
    return changetype<UniswapV3Tick | null>(store.get('UniswapV3Tick', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get poolAddress(): string | null {
    let value = this.get('poolAddress');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (!value) {
      this.unset('poolAddress');
    } else {
      this.set('poolAddress', Value.fromString(<string>value));
    }
  }

  get tickIdx(): BigInt {
    let value = this.get('tickIdx');
    return value!.toBigInt();
  }

  set tickIdx(value: BigInt) {
    this.set('tickIdx', Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get('liquidityGross');
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set('liquidityGross', Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get('liquidityNet');
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set('liquidityNet', Value.fromBigInt(value));
  }

  get price0(): BigDecimal {
    let value = this.get('price0');
    return value!.toBigDecimal();
  }

  set price0(value: BigDecimal) {
    this.set('price0', Value.fromBigDecimal(value));
  }

  get price1(): BigDecimal {
    let value = this.get('price1');
    return value!.toBigDecimal();
  }

  set price1(value: BigDecimal) {
    this.set('price1', Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get collectedFeesToken0(): BigDecimal {
    let value = this.get('collectedFeesToken0');
    return value!.toBigDecimal();
  }

  set collectedFeesToken0(value: BigDecimal) {
    this.set('collectedFeesToken0', Value.fromBigDecimal(value));
  }

  get collectedFeesToken1(): BigDecimal {
    let value = this.get('collectedFeesToken1');
    return value!.toBigDecimal();
  }

  set collectedFeesToken1(value: BigDecimal) {
    this.set('collectedFeesToken1', Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get('collectedFeesUSD');
    return value!.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set('collectedFeesUSD', Value.fromBigDecimal(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get('createdAtTimestamp');
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set('createdAtTimestamp', Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get('createdAtBlockNumber');
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set('createdAtBlockNumber', Value.fromBigInt(value));
  }

  get liquidityProviderCount(): BigInt {
    let value = this.get('liquidityProviderCount');
    return value!.toBigInt();
  }

  set liquidityProviderCount(value: BigInt) {
    this.set('liquidityProviderCount', Value.fromBigInt(value));
  }
}

export class UniswapV3Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Transaction entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Transaction', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Transaction | null {
    return changetype<UniswapV3Transaction | null>(store.get('UniswapV3Transaction', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get('blockNumber');
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set('blockNumber', Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get('gasUsed');
    return value!.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set('gasUsed', Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get('gasPrice');
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set('gasPrice', Value.fromBigInt(value));
  }

  get mints(): Array<string> | null {
    let value = this.get('mints');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mints(value: Array<string> | null) {
    if (!value) {
      this.unset('mints');
    } else {
      this.set('mints', Value.fromStringArray(<Array<string>>value));
    }
  }

  get burns(): Array<string> | null {
    let value = this.get('burns');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set burns(value: Array<string> | null) {
    if (!value) {
      this.unset('burns');
    } else {
      this.set('burns', Value.fromStringArray(<Array<string>>value));
    }
  }

  get collects(): Array<string> | null {
    let value = this.get('collects');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collects(value: Array<string> | null) {
    if (!value) {
      this.unset('collects');
    } else {
      this.set('collects', Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class UniswapV3Mint extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Mint entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Mint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Mint', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Mint | null {
    return changetype<UniswapV3Mint | null>(store.get('UniswapV3Mint', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get('transaction');
    return value!.toString();
  }

  set transaction(value: string) {
    this.set('transaction', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get token0(): string {
    let value = this.get('token0');
    return value!.toString();
  }

  set token0(value: string) {
    this.set('token0', Value.fromString(value));
  }

  get token1(): string {
    let value = this.get('token1');
    return value!.toString();
  }

  set token1(value: string) {
    this.set('token1', Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get('owner');
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value));
  }

  get sender(): Bytes | null {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset('sender');
    } else {
      this.set('sender', Value.fromBytes(<Bytes>value));
    }
  }

  get origin(): Bytes {
    let value = this.get('origin');
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set('origin', Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get('amount');
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set('amount', Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get('amount0');
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set('amount0', Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get('amount1');
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set('amount1', Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get('amountUSD');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset('amountUSD');
    } else {
      this.set('amountUSD', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get('tickLower');
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set('tickLower', Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get('tickUpper');
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set('tickUpper', Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get('logIndex');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset('logIndex');
    } else {
      this.set('logIndex', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapV3Burn extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Burn entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Burn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Burn', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Burn | null {
    return changetype<UniswapV3Burn | null>(store.get('UniswapV3Burn', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get('transaction');
    return value!.toString();
  }

  set transaction(value: string) {
    this.set('transaction', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get token0(): string {
    let value = this.get('token0');
    return value!.toString();
  }

  set token0(value: string) {
    this.set('token0', Value.fromString(value));
  }

  get token1(): string {
    let value = this.get('token1');
    return value!.toString();
  }

  set token1(value: string) {
    this.set('token1', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get owner(): Bytes | null {
    let value = this.get('owner');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset('owner');
    } else {
      this.set('owner', Value.fromBytes(<Bytes>value));
    }
  }

  get origin(): Bytes {
    let value = this.get('origin');
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set('origin', Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get('amount');
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set('amount', Value.fromBigInt(value));
  }

  get amount0(): BigDecimal {
    let value = this.get('amount0');
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set('amount0', Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get('amount1');
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set('amount1', Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get('amountUSD');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset('amountUSD');
    } else {
      this.set('amountUSD', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get('tickLower');
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set('tickLower', Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get('tickUpper');
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set('tickUpper', Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get('logIndex');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset('logIndex');
    } else {
      this.set('logIndex', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapV3Swap extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Swap entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Swap', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Swap | null {
    return changetype<UniswapV3Swap | null>(store.get('UniswapV3Swap', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get('transaction');
    return value!.toString();
  }

  set transaction(value: string) {
    this.set('transaction', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get token0(): string {
    let value = this.get('token0');
    return value!.toString();
  }

  set token0(value: string) {
    this.set('token0', Value.fromString(value));
  }

  get token1(): string {
    let value = this.get('token1');
    return value!.toString();
  }

  set token1(value: string) {
    this.set('token1', Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get('recipient');
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set('recipient', Value.fromBytes(value));
  }

  get origin(): Bytes {
    let value = this.get('origin');
    return value!.toBytes();
  }

  set origin(value: Bytes) {
    this.set('origin', Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get('amount0');
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set('amount0', Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get('amount1');
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set('amount1', Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get('amountUSD');
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set('amountUSD', Value.fromBigDecimal(value));
  }

  get sqrtPriceX96(): BigInt {
    let value = this.get('sqrtPriceX96');
    return value!.toBigInt();
  }

  set sqrtPriceX96(value: BigInt) {
    this.set('sqrtPriceX96', Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get('tick');
    return value!.toBigInt();
  }

  set tick(value: BigInt) {
    this.set('tick', Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get('logIndex');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset('logIndex');
    } else {
      this.set('logIndex', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapV3Collect extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Collect entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Collect must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Collect', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Collect | null {
    return changetype<UniswapV3Collect | null>(store.get('UniswapV3Collect', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get('transaction');
    return value!.toString();
  }

  set transaction(value: string) {
    this.set('transaction', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get('owner');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset('owner');
    } else {
      this.set('owner', Value.fromBytes(<Bytes>value));
    }
  }

  get amount0(): BigDecimal {
    let value = this.get('amount0');
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set('amount0', Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get('amount1');
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set('amount1', Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get('amountUSD');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset('amountUSD');
    } else {
      this.set('amountUSD', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tickLower(): BigInt {
    let value = this.get('tickLower');
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set('tickLower', Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get('tickUpper');
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set('tickUpper', Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get('logIndex');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset('logIndex');
    } else {
      this.set('logIndex', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapV3Flash extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapV3Flash entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapV3Flash must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapV3Flash', id.toString(), this);
    }
  }

  static load(id: string): UniswapV3Flash | null {
    return changetype<UniswapV3Flash | null>(store.get('UniswapV3Flash', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get('transaction');
    return value!.toString();
  }

  set transaction(value: string) {
    this.set('transaction', Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get('recipient');
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set('recipient', Value.fromBytes(value));
  }

  get amount0(): BigDecimal {
    let value = this.get('amount0');
    return value!.toBigDecimal();
  }

  set amount0(value: BigDecimal) {
    this.set('amount0', Value.fromBigDecimal(value));
  }

  get amount1(): BigDecimal {
    let value = this.get('amount1');
    return value!.toBigDecimal();
  }

  set amount1(value: BigDecimal) {
    this.set('amount1', Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get('amountUSD');
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set('amountUSD', Value.fromBigDecimal(value));
  }

  get amount0Paid(): BigDecimal {
    let value = this.get('amount0Paid');
    return value!.toBigDecimal();
  }

  set amount0Paid(value: BigDecimal) {
    this.set('amount0Paid', Value.fromBigDecimal(value));
  }

  get amount1Paid(): BigDecimal {
    let value = this.get('amount1Paid');
    return value!.toBigDecimal();
  }

  set amount1Paid(value: BigDecimal) {
    this.set('amount1Paid', Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get('logIndex');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset('logIndex');
    } else {
      this.set('logIndex', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UniswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save UniswapDayData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniswapDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('UniswapDayData', id.toString(), this);
    }
  }

  static load(id: string): UniswapDayData | null {
    return changetype<UniswapDayData | null>(store.get('UniswapDayData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get('date');
    return value!.toI32();
  }

  set date(value: i32) {
    this.set('date', Value.fromI32(value));
  }

  get volumeETH(): BigDecimal {
    let value = this.get('volumeETH');
    return value!.toBigDecimal();
  }

  set volumeETH(value: BigDecimal) {
    this.set('volumeETH', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get volumeUSDUntracked(): BigDecimal {
    let value = this.get('volumeUSDUntracked');
    return value!.toBigDecimal();
  }

  set volumeUSDUntracked(value: BigDecimal) {
    this.set('volumeUSDUntracked', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get('tvlUSD');
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set('tvlUSD', Value.fromBigDecimal(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save PoolDayData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('PoolDayData', id.toString(), this);
    }
  }

  static load(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(store.get('PoolDayData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get('date');
    return value!.toI32();
  }

  set date(value: i32) {
    this.set('date', Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get('liquidity');
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set('liquidity', Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get('sqrtPrice');
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set('sqrtPrice', Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get('token0Price');
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set('token0Price', Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get('token1Price');
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set('token1Price', Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get('tick');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset('tick');
    } else {
      this.set('tick', Value.fromBigInt(<BigInt>value));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get('tvlUSD');
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set('tvlUSD', Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get('open');
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set('open', Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get('high');
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set('high', Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get('low');
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set('low', Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get('close');
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set('close', Value.fromBigDecimal(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save PoolHourData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('PoolHourData', id.toString(), this);
    }
  }

  static load(id: string): PoolHourData | null {
    return changetype<PoolHourData | null>(store.get('PoolHourData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get('periodStartUnix');
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set('periodStartUnix', Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get('liquidity');
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set('liquidity', Value.fromBigInt(value));
  }

  get sqrtPrice(): BigInt {
    let value = this.get('sqrtPrice');
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set('sqrtPrice', Value.fromBigInt(value));
  }

  get token0Price(): BigDecimal {
    let value = this.get('token0Price');
    return value!.toBigDecimal();
  }

  set token0Price(value: BigDecimal) {
    this.set('token0Price', Value.fromBigDecimal(value));
  }

  get token1Price(): BigDecimal {
    let value = this.get('token1Price');
    return value!.toBigDecimal();
  }

  set token1Price(value: BigDecimal) {
    this.set('token1Price', Value.fromBigDecimal(value));
  }

  get tick(): BigInt | null {
    let value = this.get('tick');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset('tick');
    } else {
      this.set('tick', Value.fromBigInt(<BigInt>value));
    }
  }

  get tvlUSD(): BigDecimal {
    let value = this.get('tvlUSD');
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set('tvlUSD', Value.fromBigDecimal(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get('txCount');
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set('txCount', Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get('open');
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set('open', Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get('high');
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set('high', Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get('low');
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set('low', Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get('close');
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set('close', Value.fromBigDecimal(value));
  }
}

export class TickHourData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TickHourData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TickHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TickHourData', id.toString(), this);
    }
  }

  static load(id: string): TickHourData | null {
    return changetype<TickHourData | null>(store.get('TickHourData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get('periodStartUnix');
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set('periodStartUnix', Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get tick(): string {
    let value = this.get('tick');
    return value!.toString();
  }

  set tick(value: string) {
    this.set('tick', Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get('liquidityGross');
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set('liquidityGross', Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get('liquidityNet');
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set('liquidityNet', Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }
}

export class TickDayData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TickDayData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TickDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TickDayData', id.toString(), this);
    }
  }

  static load(id: string): TickDayData | null {
    return changetype<TickDayData | null>(store.get('TickDayData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get('date');
    return value!.toI32();
  }

  set date(value: i32) {
    this.set('date', Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get('pool');
    return value!.toString();
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get tick(): string {
    let value = this.get('tick');
    return value!.toString();
  }

  set tick(value: string) {
    this.set('tick', Value.fromString(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get('liquidityGross');
    return value!.toBigInt();
  }

  set liquidityGross(value: BigInt) {
    this.set('liquidityGross', Value.fromBigInt(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get('liquidityNet');
    return value!.toBigInt();
  }

  set liquidityNet(value: BigInt) {
    this.set('liquidityNet', Value.fromBigInt(value));
  }

  get volumeToken0(): BigDecimal {
    let value = this.get('volumeToken0');
    return value!.toBigDecimal();
  }

  set volumeToken0(value: BigDecimal) {
    this.set('volumeToken0', Value.fromBigDecimal(value));
  }

  get volumeToken1(): BigDecimal {
    let value = this.get('volumeToken1');
    return value!.toBigDecimal();
  }

  set volumeToken1(value: BigDecimal) {
    this.set('volumeToken1', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenDayData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenDayData', id.toString(), this);
    }
  }

  static load(id: string): TokenDayData | null {
    return changetype<TokenDayData | null>(store.get('TokenDayData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get('date');
    return value!.toI32();
  }

  set date(value: i32) {
    this.set('date', Value.fromI32(value));
  }

  get token(): string {
    let value = this.get('token');
    return value!.toString();
  }

  set token(value: string) {
    this.set('token', Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get('volume');
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set('volume', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get('totalValueLocked');
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set('totalValueLocked', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get('totalValueLockedUSD');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set('totalValueLockedUSD', Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get('priceUSD');
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set('priceUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get('open');
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set('open', Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get('high');
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set('high', Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get('low');
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set('low', Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get('close');
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set('close', Value.fromBigDecimal(value));
  }
}

export class TokenHourData extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save TokenHourData entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('TokenHourData', id.toString(), this);
    }
  }

  static load(id: string): TokenHourData | null {
    return changetype<TokenHourData | null>(store.get('TokenHourData', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get periodStartUnix(): i32 {
    let value = this.get('periodStartUnix');
    return value!.toI32();
  }

  set periodStartUnix(value: i32) {
    this.set('periodStartUnix', Value.fromI32(value));
  }

  get token(): string {
    let value = this.get('token');
    return value!.toString();
  }

  set token(value: string) {
    this.set('token', Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get('volume');
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set('volume', Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get('volumeUSD');
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set('volumeUSD', Value.fromBigDecimal(value));
  }

  get untrackedVolumeUSD(): BigDecimal {
    let value = this.get('untrackedVolumeUSD');
    return value!.toBigDecimal();
  }

  set untrackedVolumeUSD(value: BigDecimal) {
    this.set('untrackedVolumeUSD', Value.fromBigDecimal(value));
  }

  get totalValueLocked(): BigDecimal {
    let value = this.get('totalValueLocked');
    return value!.toBigDecimal();
  }

  set totalValueLocked(value: BigDecimal) {
    this.set('totalValueLocked', Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get('totalValueLockedUSD');
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set('totalValueLockedUSD', Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get('priceUSD');
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set('priceUSD', Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get('feesUSD');
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set('feesUSD', Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get('open');
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set('open', Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get('high');
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set('high', Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get('low');
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set('low', Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get('close');
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set('close', Value.fromBigDecimal(value));
  }
}
